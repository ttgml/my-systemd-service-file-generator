angular.module('systemdgen', ['ngMaterial'])
    .controller('main', ['$scope', '$mdConstant', '$mdDialog', function ($scope, $mdConstant, $mdDialog) {

        $scope.keys = [$mdConstant.KEY_CODE.ENTER, $mdConstant.KEY_CODE.COMMA];


        $scope.docs = {
            unit: {
                "Description": "<p>有利于人类阅读的、对单元进行简单描述的字符串。将被 <span class=\"command\"><strong>systemd</strong></span> 或其他程序用来标记此单元， 这个字符串应该只用于识别此单元即可，不需要过分说明。例如 \"<code class=\"literal\">Apache2 Web Server</code>\" 就是一个好例子，而 \"<code class=\"literal\">high-performance light-weight HTTP server</code>\" (太通用) 与 \"<code class=\"literal\">Apache2</code>\" (信息太少) 则是两个坏例子。因为 <span class=\"command\"><strong>systemd</strong></span> 将会把这个字符串用于状态信息中(\"<code class=\"literal\">Starting <em class=\"replaceable\"><code>description</code></em>...</code>\", \"<code class=\"literal\">Started <em class=\"replaceable\"><code>description</code></em>.</code>\", \"<code class=\"literal\">Reached target <em class=\"replaceable\"><code>description</code></em>.</code>\", \"<code class=\"literal\">Failed to start <em class=\"replaceable\"><code>description</code></em>.</code>\")，所以这个字符串应该表现的像一个名词， 而不是一个完整的句子或带有动词的短语。比如 \"<code class=\"literal\">exiting the container</code>\" 或 \"<code class=\"literal\">updating the database once per day.</code>\" 就是典型的坏例子。</p>",
                "Documentation": "<p>一组用空格分隔的文档URI列表， 这些文档是对此单元的详细说明。 可接受 \"<code class=\"literal\">http://</code>\", \"<code class=\"literal\">https://</code>\", \"<code class=\"literal\">file:</code>\", \"<code class=\"literal\">info:</code>\", \"<code class=\"literal\">man:</code>\" 五种URI类型。 有关URI语法的详细说明，参见 <a href=\"http://man7.org/linux/man-pages/man7/uri.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">uri</span>(7)</span></a> 手册。 这些URI应该按照相关性由高到低列出。 比如，将解释该单元作用的文档放在第一个， 最好再紧跟单元的配置说明， 最后再附上其他文档。 可以多次使用此选项， 依次向文档列表尾部添加新文档。 但是，如果为此选项设置一个空字符串， 那么表示 清空先前已存在的列表。</p>",
                "Wants": "<p>此选项是 <code class=\"varname\">Requires=</code> 的弱化版。 当此单元被启动时， 所有这里列出的其他单元只是尽可能被启动。 但是，即使某些单元不存在或者未能启动成功， 也不会影响此单元的启动。 推荐使用此选项来设置单元之间的依赖关系。</p><p>注意， 此种依赖关系也可以在单元文件之外通过向 <code class=\"filename\">.wants/</code> 目录中添加软连接来设置， 详见前文。</p>",
                "Requires": "<p>设置此单元所必须依赖的其他单元。当启动此单元时，也必须启动这里列出的所有其他单元。 如果此处列出的某个单元启动失败、并且恰好又设置了到这个失败单元的 <code class= \"varname \">After=</code> 依赖，那么将不会启动此单元。此外，无论是否设置了到被依赖单元的 <code class= \"varname \">After=</code> 依赖，只要某个被依赖的单元被显式停止，那么该单元也会被连带停止。 想要添加多个单元，可以多次使用此选项，也可以设置一个空格分隔的单元列表。 注意，此选项并不影响单元之间的启动或停止顺序。 要想调整单元之间的启动或停止顺序，请使用 <code class= \"varname \">After=</code> 或 <code class= \"varname \">Before=</code> 选项。 例如，在 <code class= \"filename \">foo.service</code> 中设置了 <code class= \"varname \">Requires=bar.service</code> ， 但是并未使用 <code class= \"varname \">After=</code> 或 <code class= \"varname \">Before=</code> 设定两者的启动顺序， 那么，当需要启动 <code class= \"filename \">foo.service</code> 的时候，这两个单元会被并行的同时启动。 建议使用 <code class= \"varname \">Wants=</code> 代替 <code class= \"varname \">Requires=</code> 来设置单元之间的非致命依赖关系， 从而有助于获得更好的健壮性， 特别是在某些单元启动失败的时候。</p><p>注意，设置了此依赖并不意味着当本单元处于运行状态时，被依赖的其他单元也必须总是处于运行状态。 例如：(1)失败的条件检查(例如后文的 <code class= \"varname \">ConditionPathExists=</code>, <code class= \"varname \">ConditionPathIsSymbolicLink=</code>, …)只会导致被依赖的单元跳过启动，而不会导致被依赖的单元启动失败(也就是进入 \"failed \"状态)。 (2)某些被依赖的单元可能会自己主动停止(例如有的服务进程可能会主动干净的退出、有的设备可能被用户拔出)， 而不会导致本单元自身也跟着一起停止。 要想达到这样的效果，可以同时联合使用 <code class= \"varname \">BindsTo=</code> 与 <code class= \"varname \">After=</code> 依赖，这样就可以确保：在被依赖的其他单元没有处于运行状态时， 本单元自身永远不会启动成功(详见后文)。</p><p>注意， 此种依赖关系也可以在单元文件之外通过向 <code class= \"filename \">.requires/</code>目录中添加软连接来设置。 详见前文。</p>",
                "Requisite": "<p>与 <code class=\"varname\">Requires=</code> 类似。不同之处在于：当此单元启动时，这里列出的依赖单元必须已经全部处于启动成功的状态， 否则，此单元将会立即进入启动失败的状态，并且也不会启动那些尚未成功启动的被依赖单元。 因为 <code class=\"varname\">Requisite=</code> 不隐含任何顺序依赖(即使两个单元在同一个事务中启动)， 所以，此选项经常与 <code class=\"varname\">After=</code> 一起使用， 以确保此单元不会在启动时间上早于被依赖的单元。</p><p>如果 <code class=\"filename\">a.service</code> 中包含了 <code class=\"varname\">Requisite=b.service</code> ，那么这个依赖关系将在 <code class=\"filename\">b.service</code> 的属性列表中显示为 <code class=\"varname\">RequisiteOf=a.service</code> 。 也就是说，不能直接设置 <code class=\"varname\">RequisiteOf=</code> 依赖。</p>",
                "BindsTo": "<p>与  <code class=\"varname\">Requires=</code> 类似，但是依赖性更强： 如果这里列出的任意一个单元停止运行或者崩溃，那么也会连带导致该单元自身被停止。 这就意味着该单元可能因为 这里列出的任意一个单元的 主动退出、某个设备被拔出、某个挂载点被卸载， 而被强行停止。</p><p>如果将某个被依赖的单元同时放到 <code class=\"varname\">After=</code> 与 <code class=\"varname\">BindsTo=</code> 选项中，那么效果将会更加强烈：被依赖的单元必须严格的先于本单元启动成功之后， 本单元才能开始启动。这就意味着，不但在被依赖的单元意外停止时，该单元必须停止， 而且在被依赖的单元由于条件检查失败(例如后文的 <code class=\"varname\">ConditionPathExists=</code>, <code class=\"varname\">ConditionPathIsSymbolicLink=</code>, …)而被跳过时， 该单元也将无法启动。正因为如此，在很多场景下，需要同时使用 <code class=\"varname\">BindsTo=</code> 与 <code class=\"varname\">After=</code> 选项。</p><p>如果 <code class=\"filename\">a.service</code> 中包含了 <code class=\"varname\">BindsTo=b.service</code> ，那么这个依赖关系将在 <code class=\"filename\">b.service</code> 的属性列表中显示为 <code class=\"varname\">BoundBy=a.service</code> 。 也就是说，不能直接设置 <code class=\"varname\">BoundBy=</code> 依赖。</p>",
                "PartOf": "<p>与 <code class=\"varname\">Requires=</code> 类似， 不同之处在于：仅作用于单元的停止或重启。 其含义是，当停止或重启这里列出的某个单元时， 也会同时停止或重启该单元自身。 注意，这个依赖是单向的， 该单元自身的停止或重启并不影响这里列出的单元。</p><p>如果 <code class=\"filename\">a.service</code> 中包含了 <code class=\"varname\">PartOf=b.service</code> ，那么这个依赖关系将在 <code class=\"filename\">b.service</code> 的属性列表中显示为 <code class=\"varname\">ConsistsOf=a.service</code> 。 也就是说，不能直接设置 <code class=\"varname\">ConsistsOf=</code> 依赖。</p>",
                "Conflicts": "<p>指定单元之间的冲突关系。 接受一个空格分隔的单元列表，表明该单元不能与列表中的任何单元共存， 也就是说：(1)当此单元启动的时候，列表中的所有单元都将被停止； (2)当列表中的某个单元启动的时候，该单元同样也将被停止。 注意，此选项与 <code class= \"varname \">After=</code> 和 <code class= \"varname \">Before=</code> 选项没有任何关系。</p><p>如果两个相互冲突的单元A与B 需要在同一个事务内作为B启动， 那么这个事务要么会失败(A与B都是事务中的必要部分[Requires])， 要么就是必须被修改(A与B中至少有一个是事务中的非必要部分)。 在后一种情况下， 将会剔除一个非必要的单元 (若两个都是非必要的单元， 则优先剔除A)。</p>",
                "Before": "<p>强制指定单元之间的先后顺序，接受一个空格分隔的单元列表。 假定 <code class=\"filename\">foo.service</code> 单元包含 <code class=\"option\">Before=bar.service</code> 设置， 那么当两个单元都需要启动的时候， <code class=\"filename\">bar.service</code> 将会一直延迟到 <code class=\"filename\">foo.service</code> 启动完毕之后再启动。 注意，停止顺序与启动顺序正好相反，也就是说， 只有当 <code class=\"filename\">bar.service</code> 完全停止后，才会停止 <code class=\"filename\">foo.service</code> 单元。 <code class=\"varname\">After=</code> 的含义与 <code class=\"varname\">Before=</code> 正好相反。 假定 <code class=\"filename\">foo.service</code> 单元包含 <code class=\"option\">After=bar.service</code> 设置， 那么当两个单元都需要启动的时候， <code class=\"filename\">foo.service</code> 将会一直延迟到 <code class=\"filename\">bar.service</code> 启动完毕之后再启动。 注意，停止顺序与启动顺序正好相反，也就是说， 只有当 <code class=\"filename\">foo.service</code> 完全停止后，才会停止 <code class=\"filename\">bar.service</code> 单元。 注意，此二选项仅用于指定先后顺序， 而与 <code class=\"varname\">Requires=</code>, <code class=\"varname\">Wants=</code>, <code class=\"varname\">BindsTo=</code> 这些选项没有任何关系。 不过在实践中也经常遇见将某个单元同时设置到 <code class=\"varname\">After=</code> 与 <code class=\"varname\">Requires=</code> 选项中的情形。 可以多次使用此二选项，以将多个单元添加到列表中。 假定两个单元之间存在先后顺序(无论谁先谁后)，并且一个要停止而另一个要启动，那么永远是\"先停止后启动\"的顺序。 但如果两个单元之间没有先后顺序，那么它们的停止和启动就都是相互独立的，并且是并行的。 对于不同类型的单元来说，判断启动是否已经完成的标准并不完全相同。 特别的，对于设置在 <code class=\"varname\">Before=</code>/<code class=\"varname\">After=</code> 中的服务单元来说， 只有在服务单元内配置的所有启动命令全部都已经被调用，并且对于每一个被调用的命令， 要么确认已经调用失败、要么确认已经成功运行的情况下， 才能认为已经完成启动。</p>",
                "After": "<p>强制指定单元之间的先后顺序，接受一个空格分隔的单元列表。 假定 <code class=\"filename\">foo.service</code> 单元包含 <code class=\"option\">Before=bar.service</code> 设置， 那么当两个单元都需要启动的时候， <code class=\"filename\">bar.service</code> 将会一直延迟到 <code class=\"filename\">foo.service</code> 启动完毕之后再启动。 注意，停止顺序与启动顺序正好相反，也就是说， 只有当 <code class=\"filename\">bar.service</code> 完全停止后，才会停止 <code class=\"filename\">foo.service</code> 单元。 <code class=\"varname\">After=</code> 的含义与 <code class=\"varname\">Before=</code> 正好相反。 假定 <code class=\"filename\">foo.service</code> 单元包含 <code class=\"option\">After=bar.service</code> 设置， 那么当两个单元都需要启动的时候， <code class=\"filename\">foo.service</code> 将会一直延迟到 <code class=\"filename\">bar.service</code> 启动完毕之后再启动。 注意，停止顺序与启动顺序正好相反，也就是说， 只有当 <code class=\"filename\">foo.service</code> 完全停止后，才会停止 <code class=\"filename\">bar.service</code> 单元。 注意，此二选项仅用于指定先后顺序， 而与 <code class=\"varname\">Requires=</code>, <code class=\"varname\">Wants=</code>, <code class=\"varname\">BindsTo=</code> 这些选项没有任何关系。 不过在实践中也经常遇见将某个单元同时设置到 <code class=\"varname\">After=</code> 与 <code class=\"varname\">Requires=</code> 选项中的情形。 可以多次使用此二选项，以将多个单元添加到列表中。 假定两个单元之间存在先后顺序(无论谁先谁后)，并且一个要停止而另一个要启动，那么永远是\"先停止后启动\"的顺序。 但如果两个单元之间没有先后顺序，那么它们的停止和启动就都是相互独立的，并且是并行的。 对于不同类型的单元来说，判断启动是否已经完成的标准并不完全相同。 特别的，对于设置在 <code class=\"varname\">Before=</code>/<code class=\"varname\">After=</code> 中的服务单元来说， 只有在服务单元内配置的所有启动命令全部都已经被调用，并且对于每一个被调用的命令， 要么确认已经调用失败、要么确认已经成功运行的情况下， 才能认为已经完成启动。</p>",
                "OnFailure": "<p>接受一个空格分隔的单元列表。    当该单元进入失败(\"<code class=\"literal\">failed</code>\")状态时，    将会启动列表中的单元。使用了    <code class=\"varname\">Restart=</code> 的服务单元仅在超出启动频率限制之后，    才会进入失败(failed)状态。</p>",
                "PropagatesReloadTo": "<p>接受一个空格分隔的单元列表。 <code class=\"varname\">PropagatesReloadTo=</code> 表示 在 reload 该单元时， 也同时 reload 所有列表中的单元。 <code class=\"varname\">ReloadPropagatedFrom=</code> 表示 在 reload 列表中的某个单元时， 也同时 reload 该单元。</p>",
                "ReloadPropagatedFrom": "<p>接受一个空格分隔的单元列表。 <code class=\"varname\">PropagatesReloadTo=</code> 表示 在 reload 该单元时， 也同时 reload 所有列表中的单元。 <code class=\"varname\">ReloadPropagatedFrom=</code> 表示 在 reload 列表中的某个单元时， 也同时 reload 该单元。</p>",
                "JoinsNamespaceOf": "<p>接受一个空格分隔的单元列表，\" 表示将该单元所启动的进程加入到列表单元的网络及 临时文件(<code class=\"filename\">/tmp</code>, <code class=\"filename\">/var/tmp</code>)的名字空间中。 此选项仅适用于支持 <code class=\"varname\">PrivateNetwork=</code> 与/或 <code class=\"varname\">PrivateTmp=</code> 指令的单元(对加入者与被加入者都适用)。详见 <a href=\"systemd.exec.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.exec</span>(5)</span></a> 手册。 如果单元列表中 仅有一个单元处于已启动状态， 那么该单元将加入到 这个唯一已启动单元的名字空间中。 如果单元列表中 有多个单元处于已启动状态， 那么该单元将 随机加入一个已启动单元的 名字空间中。</p>",
                "RequiresMountsFor": "<p>接受一个空格分隔的绝对路径列表，表示该单元将会使用到这些文件系统路径。\"所有这些路径中涉及的挂载点所对应的 mount 单元，都会被隐式的添加到 <code class=\"varname\">Requires=</code> 与 <code class=\"varname\">After=</code> 选项中。 也就是说，这些路径中所涉及的挂载点都会在启动该单元之前被自动挂载。</p><p>注意，虽然带有 <code class=\"option\">noauto</code> 标记的挂载点不会被 <code class=\"filename\">local-fs.target</code> 自动挂载， 但是它并不影响此选项所设置的依赖关系。 也就是说，带有 <code class=\"option\">noauto</code> 标记的挂载点 依然会在启动该单元之前被自动挂载。</p>",
                "OnFailureJobMode": "<p>可设为 \"<code class=\"literal\">fail</code>\", \"<code class=\"literal\">replace</code>\", \"<code class=\"literal\">replace-irreversibly</code>\", \"<code class=\"literal\">isolate</code>\", \"<code class=\"literal\">flush</code>\", \"<code class=\"literal\">ignore-dependencies</code>\", \"<code class=\"literal\">ignore-requirements</code>\" 之一。 默认值是 \"<code class=\"literal\">replace</code>\" 。 指定 <code class=\"varname\">OnFailure=</code> 中列出的单元应该以何种方式排队。值的含义参见 <a href=\"systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> 手册中对 <code class=\"option\">--job-mode=</code> 选项的说明。 如果设为 \"<code class=\"literal\">isolate</code>\" ， 那么只能在 <code class=\"varname\">OnFailure=</code> 中设置一个单独的单元。</p>",
                "IgnoreOnIsolate": "<p>接受一个布尔值。设为 <code class=\"option\">yes</code> 表示在执行   <span class=\"command\"><strong>systemctl isolate ...</strong></span> 命令时，此单元不会被停止。   对于 service, target, socket, timer, path 单元来说，默认值是 <code class=\"option\">false</code> ；   对于 slice, scope, device, swap, mount, automount 单元来说，   默认值是 <code class=\"option\">true</code> 。</p>",
                "StopWhenUnneeded": "<p>如果设为 <code class=\"option\">yes</code> ， 那么当此单元不再被任何已启动的单元依赖时， 将会被自动停止。 默认值 <code class=\"option\">no</code> 的含义是， 除非此单元与其他即将启动的单元冲突， 否则即使此单元已不再被任何已启动的单元依赖， 也不会自动停止它。</p>",
                "RefuseManualStart": "<p>Takes a boolean argument. If\n        <code class=\"option\">true</code>, this unit can only be activated or\n        deactivated indirectly. In this case, explicit start-up or\n        termination requested by the user is denied, however if it is\n        started or stopped as a dependency of another unit, start-up\n        or termination will succeed. This is mostly a safety feature\n        to ensure that the user does not accidentally activate units\n        that are not intended to be activated explicitly, and not\n        accidentally deactivate units that are not intended to be\n        deactivated. These options default to\n        <code class=\"option\">false</code>.</p>",
                "RefuseManualStop": "<p>Takes a boolean argument. If\n        <code class=\"option\">true</code>, this unit can only be activated or\n        deactivated indirectly. In this case, explicit start-up or\n        termination requested by the user is denied, however if it is\n        started or stopped as a dependency of another unit, start-up\n        or termination will succeed. This is mostly a safety feature\n        to ensure that the user does not accidentally activate units\n        that are not intended to be activated explicitly, and not\n        accidentally deactivate units that are not intended to be\n        deactivated. These options default to\n        <code class=\"option\">false</code>.</p>",
                "AllowIsolate": "<p>Takes a boolean argument. If\n        <code class=\"option\">true</code>, this unit may be used with the\n        <span class=\"command\"><strong>systemctl isolate</strong></span> command. Otherwise, this\n        will be refused. It probably is a good idea to leave this\n        disabled except for target units that shall be used similar to\n        runlevels in SysV init systems, just as a precaution to avoid\n        unusable system states. This option defaults to\n        <code class=\"option\">false</code>.</p>",
                "DefaultDependencies": "<p>Takes a boolean argument. If\n        <code class=\"option\">yes</code>, (the default), a few default\n        dependencies will implicitly be created for the unit. The\n        actual dependencies created depend on the unit type. For\n        example, for service units, these dependencies ensure that the\n        service is started only after basic system initialization is\n        completed and is properly terminated on system shutdown. See\n        the respective man pages for details. Generally, only services\n        involved with early boot or late shutdown should set this\n        option to <code class=\"option\">no</code>. It is highly recommended to\n        leave this option enabled for the majority of common units. If\n        set to <code class=\"option\">no</code>, this option does not disable\n        all implicit dependencies, just non-essential\n        ones.</p>",
                "CollectMode": "<p>Tweaks the \"garbage collection\" algorithm for this unit. Takes one of <code class=\"option\">inactive</code>\n        or <code class=\"option\">inactive-or-failed</code>. If set to <code class=\"option\">inactive</code> the unit will be unloaded if it is\n        in the <code class=\"constant\">inactive</code> state and is not referenced by clients, jobs or other units — however it\n        is not unloaded if it is in the <code class=\"constant\">failed</code> state. In <code class=\"option\">failed</code> mode, failed\n        units are not unloaded until the user invoked <span class=\"command\"><strong>systemctl reset-failed</strong></span> on them to reset the\n        <code class=\"constant\">failed</code> state, or an equivalent command. This behaviour is altered if this option is set to\n        <code class=\"option\">inactive-or-failed</code>: in this case the unit is unloaded even if the unit is in a\n        <code class=\"constant\">failed</code> state, and thus an explicitly resetting of the <code class=\"constant\">failed</code> state is\n        not necessary. Note that if this mode is used unit results (such as exit codes, exit signals, consumed\n        resources, …) are flushed out immediately after the unit completed, except for what is stored in the logging\n        subsystem. Defaults to <code class=\"option\">inactive</code>.</p>",
                "FailureAction": "<p>Configure the action to take when the unit stops and enters a failed state or inactive state.\n        Takes one of <code class=\"option\">none</code>, <code class=\"option\">reboot</code>, <code class=\"option\">reboot-force</code>,\n        <code class=\"option\">reboot-immediate</code>, <code class=\"option\">poweroff</code>, <code class=\"option\">poweroff-force</code>,\n        <code class=\"option\">poweroff-immediate</code>, <code class=\"option\">exit</code>, and <code class=\"option\">exit-force</code>. In system mode,\n        all options are allowed. In user mode, only <code class=\"option\">none</code>, <code class=\"option\">exit</code>, and\n        <code class=\"option\">exit-force</code> are allowed. Both options default to <code class=\"option\">none</code>.</p><p>If <code class=\"option\">none</code> is set, no action will be triggered. <code class=\"option\">reboot</code> causes a reboot\n        following the normal shutdown procedure (i.e. equivalent to <span class=\"command\"><strong>systemctl reboot</strong></span>).\n        <code class=\"option\">reboot-force</code> causes a forced reboot which will terminate all processes forcibly but should\n        cause no dirty file systems on reboot (i.e. equivalent to <span class=\"command\"><strong>systemctl reboot -f</strong></span>) and\n        <code class=\"option\">reboot-immediate</code> causes immediate execution of the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/reboot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">reboot</span>(2)</span></a> system call, which\n        might result in data loss (i.e. equivalent to <span class=\"command\"><strong>systemctl reboot -ff</strong></span>). Similarly,\n        <code class=\"option\">poweroff</code>, <code class=\"option\">poweroff-force</code>, <code class=\"option\">poweroff-immediate</code> have the effect\n        of powering down the system with similar semantics. <code class=\"option\">exit</code> causes the manager to exit following\n        the normal shutdown procedure, and <code class=\"option\">exit-force</code> causes it terminate without shutting down\n        services. When <code class=\"option\">exit</code> or <code class=\"option\">exit-force</code> is used by default the exit status of the\n        main process of the unit (if this applies) is returned from the service manager. However, this may be overridden\n        with <code class=\"varname\">FailureActionExitStatus=</code>/<code class=\"varname\">SuccessActionExitStatus=</code>, see\n        below.</p>",
                "SuccessAction": "<p>Configure the action to take when the unit stops and enters a failed state or inactive state.\n        Takes one of <code class=\"option\">none</code>, <code class=\"option\">reboot</code>, <code class=\"option\">reboot-force</code>,\n        <code class=\"option\">reboot-immediate</code>, <code class=\"option\">poweroff</code>, <code class=\"option\">poweroff-force</code>,\n        <code class=\"option\">poweroff-immediate</code>, <code class=\"option\">exit</code>, and <code class=\"option\">exit-force</code>. In system mode,\n        all options are allowed. In user mode, only <code class=\"option\">none</code>, <code class=\"option\">exit</code>, and\n        <code class=\"option\">exit-force</code> are allowed. Both options default to <code class=\"option\">none</code>.</p><p>If <code class=\"option\">none</code> is set, no action will be triggered. <code class=\"option\">reboot</code> causes a reboot\n        following the normal shutdown procedure (i.e. equivalent to <span class=\"command\"><strong>systemctl reboot</strong></span>).\n        <code class=\"option\">reboot-force</code> causes a forced reboot which will terminate all processes forcibly but should\n        cause no dirty file systems on reboot (i.e. equivalent to <span class=\"command\"><strong>systemctl reboot -f</strong></span>) and\n        <code class=\"option\">reboot-immediate</code> causes immediate execution of the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/reboot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">reboot</span>(2)</span></a> system call, which\n        might result in data loss (i.e. equivalent to <span class=\"command\"><strong>systemctl reboot -ff</strong></span>). Similarly,\n        <code class=\"option\">poweroff</code>, <code class=\"option\">poweroff-force</code>, <code class=\"option\">poweroff-immediate</code> have the effect\n        of powering down the system with similar semantics. <code class=\"option\">exit</code> causes the manager to exit following\n        the normal shutdown procedure, and <code class=\"option\">exit-force</code> causes it terminate without shutting down\n        services. When <code class=\"option\">exit</code> or <code class=\"option\">exit-force</code> is used by default the exit status of the\n        main process of the unit (if this applies) is returned from the service manager. However, this may be overridden\n        with <code class=\"varname\">FailureActionExitStatus=</code>/<code class=\"varname\">SuccessActionExitStatus=</code>, see\n        below.</p>",
                "FailureActionExitStatus": "<p>Controls the exit status to propagate back to an invoking container manager (in case of a\n        system service) or service manager (in case of a user manager) when the\n        <code class=\"varname\">FailureAction=</code>/<code class=\"varname\">SuccessAction=</code> are set to <code class=\"option\">exit</code> or\n        <code class=\"option\">exit-force</code> and the action is triggered. By default the exit status of the main process of the\n        triggering unit (if this applies) is propagated. Takes a value in the range 0…255 or the empty string to\n        request default behaviour.</p>",
                "SuccessActionExitStatus": "<p>Controls the exit status to propagate back to an invoking container manager (in case of a\n        system service) or service manager (in case of a user manager) when the\n        <code class=\"varname\">FailureAction=</code>/<code class=\"varname\">SuccessAction=</code> are set to <code class=\"option\">exit</code> or\n        <code class=\"option\">exit-force</code> and the action is triggered. By default the exit status of the main process of the\n        triggering unit (if this applies) is propagated. Takes a value in the range 0…255 or the empty string to\n        request default behaviour.</p>",
                "JobTimeoutSec": "<p>When a job for this unit is queued, a timeout <code class=\"varname\">JobTimeoutSec=</code> may be\n        configured. Similarly, <code class=\"varname\">JobRunningTimeoutSec=</code> starts counting when the queued job is actually\n        started. If either time limit is reached, the job will be cancelled, the unit however will not change state or\n        even enter the \"<code class=\"literal\">failed</code>\" mode. This value defaults to \"<code class=\"literal\">infinity</code>\" (job timeouts\n        disabled), except for device units (<code class=\"varname\">JobRunningTimeoutSec=</code> defaults to\n        <code class=\"varname\">DefaultTimeoutStartSec=</code>). NB: this timeout is independent from any unit-specific timeout\n        (for example, the timeout set with <code class=\"varname\">TimeoutStartSec=</code> in service units) as the job timeout has\n        no effect on the unit itself, only on the job that might be pending for it. Or in other words: unit-specific\n        timeouts are useful to abort unit state changes, and revert them. The job timeout set with this option however\n        is useful to abort only the job waiting for the unit state to change.</p>",
                "JobRunningTimeoutSec": "<p>When a job for this unit is queued, a timeout <code class=\"varname\">JobTimeoutSec=</code> may be\n        configured. Similarly, <code class=\"varname\">JobRunningTimeoutSec=</code> starts counting when the queued job is actually\n        started. If either time limit is reached, the job will be cancelled, the unit however will not change state or\n        even enter the \"<code class=\"literal\">failed</code>\" mode. This value defaults to \"<code class=\"literal\">infinity</code>\" (job timeouts\n        disabled), except for device units (<code class=\"varname\">JobRunningTimeoutSec=</code> defaults to\n        <code class=\"varname\">DefaultTimeoutStartSec=</code>). NB: this timeout is independent from any unit-specific timeout\n        (for example, the timeout set with <code class=\"varname\">TimeoutStartSec=</code> in service units) as the job timeout has\n        no effect on the unit itself, only on the job that might be pending for it. Or in other words: unit-specific\n        timeouts are useful to abort unit state changes, and revert them. The job timeout set with this option however\n        is useful to abort only the job waiting for the unit state to change.</p>",
                "JobTimeoutAction": "<p><code class=\"varname\">JobTimeoutAction=</code> optionally configures an additional action to take when\n        the timeout is hit, see description of <code class=\"varname\">JobTimeoutSec=</code> and\n        <code class=\"varname\">JobRunningTimeoutSec=</code> above. It takes the same values as\n        <code class=\"varname\">StartLimitAction=</code>. Defaults to <code class=\"option\">none</code>.\n        <code class=\"varname\">JobTimeoutRebootArgument=</code> configures an optional reboot string to pass to the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/reboot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">reboot</span>(2)</span></a> system call.\n        </p>",
                "JobTimeoutRebootArgument": "<p><code class=\"varname\">JobTimeoutAction=</code> optionally configures an additional action to take when\n        the timeout is hit, see description of <code class=\"varname\">JobTimeoutSec=</code> and\n        <code class=\"varname\">JobRunningTimeoutSec=</code> above. It takes the same values as\n        <code class=\"varname\">StartLimitAction=</code>. Defaults to <code class=\"option\">none</code>.\n        <code class=\"varname\">JobTimeoutRebootArgument=</code> configures an optional reboot string to pass to the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/reboot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">reboot</span>(2)</span></a> system call.\n        </p>",
                "StartLimitIntervalSecinterval": "<p>Configure unit start rate limiting. Units which are started more than\n        <em class=\"replaceable\"><code>burst</code></em> times within an <em class=\"replaceable\"><code>interval</code></em> time interval are not\n        permitted to start any more. Use <code class=\"varname\">StartLimitIntervalSec=</code> to configure the checking interval\n        (defaults to <code class=\"varname\">DefaultStartLimitIntervalSec=</code> in manager configuration file, set it to 0 to\n        disable any kind of rate limiting). Use <code class=\"varname\">StartLimitBurst=</code> to configure how many starts per\n        interval are allowed (defaults to <code class=\"varname\">DefaultStartLimitBurst=</code> in manager configuration\n        file). These configuration options are particularly useful in conjunction with the service setting\n        <code class=\"varname\">Restart=</code> (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.service.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.service</span>(5)</span></a>); however,\n        they apply to all kinds of starts (including manual), not just those triggered by the\n        <code class=\"varname\">Restart=</code> logic. Note that units which are configured for <code class=\"varname\">Restart=</code> and\n        which reach the start limit are not attempted to be restarted anymore; however, they may still be restarted\n        manually at a later point, after the <em class=\"replaceable\"><code>interval</code></em> has passed.  From this point on, the\n        restart logic is activated again. Note that <span class=\"command\"><strong>systemctl reset-failed</strong></span> will cause the restart\n        rate counter for a service to be flushed, which is useful if the administrator wants to manually start a unit\n        and the start limit interferes with that. Note that this rate-limiting is enforced after any unit condition\n        checks are executed, and hence unit activations with failing conditions do not count towards this rate\n        limit. This setting does not apply to slice, target, device, and scope units, since they are unit types whose\n        activation may either never fail, or may succeed only a single time.</p><p>When a unit is unloaded due to the garbage collection logic (see above) its rate limit counters are\n        flushed out too. This means that configuring start rate limiting for a unit that is not referenced continuously\n        has no effect.</p>",
                "StartLimitBurst": "<p>Configure unit start rate limiting. Units which are started more than\n        <em class=\"replaceable\"><code>burst</code></em> times within an <em class=\"replaceable\"><code>interval</code></em> time interval are not\n        permitted to start any more. Use <code class=\"varname\">StartLimitIntervalSec=</code> to configure the checking interval\n        (defaults to <code class=\"varname\">DefaultStartLimitIntervalSec=</code> in manager configuration file, set it to 0 to\n        disable any kind of rate limiting). Use <code class=\"varname\">StartLimitBurst=</code> to configure how many starts per\n        interval are allowed (defaults to <code class=\"varname\">DefaultStartLimitBurst=</code> in manager configuration\n        file). These configuration options are particularly useful in conjunction with the service setting\n        <code class=\"varname\">Restart=</code> (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.service.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.service</span>(5)</span></a>); however,\n        they apply to all kinds of starts (including manual), not just those triggered by the\n        <code class=\"varname\">Restart=</code> logic. Note that units which are configured for <code class=\"varname\">Restart=</code> and\n        which reach the start limit are not attempted to be restarted anymore; however, they may still be restarted\n        manually at a later point, after the <em class=\"replaceable\"><code>interval</code></em> has passed.  From this point on, the\n        restart logic is activated again. Note that <span class=\"command\"><strong>systemctl reset-failed</strong></span> will cause the restart\n        rate counter for a service to be flushed, which is useful if the administrator wants to manually start a unit\n        and the start limit interferes with that. Note that this rate-limiting is enforced after any unit condition\n        checks are executed, and hence unit activations with failing conditions do not count towards this rate\n        limit. This setting does not apply to slice, target, device, and scope units, since they are unit types whose\n        activation may either never fail, or may succeed only a single time.</p><p>When a unit is unloaded due to the garbage collection logic (see above) its rate limit counters are\n        flushed out too. This means that configuring start rate limiting for a unit that is not referenced continuously\n        has no effect.</p>",
                "StartLimitAction": "<p>Configure an additional action to take if the rate limit configured with\n        <code class=\"varname\">StartLimitIntervalSec=</code> and <code class=\"varname\">StartLimitBurst=</code> is hit. Takes the same\n        values as the <code class=\"varname\">FailureAction=</code>/<code class=\"varname\">SuccessAction=</code> settings. If\n        <code class=\"option\">none</code> is set, hitting the rate limit will trigger no action except that\n        the start will not be permitted. Defaults to <code class=\"option\">none</code>.</p>",
                "RebootArgument": "<p>Configure the optional argument for the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/reboot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">reboot</span>(2)</span></a> system call if\n        <code class=\"varname\">StartLimitAction=</code> or <code class=\"varname\">FailureAction=</code> is a reboot action. This\n        works just like the optional argument to <span class=\"command\"><strong>systemctl reboot</strong></span> command.</p>",
                "SourcePath": "<p>A path to a configuration file this unit has\n        been generated from. This is primarily useful for\n        implementation of generator tools that convert configuration\n        from an external configuration file format into native unit\n        files. This functionality should not be used in normal\n        units.</p>",
                "ConditionArchitecture": "<p>Check whether the system is running on a specific architecture. Takes one of\n          \"<code class=\"literal\">x86</code>\",\n          \"<code class=\"literal\">x86-64</code>\",\n          \"<code class=\"literal\">ppc</code>\",\n          \"<code class=\"literal\">ppc-le</code>\",\n          \"<code class=\"literal\">ppc64</code>\",\n          \"<code class=\"literal\">ppc64-le</code>\",\n          \"<code class=\"literal\">ia64</code>\",\n          \"<code class=\"literal\">parisc</code>\",\n          \"<code class=\"literal\">parisc64</code>\",\n          \"<code class=\"literal\">s390</code>\",\n          \"<code class=\"literal\">s390x</code>\",\n          \"<code class=\"literal\">sparc</code>\",\n          \"<code class=\"literal\">sparc64</code>\",\n          \"<code class=\"literal\">mips</code>\",\n          \"<code class=\"literal\">mips-le</code>\",\n          \"<code class=\"literal\">mips64</code>\",\n          \"<code class=\"literal\">mips64-le</code>\",\n          \"<code class=\"literal\">alpha</code>\",\n          \"<code class=\"literal\">arm</code>\",\n          \"<code class=\"literal\">arm-be</code>\",\n          \"<code class=\"literal\">arm64</code>\",\n          \"<code class=\"literal\">arm64-be</code>\",\n          \"<code class=\"literal\">sh</code>\",\n          \"<code class=\"literal\">sh64</code>\",\n          \"<code class=\"literal\">m68k</code>\",\n          \"<code class=\"literal\">tilegx</code>\",\n          \"<code class=\"literal\">cris</code>\",\n          \"<code class=\"literal\">arc</code>\",\n          \"<code class=\"literal\">arc-be</code>\", or\n          \"<code class=\"literal\">native</code>\".</p><p>The architecture is determined from the information returned by\n          <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/uname.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">uname</span>(2)</span></a>\n          and is thus subject to\n          <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/personality.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">personality</span>(2)</span></a>.\n          Note that a <code class=\"varname\">Personality=</code> setting in the same unit file has no effect on this\n          condition. A special architecture name \"<code class=\"literal\">native</code>\" is mapped to the architecture the\n          system manager itself is compiled for. The test may be negated by prepending an exclamation\n          mark.</p>",
                "ConditionVirtualization": "<p>Check whether the system is executed in a virtualized environment and optionally\n          test whether it is a specific implementation. Takes either boolean value to check if being executed\n          in any virtualized environment, or one of\n          \"<code class=\"literal\">vm</code>\" and\n          \"<code class=\"literal\">container</code>\" to test against a generic type of virtualization solution, or one of\n          \"<code class=\"literal\">qemu</code>\",\n          \"<code class=\"literal\">kvm</code>\",\n          \"<code class=\"literal\">zvm</code>\",\n          \"<code class=\"literal\">vmware</code>\",\n          \"<code class=\"literal\">microsoft</code>\",\n          \"<code class=\"literal\">oracle</code>\",\n          \"<code class=\"literal\">xen</code>\",\n          \"<code class=\"literal\">bochs</code>\",\n          \"<code class=\"literal\">uml</code>\",\n          \"<code class=\"literal\">bhyve</code>\",\n          \"<code class=\"literal\">qnx</code>\",\n          \"<code class=\"literal\">openvz</code>\",\n          \"<code class=\"literal\">lxc</code>\",\n          \"<code class=\"literal\">lxc-libvirt</code>\",\n          \"<code class=\"literal\">systemd-nspawn</code>\",\n          \"<code class=\"literal\">docker</code>\",\n          \"<code class=\"literal\">podman</code>\",\n          \"<code class=\"literal\">rkt</code>\",\n          \"<code class=\"literal\">wsl</code>\",\n          \"<code class=\"literal\">proot</code>\",\n          \"<code class=\"literal\">acrn</code>\" to test\n          against a specific implementation, or\n          \"<code class=\"literal\">private-users</code>\" to check whether we are running in a user namespace. See\n          <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-detect-virt</span>(1)</span></a>\n          for a full list of known virtualization technologies and their identifiers. If multiple\n          virtualization technologies are nested, only the innermost is considered. The test may be negated\n          by prepending an exclamation mark.</p>",
                "ConditionHost": "<p><code class=\"varname\">ConditionHost=</code> may be used to match against the hostname or\n          machine ID of the host. This either takes a hostname string (optionally with shell style globs)\n          which is tested against the locally set hostname as returned by\n          <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/gethostname.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">gethostname</span>(2)</span></a>, or\n          a machine ID formatted as string (see\n          <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/machine-id.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">machine-id</span>(5)</span></a>).\n          The test may be negated by prepending an exclamation mark.</p>",
                "ConditionKernelCommandLine": "<p><code class=\"varname\">ConditionKernelCommandLine=</code> may be used to check whether a\n          specific kernel command line option is set (or if prefixed with the exclamation mark — unset). The\n          argument must either be a single word, or an assignment (i.e. two words, separated by\n          \"<code class=\"literal\">=</code>\"). In the former case the kernel command line is searched for the word\n          appearing as is, or as left hand side of an assignment. In the latter case, the exact assignment is\n          looked for with right and left hand side matching.</p>",
                "ConditionKernelVersion": "<p><code class=\"varname\">ConditionKernelVersion=</code> may be used to check whether the kernel\n          version (as reported by <span class=\"command\"><strong>uname -r</strong></span>) matches a certain expression (or if prefixed\n          with the exclamation mark does not match it). The argument must be a list of (potentially quoted)\n          expressions.  For each of the expressions, if it starts with one of \"<code class=\"literal\">&lt;</code>\",\n          \"<code class=\"literal\">&lt;=</code>\", \"<code class=\"literal\">=</code>\", \"<code class=\"literal\">!=</code>\", \"<code class=\"literal\">&gt;=</code>\",\n          \"<code class=\"literal\">&gt;</code>\" a relative version comparison is done, otherwise the specified string is\n          matched with shell-style globs.</p><p>Note that using the kernel version string is an unreliable way to determine which features\n          are supported by a kernel, because of the widespread practice of backporting drivers, features, and\n          fixes from newer upstream kernels into older versions provided by distributions. Hence, this check\n          is inherently unportable and should not be used for units which may be used on different\n          distributions.</p>",
                "ConditionEnvironment": "<p><code class=\"varname\">ConditionEnvironment=</code> may be used to check whether a specific\n          environment variable is set (or if prefixed with the exclamation mark — unset) in the service\n          manager's environment block.\n\n          The argument may be a single word, to check if the variable with this name is defined in the\n          environment block, or an assignment\n          (\"<code class=\"literal\"><em class=\"replaceable\"><code>name</code></em>=<em class=\"replaceable\"><code>value</code></em></code>\"), to check if\n          the variable with this exact value is defined. Note that the environment block of the service\n          manager itself is checked, i.e. not any variables defined with <code class=\"varname\">Environment=</code> or\n          <code class=\"varname\">EnvironmentFile=</code>, as described above. This is particularly useful when the\n          service manager runs inside a containerized environment or as per-user service manager, in order to\n          check for variables passed in by the enclosing container manager or PAM.</p>",
                "ConditionSecurity": "<p><code class=\"varname\">ConditionSecurity=</code> may be used to check whether the given\n          security technology is enabled on the system. Currently, the recognized values are\n          \"<code class=\"literal\">selinux</code>\", \"<code class=\"literal\">apparmor</code>\", \"<code class=\"literal\">tomoyo</code>\",\n          \"<code class=\"literal\">ima</code>\", \"<code class=\"literal\">smack</code>\", \"<code class=\"literal\">audit</code>\" and\n          \"<code class=\"literal\">uefi-secureboot</code>\". The test may be negated by prepending an exclamation\n          mark.</p>",
                "ConditionCapability": "<p>Check whether the given capability exists in the capability bounding set of the\n          service manager (i.e. this does not check whether capability is actually available in the permitted\n          or effective sets, see\n          <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">capabilities</span>(7)</span></a>\n          for details). Pass a capability name such as \"<code class=\"literal\">CAP_MKNOD</code>\", possibly prefixed with\n          an exclamation mark to negate the check.</p>",
                "ConditionACPower": "<p>Check whether the system has AC power, or is exclusively battery powered at the\n          time of activation of the unit. This takes a boolean argument. If set to \"<code class=\"literal\">true</code>\",\n          the condition will hold only if at least one AC connector of the system is connected to a power\n          source, or if no AC connectors are known. Conversely, if set to \"<code class=\"literal\">false</code>\", the\n          condition will hold only if there is at least one AC connector known and all AC connectors are\n          disconnected from a power source.</p>",
                "ConditionNeedsUpdate": "<p>Takes one of <code class=\"filename\">/var</code> or <code class=\"filename\">/etc</code> as argument,\n          possibly prefixed with a \"<code class=\"literal\">!</code>\" (to invert the condition). This condition may be\n          used to conditionalize units on whether the specified directory requires an update because\n          <code class=\"filename\">/usr</code>'s modification time is newer than the stamp file\n          <code class=\"filename\">.updated</code> in the specified directory. This is useful to implement offline\n          updates of the vendor operating system resources in <code class=\"filename\">/usr</code> that require updating\n          of <code class=\"filename\">/etc</code> or <code class=\"filename\">/var</code> on the next following boot. Units making\n          use of this condition should order themselves before\n          <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-update-done.service.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-update-done.service</span>(8)</span></a>,\n          to make sure they run before the stamp file's modification time gets reset indicating a completed\n          update.</p><p>If the <code class=\"varname\">systemd.condition-needs-update=</code> option is specified on the kernel\n          command line (taking a boolean), it will override the result of this condition check, taking\n          precedence over any file modification time checks. If it is used\n          <code class=\"filename\">systemd-update-done.service</code> will not have immediate effect on any following\n          <code class=\"varname\">ConditionNeedsUpdate=</code> checks, until the system is rebooted where the kernel\n          command line option is not specified anymore.</p>",
                "ConditionFirstBoot": "<p>Takes a boolean argument. This condition may be used to conditionalize units on\n          whether the system is booting up with an unpopulated <code class=\"filename\">/etc</code> directory\n          (specifically: an <code class=\"filename\">/etc</code> with no <code class=\"filename\">/etc/machine-id</code>). This may\n          be used to populate <code class=\"filename\">/etc</code> on the first boot after factory reset, or when a new\n          system instance boots up for the first time.</p><p>If the <code class=\"varname\">systemd.condition-first-boot=</code> option is specified on the kernel\n          command line (taking a boolean), it will override the result of this condition check, taking\n          precedence over <code class=\"filename\">/etc/machine-id</code> existence checks.</p>",
                "ConditionPathExists": "<p>Check for the exists of a file. If the specified absolute path name does not exist,\n          the condition will fail. If the absolute path name passed to\n          <code class=\"varname\">ConditionPathExists=</code> is prefixed with an exclamation mark\n          (\"<code class=\"literal\">!</code>\"), the test is negated, and the unit is only started if the path does not\n          exist.</p>",
                "ConditionPathExistsGlob": "<p><code class=\"varname\">ConditionPathExistsGlob=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code>, but checks for the existence of at least one file or\n          directory matching the specified globbing pattern.</p>",
                "ConditionPathIsDirectory": "<p><code class=\"varname\">ConditionPathIsDirectory=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that a certain path exists and is a\n          directory.</p>",
                "ConditionPathIsSymbolicLink": "<p><code class=\"varname\">ConditionPathIsSymbolicLink=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that a certain path exists and is a symbolic\n          link.</p>",
                "ConditionPathIsMountPoint": "<p><code class=\"varname\">ConditionPathIsMountPoint=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that a certain path exists and is a mount\n          point.</p>",
                "ConditionPathIsReadWrite": "<p><code class=\"varname\">ConditionPathIsReadWrite=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that the underlying file system is readable\n          and writable (i.e. not mounted read-only).</p>",
                "ConditionPathIsEncrypted": "<p><code class=\"varname\">ConditionPathIsEncrypted=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that the underlying file system's backing\n          block device is encrypted using dm-crypt/LUKS. Note that this check does not cover ext4\n          per-directory encryption, and only detects block level encryption. Moreover, if the specified path\n          resides on a file system on top of a loopback block device, only encryption above the loopback device is\n          detected. It is not detected whether the file system backing the loopback block device is encrypted.</p>",
                "ConditionDirectoryNotEmpty": "<p><code class=\"varname\">ConditionDirectoryNotEmpty=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that a certain path exists and is a non-empty\n          directory.</p>",
                "ConditionFileNotEmpty": "<p><code class=\"varname\">ConditionFileNotEmpty=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that a certain path exists and refers to a\n          regular file with a non-zero size.</p>",
                "ConditionFileIsExecutable": "<p><code class=\"varname\">ConditionFileIsExecutable=</code> is similar to\n          <code class=\"varname\">ConditionPathExists=</code> but verifies that a certain path exists, is a regular file,\n          and marked executable.</p>",
                "ConditionUser": "<p><code class=\"varname\">ConditionUser=</code> takes a numeric \"<code class=\"literal\">UID</code>\", a UNIX\n          user name, or the special value \"<code class=\"literal\">@system</code>\". This condition may be used to check\n          whether the service manager is running as the given user. The special value\n          \"<code class=\"literal\">@system</code>\" can be used to check if the user id is within the system user\n          range. This option is not useful for system services, as the system manager exclusively runs as the\n          root user, and thus the test result is constant.</p>",
                "ConditionGroup": "<p><code class=\"varname\">ConditionGroup=</code> is similar to <code class=\"varname\">ConditionUser=</code>\n          but verifies that the service manager's real or effective group, or any of its auxiliary groups,\n          match the specified group or GID. This setting does not support the special value\n          \"<code class=\"literal\">@system</code>\".</p>",
                "ConditionControlGroupController": "<p>Verify that the given cgroup controller (eg. \"<code class=\"literal\">cpu</code>\") is available\n          for use on the system. For example, a particular controller may not be available if it was disabled\n          on the kernel command line with <code class=\"varname\">cgroup_disable=controller</code>. Multiple controllers\n          may be passed with a space separating them; in this case the condition will only pass if all listed\n          controllers are available for use. Controllers unknown to systemd are ignored. Valid controllers\n          are \"<code class=\"literal\">cpu</code>\", \"<code class=\"literal\">cpuacct</code>\", \"<code class=\"literal\">io</code>\",\n          \"<code class=\"literal\">blkio</code>\", \"<code class=\"literal\">memory</code>\", \"<code class=\"literal\">devices</code>\", and\n          \"<code class=\"literal\">pids</code>\".</p>",
                "ConditionMemory": "<p>Verify that the specified amount of system memory is available to the current\n          system. Takes a memory size in bytes as argument, optionally prefixed with a comparison operator\n          \"<code class=\"literal\">&lt;</code>\", \"<code class=\"literal\">&lt;=</code>\", \"<code class=\"literal\">=</code>\", \"<code class=\"literal\">!=</code>\",\n          \"<code class=\"literal\">&gt;=</code>\", \"<code class=\"literal\">&gt;</code>\". On bare-metal systems compares the amount of\n          physical memory in the system with the specified size, adhering to the specified comparison\n          operator. In containers compares the amount of memory assigned to the container instead.</p>",
                "ConditionCPUs": "<p>Verify that the specified number of CPUs is available to the current system. Takes\n          a number of CPUs as argument, optionally prefixed with a comparison operator\n          \"<code class=\"literal\">&lt;</code>\", \"<code class=\"literal\">&lt;=</code>\", \"<code class=\"literal\">=</code>\", \"<code class=\"literal\">!=</code>\",\n          \"<code class=\"literal\">&gt;=</code>\", \"<code class=\"literal\">&gt;</code>\". Compares the number of CPUs in the CPU affinity\n          mask configured of the service manager itself with the specified number, adhering to the specified\n          comparison operator. On physical systems the number of CPUs in the affinity mask of the service\n          manager usually matches the number of physical CPUs, but in special and virtual environments might\n          differ. In particular, in containers the affinity mask usually matches the number of CPUs assigned\n          to the container and not the physically available ones.</p>",
                "AssertArchitecture": "<p>Similar to the <code class=\"varname\">ConditionArchitecture=</code>,\n          <code class=\"varname\">ConditionVirtualization=</code>, …, condition settings described above, these settings\n          add assertion checks to the start-up of the unit. However, unlike the conditions settings, any\n          assertion setting that is not met results in failure of the start job (which means this is logged\n          loudly). Note that hitting a configured assertion does not cause the unit to enter the\n          \"<code class=\"literal\">failed</code>\" state (or in fact result in any state change of the unit), it affects\n          only the job queued for it. Use assertion expressions for units that cannot operate when specific\n          requirements are not met, and when this is something the administrator or user should look\n          into.</p>",
            },
            service: {
                "Type": "<p>设置进程的启动类型。必须设为 <code class=\"option\">simple</code>, <code class=\"option\">exec</code>, <code class=\"option\">forking</code>, <code class=\"option\">oneshot</code>, <code class=\"option\">dbus</code>, <code class=\"option\">notify</code>, <code class=\"option\">idle</code> 之一：</p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>如果设为 <code class=\"option\">simple</code> (当设置了 <code class=\"varname\">ExecStart=</code> 、 但是没有设置 <code class=\"varname\">Type=</code> 与 <code class=\"varname\">BusName=</code> 时，这是默认值)， 那么 <code class=\"varname\">ExecStart=</code> 进程就是该服务的主进程， 并且 systemd 会认为在创建了该服务的主服务进程之后，该服务就已经启动完成。 如果此进程需要为系统中的其他进程提供服务， 那么必须在该服务启动之前先建立好通信渠道(例如套接字)， 这样，在创建主服务进程之后、执行主服务进程之前，即可启动后继单元， 从而加快了后继单元的启动速度。 这就意味着对于 <code class=\"option\">simple</code> 类型的服务来说， 即使不能成功调用主服务进程(例如 <code class=\"varname\">User=</code> 不存在、或者二进制可执行文件不存在)， <span class=\"command\"><strong>systemctl start</strong></span> 也仍然会执行成功。</p></li><li class=\"listitem\"><p> <code class=\"option\">exec</code> 与 <code class=\"option\">simple</code> 类似，不同之处在于， 只有在该服务的主服务进程执行完成之后，systemd 才会认为该服务启动完成。 其他后继单元必须一直阻塞到这个时间点之后才能继续启动。换句话说， <code class=\"option\">simple</code> 表示当 <code class=\"function\">fork()</code> 函数返回时，即算是启动完成，而 <code class=\"option\">exec</code> 则表示仅在 <code class=\"function\">fork()</code> 与 <code class=\"function\">execve()</code> 函数都执行成功时，才算是启动完成。 这就意味着对于 <code class=\"option\">exec</code> 类型的服务来说， 如果不能成功调用主服务进程(例如 <code class=\"varname\">User=</code> 不存在、或者二进制可执行文件不存在)， 那么 <span class=\"command\"><strong>systemctl start</strong></span> 将会执行失败。</p></li><li class=\"listitem\"><p>如果设为 <code class=\"option\">forking</code> ，那么表示 <code class=\"varname\">ExecStart=</code> 进程将会在启动过程中使用 <code class=\"function\">fork()</code> 系统调用。 也就是当所有通信渠道都已建好、启动亦已成功之后，父进程将会退出，而子进程将作为主服务进程继续运行。 这是传统UNIX守护进程的经典做法。 在这种情况下，systemd 会认为在父进程退出之后，该服务就已经启动完成。 如果使用了此种类型，那么建议同时设置 <code class=\"varname\">PIDFile=</code> 选项，以帮助 systemd 准确可靠的定位该服务的主进程。 systemd 将会在父进程退出之后 立即开始启动后继单元。</p></li><li class=\"listitem\"><p> <code class=\"option\">oneshot</code> 与 <code class=\"option\">simple</code> 类似，不同之处在于， 只有在该服务的主服务进程退出之后，systemd 才会认为该服务启动完成，才会开始启动后继单元。 此种类型的服务通常需要设置 <code class=\"varname\">RemainAfterExit=</code> 选项。 当 <code class=\"varname\">Type=</code> 与 <code class=\"varname\">ExecStart=</code> 都没有设置时， <code class=\"varname\">Type=</code><code class=\"option\">oneshot</code> 就是默认值。</p></li><li class=\"listitem\"><p> <code class=\"option\">dbus</code> 与 <code class=\"option\">simple</code> 类似，不同之处在于， 该服务只有获得了 <code class=\"varname\">BusName=</code> 指定的 D-Bus 名称之后，systemd 才会认为该服务启动完成，才会开始启动后继单元。 设为此类型相当于隐含的依赖于 <code class=\"filename\">dbus.socket</code> 单元。 当设置了 <code class=\"varname\">BusName=</code> 时， 此类型就是默认值。</p></li><li class=\"listitem\"><p> <code class=\"option\">notify</code> 与 <code class=\"option\">exec</code> 类似，不同之处在于， 该服务将会在启动完成之后通过 <a href=\"sd_notify.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_notify</span>(3)</span></a> 之类的接口发送一个通知消息。systemd 将会在启动后继单元之前， 首先确保该进程已经成功的发送了这个消息。如果设为此类型，那么下文的 <code class=\"varname\">NotifyAccess=</code> 将只能设为非 <code class=\"option\">none</code> 值。如果未设置 <code class=\"varname\">NotifyAccess=</code> 选项、或者已经被明确设为 <code class=\"option\">none</code> ，那么将会被自动强制修改为 <code class=\"option\">main</code> 。注意，目前 <code class=\"varname\">Type=</code><code class=\"option\">notify</code> 尚不能与 <code class=\"varname\">PrivateNetwork=</code><code class=\"option\">yes</code> 一起使用。</p></li><li class=\"listitem\"><p> <code class=\"option\">idle</code> 与 <code class=\"option\">simple</code> 类似，不同之处在于， 服务进程将会被延迟到所有活动任务都完成之后再执行。 这样可以避免控制台上的状态信息与shell脚本的输出混杂在一起。 注意：(1)仅可用于改善控制台输出，切勿将其用于不同单元之间的排序工具； (2)延迟最多不超过5秒， 超时后将无条件的启动服务进程。</p></li></ul></div><p>建议对长时间持续运行的服务尽可能使用 <code class=\"varname\">Type=</code><code class=\"option\">simple</code> (这是最简单和速度最快的选择)。 注意，因为 <code class=\"option\">simple</code> 类型的服务 无法报告启动失败、也无法在服务完成初始化后对其他单元进行排序， 所以，当客户端需要通过仅由该服务本身创建的IPC通道(而非由 systemd 创建的套接字或 D-bus 之类)连接到该服务的时候， <code class=\"option\">simple</code> 类型并不是最佳选择。在这种情况下， <code class=\"option\">notify</code> 或 <code class=\"option\">dbus</code>(该服务必须提供 D-Bus 接口) 才是最佳选择， 因为这两种类型都允许服务进程精确的安排 何时算是服务启动成功、何时可以继续启动后继单元。 <code class=\"option\">notify</code> 类型需要服务进程明确使用 <code class=\"function\">sd_notify()</code> 函数或类似的API， 否则，可以使用 <code class=\"option\">forking</code> 作为替代(它支持传统的UNIX服务启动协议)。 最后，如果能够确保服务进程调用成功、服务进程自身不做或只做很少的初始化工作(且不大可能初始化失败)， 那么 <code class=\"option\">exec</code> 将是最佳选择。 注意，因为使用任何 <code class=\"option\">simple</code> 之外的类型都需要等待服务完成初始化，所以可能会减慢系统启动速度。 因此，应该尽可能避免使用 <code class=\"option\">simple</code> 之外的类型(除非必须)。另外，也不建议对长时间持续运行的服务使用 <code class=\"option\">idle</code> 或 <code class=\"option\">oneshot</code> 类型。</p>",
                "RemainAfterExit": "<p>Takes a boolean value that specifies whether\n        the service shall be considered active even when all its\n        processes exited. Defaults to <code class=\"option\">no</code>.</p>",
                "GuessMainPID": "<p>Takes a boolean value that specifies whether\n        systemd should try to guess the main PID of a service if it\n        cannot be determined reliably. This option is ignored unless\n        <code class=\"option\">Type=forking</code> is set and\n        <code class=\"option\">PIDFile=</code> is unset because for the other types\n        or with an explicitly configured PID file, the main PID is\n        always known. The guessing algorithm might come to incorrect\n        conclusions if a daemon consists of more than one process. If\n        the main PID cannot be determined, failure detection and\n        automatic restarting of a service will not work reliably.\n        Defaults to <code class=\"option\">yes</code>.</p>",
                "PIDFile": "<dd><p>该服务PID文件的路径(一般位于 <code class=\"filename\">/run/</code> 目录下)。 强烈建议在 <code class=\"varname\">Type=</code><code class=\"option\">forking</code> 的情况下明确设置此选项。 如果设为相对路径，那么表示相对于 <code class=\"filename\">/run/</code> 目录。 systemd 将会在此服务启动完成之后，从此文件中读取主服务进程的PID 。 systemd 不会写入此文件，但会在此服务停止后删除它(若仍然存在)。 PID文件的拥有者不必是特权用户， 但是如果拥有者是非特权用户，那么必须施加如下安全限制： (1)不能是一个指向其他拥有者文件的软连接(无论直接还是间接)； (2)其中的PID必须指向一个属于该服务的进程。</p></dd>",
                "BusName": "<p>Takes a D-Bus bus name that this service is\n        reachable as. This option is mandatory for services where\n        <code class=\"varname\">Type=</code> is set to\n        <code class=\"option\">dbus</code>.</p>",
                "ExecStart": "<p>在启动该服务时需要执行的 命令行(命令+参数)。 有关命令行的更多细节， 可参见后文的\"命令行\"小节。 </p><p>除非 <code class=\"varname\">Type=oneshot</code> ，否则必须且只能设置一个命令行。 仅在 <code class=\"varname\">Type=oneshot</code> 的情况下，才可以设置任意个命令行(包括零个)， 多个命令行既可以在同一个 <code class=\"varname\">ExecStart=</code> 中设置，也可以通过设置多个 <code class=\"varname\">ExecStart=</code> 来达到相同的效果。 如果设为一个空字符串，那么先前设置的所有命令行都将被清空。 如果不设置任何 <code class=\"varname\">ExecStart=</code> 指令， 那么必须确保设置了 <code class=\"varname\">RemainAfterExit=yes</code> 指令，并且至少设置一个 <code class=\"varname\">ExecStop=</code> 指令。 同时缺少 <code class=\"varname\">ExecStart=</code> 与 <code class=\"varname\">ExecStop=</code> 的服务单元是非法的(也就是必须至少明确设置其中之一)。</p><p>命令行必须以一个可执行文件(要么是绝对路径、要么是不含任何斜线的文件名)开始， 并且其后的那些参数将依次作为\"argv[1] argv[2] …\"传递给被执行的进程。 可选的，可以在绝对路径前面加上各种不同的前缀表示不同的含义：</p><div class=\"table\"><a name=\"id-1.8.3.6.2.4\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;可执行文件前的特殊前缀</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"可执行文件前的特殊前缀\" border=\"1\"><colgroup><col class=\"prefix\"><col class=\"meaning\"></colgroup><thead><tr><th>前缀</th><th>效果</th></tr></thead><tbody><tr><td>\"<code class=\"literal\">@</code>\"</td><td>如果在绝对路径前加上可选的 \"<code class=\"literal\">@</code>\" 前缀，那么其后的那些参数将依次作为\"argv[0] argv[1] argv[2] …\"传递给被执行的进程(注意，argv[0] 是可执行文件本身)。</td></tr><tr><td>\"<code class=\"literal\">-</code>\"</td><td>如果在绝对路径前加上可选的 \"<code class=\"literal\">-</code>\" 前缀，那么即使该进程以失败状态(例如非零的返回值或者出现异常)退出，也会被视为成功退出，但同时会留下错误日志。</td></tr><tr><td>\"<code class=\"literal\">+</code>\"</td><td>如果在绝对路径前加上可选的 \"<code class=\"literal\">+</code>\" 前缀，那么进程将拥有完全的权限(超级用户的特权)，并且 <code class=\"varname\">User=</code>, <code class=\"varname\">Group=</code>, <code class=\"varname\">CapabilityBoundingSet=</code> 选项所设置的权限限制以及 <code class=\"varname\">PrivateDevices=</code>, <code class=\"varname\">PrivateTmp=</code> 等文件系统名字空间的配置将被该命令行启动的进程忽略(但仍然对其他 <code class=\"varname\">ExecStart=</code>, <code class=\"varname\">ExecStop=</code> 有效)。</td></tr><tr><td>\"<code class=\"literal\">!</code>\"</td><td>与 \"<code class=\"literal\">+</code>\" 类似(进程仍然拥有超级用户的身份)，不同之处在于仅忽略 <code class=\"varname\">User=</code>, <code class=\"varname\">Group=</code>, <code class=\"varname\">SupplementaryGroups=</code> 选项的设置，而例如名字空间之类的其他限制依然有效。注意，当与 <code class=\"varname\">DynamicUser=</code> 一起使用时，将会在执行该命令之前先动态分配一对 user/group ，然后将身份凭证的切换操作留给进程自己去执行。</td></tr><tr><td>\"<code class=\"literal\">!!</code>\"</td><td>与 \"<code class=\"literal\">!</code>\" 极其相似，仅用于让利用 ambient capability 限制进程权限的单元兼容不支持 ambient capability 的系统(也就是不支持 <code class=\"varname\">AmbientCapabilities=</code> 选项)。如果在不支持 ambient capability 的系统上使用此前缀，那么 <code class=\"varname\">SystemCallFilter=</code> 与 <code class=\"varname\">CapabilityBoundingSet=</code> 将被隐含的自动修改为允许进程自己丢弃 capability 与特权用户的身份(即使原来被配置为禁止这么做)，并且 <code class=\"varname\">AmbientCapabilities=</code> 选项将会被忽略。此前缀在支持 ambient capability 的系统上完全没有任何效果。</td></tr></tbody></table></div></div><br class=\"table-break\"><p>\"<code class=\"literal\">@</code>\", \"<code class=\"literal\">-</code>\" 以及 \"<code class=\"literal\">+</code>\"/\"<code class=\"literal\">!</code>\"/\"<code class=\"literal\">!!</code>\" 之一，可以按任意顺序同时混合使用。 注意，对于 \"<code class=\"literal\">+</code>\", \"<code class=\"literal\">!</code>\", \"<code class=\"literal\">!!</code>\" 前缀来说，仅能单独使用三者之一，不可混合使用多个。 注意，这些前缀同样也可以用于 <code class=\"varname\">ExecStartPre=</code>, <code class=\"varname\">ExecStartPost=</code>, <code class=\"varname\">ExecReload=</code>, <code class=\"varname\">ExecStop=</code>, <code class=\"varname\">ExecStopPost=</code> 这些接受命令行的选项。</p><p>如果设置了多个命令行， 那么这些命令行将以其在单元文件中出现的顺序依次执行。 如果某个无 \"<code class=\"literal\">-</code>\" 前缀的命令行执行失败， 那么剩余的命令行将不会被继续执行， 同时该单元将变为失败(failed)状态。</p><p>当未设置 <code class=\"varname\">Type=forking</code> 时， 这里设置的命令行所启动的进程 将被视为该服务的主守护进程。</p>",
                "ExecStartPre": "<p>设置在执行 <code class=\"varname\">ExecStart=</code> 之前/后执行的命令行。 语法规则与 <code class=\"varname\">ExecStart=</code> 完全相同。 如果设置了多个命令行， 那么这些命令行将以其在单元文件中出现的顺序 依次执行。</p><p>如果某个无 \"<code class=\"literal\">-</code>\" 前缀的命令行执行失败， 那么剩余的命令行将不会被继续执行， 同时该单元将变为失败(failed)状态。</p><p>仅在所有无 \"<code class=\"literal\">-</code>\" 前缀的 <code class=\"varname\">ExecStartPre=</code> 命令全部执行成功的前提下， 才会继续执行 <code class=\"varname\">ExecStart=</code> 命令。</p><p><code class=\"varname\">ExecStartPost=</code> 命令仅在 <code class=\"varname\">ExecStart=</code> 中的命令已经全部执行成功之后才会运行， 判断的标准基于 <code class=\"varname\">Type=</code> 选项。 具体说来，对于 <code class=\"varname\">Type=simple</code> 或 <code class=\"varname\">Type=idle</code> 就是主进程已经成功启动； 对于 <code class=\"varname\">Type=oneshot</code> 来说就是最后一个 <code class=\"varname\">ExecStart=</code> 进程已经成功退出； 对于 <code class=\"varname\">Type=forking</code> 来说就是初始进程已经成功退出； 对于 <code class=\"varname\">Type=notify</code> 来说就是已经发送了 \"<code class=\"literal\">READY=1</code>\" ； 对于 <code class=\"varname\">Type=dbus</code> 来说就是已经取得了 <code class=\"varname\">BusName=</code> 中设置的总线名称。</p><p>注意，不可将 <code class=\"varname\">ExecStartPre=</code> 用于 需要长时间执行的进程。 因为所有由 <code class=\"varname\">ExecStartPre=</code> 派生的子进程 都会在启动 <code class=\"varname\">ExecStart=</code> 服务进程之前被杀死。</p><p>注意，如果在服务启动完成之前，任意一个 <code class=\"varname\">ExecStartPre=</code>, <code class=\"varname\">ExecStart=</code>, <code class=\"varname\">ExecStartPost=</code> 中无 \"<code class=\"literal\">-</code>\" 前缀的命令执行失败或超时， 那么，<code class=\"varname\">ExecStopPost=</code> 将会被继续执行，而 <code class=\"varname\">ExecStop=</code> 则会被跳过。</p>",
                "ExecStartPost": "<p>设置在执行 <code class=\"varname\">ExecStart=</code> 之前/后执行的命令行。 语法规则与 <code class=\"varname\">ExecStart=</code> 完全相同。 如果设置了多个命令行， 那么这些命令行将以其在单元文件中出现的顺序 依次执行。</p><p>如果某个无 \"<code class=\"literal\">-</code>\" 前缀的命令行执行失败， 那么剩余的命令行将不会被继续执行， 同时该单元将变为失败(failed)状态。</p><p>仅在所有无 \"<code class=\"literal\">-</code>\" 前缀的 <code class=\"varname\">ExecStartPre=</code> 命令全部执行成功的前提下， 才会继续执行 <code class=\"varname\">ExecStart=</code> 命令。</p><p><code class=\"varname\">ExecStartPost=</code> 命令仅在 <code class=\"varname\">ExecStart=</code> 中的命令已经全部执行成功之后才会运行， 判断的标准基于 <code class=\"varname\">Type=</code> 选项。 具体说来，对于 <code class=\"varname\">Type=simple</code> 或 <code class=\"varname\">Type=idle</code> 就是主进程已经成功启动； 对于 <code class=\"varname\">Type=oneshot</code> 来说就是最后一个 <code class=\"varname\">ExecStart=</code> 进程已经成功退出； 对于 <code class=\"varname\">Type=forking</code> 来说就是初始进程已经成功退出； 对于 <code class=\"varname\">Type=notify</code> 来说就是已经发送了 \"<code class=\"literal\">READY=1</code>\" ； 对于 <code class=\"varname\">Type=dbus</code> 来说就是已经取得了 <code class=\"varname\">BusName=</code> 中设置的总线名称。</p><p>注意，不可将 <code class=\"varname\">ExecStartPre=</code> 用于 需要长时间执行的进程。 因为所有由 <code class=\"varname\">ExecStartPre=</code> 派生的子进程 都会在启动 <code class=\"varname\">ExecStart=</code> 服务进程之前被杀死。</p><p>注意，如果在服务启动完成之前，任意一个 <code class=\"varname\">ExecStartPre=</code>, <code class=\"varname\">ExecStart=</code>, <code class=\"varname\">ExecStartPost=</code> 中无 \"<code class=\"literal\">-</code>\" 前缀的命令执行失败或超时， 那么，<code class=\"varname\">ExecStopPost=</code> 将会被继续执行，而 <code class=\"varname\">ExecStop=</code> 则会被跳过。</p>",
                "ExecCondition": "<p>Optional commands that are executed before the command(s) in <code class=\"varname\">ExecStartPre=</code>.\n        Syntax is the same as for <code class=\"varname\">ExecStart=</code>, except that multiple command lines are allowed and the\n        commands are executed one after the other, serially.</p><p>The behavior is like an <code class=\"varname\">ExecStartPre=</code> and condition check hybrid: when an\n        <code class=\"varname\">ExecCondition=</code> command exits with exit code 1 through 254 (inclusive), the remaining\n        commands are skipped and the unit is <span class=\"emphasis\"><em>not</em></span> marked as failed. However, if an\n        <code class=\"varname\">ExecCondition=</code> command exits with 255 or abnormally (e.g. timeout, killed by a\n        signal, etc.), the unit will be considered failed (and remaining commands will be skipped). Exit code of 0 or\n        those matching <code class=\"varname\">SuccessExitStatus=</code> will continue execution to the next command(s).</p><p>The same recommendations about not running long-running processes in <code class=\"varname\">ExecStartPre=</code>\n        also applies to <code class=\"varname\">ExecCondition=</code>. <code class=\"varname\">ExecCondition=</code> will also run the commands\n        in <code class=\"varname\">ExecStopPost=</code>, as part of stopping the service, in the case of any non-zero or abnormal\n        exits, like the ones described above.</p>",
                "ExecReload": "<p>这是一个可选的指令， 用于设置当该服务 被要求重新载入配置时 所执行的命令行。 语法规则与 <code class=\"varname\">ExecStart=</code> 完全相同。</p><p>另外，还有一个特殊的环境变量 <code class=\"varname\">$MAINPID</code> 可用于表示主进程的PID， 例如可以这样使用：</p><pre class=\"programlisting\">/bin/kill -HUP $MAINPID</pre><p>注意，像上例那样，通过向守护进程发送复位信号， 强制其重新加载配置文件，并不是一个好习惯。 因为这是一个异步操作， 所以不适用于需要按照特定顺序重新加载配置文件的服务。 我们强烈建议将 <code class=\"varname\">ExecReload=</code> 设为一个 能够确保重新加载配置文件的操作同步完成的命令行。</p>",
                "ExecStop": "<p>这是一个可选的指令，    用于设置当该服务被要求停止时所执行的命令行。    语法规则与    <code class=\"varname\">ExecStart=</code>    完全相同。    执行完此处设置的所有命令行之后，该服务将被视为已经停止，    此时，该服务所有剩余的进程将会根据 <code class=\"varname\">KillMode=</code> 的设置被杀死(参见    <a href=\"systemd.kill.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.kill</span>(5)</span></a>)。    如果未设置此选项，那么当此服务被停止时，    该服务的所有进程都将会根据 <code class=\"varname\">KillSignal=</code>    的设置被立即全部杀死。    与 <code class=\"varname\">ExecReload=</code> 一样，    也有一个特殊的环境变量    <code class=\"varname\">$MAINPID</code> 可用于表示主进程的PID 。</p><p>一般来说，不应该仅仅设置一个结束服务的命令而不等待其完成。    因为当此处设置的命令执行完之后，    剩余的进程会被按照 <code class=\"varname\">KillMode=</code> 与 <code class=\"varname\">KillSignal=</code> 的设置立即杀死，    这可能会导致数据丢失。    因此，这里设置的命令必须是同步操作，而不能是异步操作。</p><p>注意，仅在服务确实启动成功的前提下，才会执行 <code class=\"varname\">ExecStop=</code> 中设置的命令。    如果服务从未启动或启动失败(例如，任意一个    <code class=\"varname\">ExecStart=</code>, <code class=\"varname\">ExecStartPre=</code>, <code class=\"varname\">ExecStartPost=</code>    中无 \"<code class=\"literal\">-</code>\" 前缀的命令执行失败或超时)，    那么 <code class=\"varname\">ExecStop=</code> 将会被跳过。    如果想要无条件的在服务停止后执行特定的动作，那么应该使用 <code class=\"varname\">ExecStopPost=</code> 选项。    如果服务启动成功，那么即使主服务进程已经终止(无论是主动退出还是被杀死)，也会继续执行停止操作。    因此停止命令必须正确处理这种场景，如果 systemd 发现在调用停止命令时主服务进程已经终止，那么将会撤销 $MAINPID 变量。</p><p>重启服务的动作被实现为\"先停止、再启动\"。所以在重启期间，将会执行 <code class=\"varname\">ExecStop=</code> 与 <code class=\"varname\">ExecStopPost=</code> 命令。    推荐将此选项用于那些必须在服务干净退出之前执行的命令(例如还需要继续与主服务进程通信)。当此选项设置的命令被执行的时候，应该假定服务正处于完全正常的运行状态，可以正常的与其通信。    如果想要无条件的在服务停止后\"清理尸体\"，那么应该使用    <code class=\"varname\">ExecStopPost=</code> 选项。</p>",
                "ExecStopPost": "<p>这是一个可选的指令， 用于设置在该服务停止之后所执行的命令行。 语法规则与 <code class=\"varname\">ExecStart=</code> 完全相同。 注意，与 <code class=\"varname\">ExecStop=</code> 不同，无论服务是否启动成功， 此选项中设置的命令都会在服务停止后被无条件的执行。</p><p>应该将此选项用于设置那些无论服务是否启动成功， 都必须在服务停止后无条件执行的清理操作。 此选项设置的命令必须能够正确处理由于服务启动失败而造成的各种残缺不全以及数据不一致的场景。 由于此选项设置的命令在执行时，整个服务的所有进程都已经全部结束， 所以无法与服务进行任何通信。</p><p>注意，此处设置的所有命令在被调用之后都可以读取如下环境变量： <code class=\"varname\">$SERVICE_RESULT</code>(服务的最终结果), <code class=\"varname\">$EXIT_CODE</code>(服务主进程的退出码), <code class=\"varname\">$EXIT_STATUS</code>(服务主进程的退出状态)。 详见 <a href=\"systemd.exec.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.exec</span>(5)</span></a> 手册。</p>",
                "RestartSec": "<p>设置在重启服务(<code class=\"varname\">Restart=</code>)前暂停多长时间。 默认值是100毫秒(100ms)。 如果未指定时间单位，那么将视为以秒为单位。 例如设为\"20\"等价于设为\"20s\"。</p>",
                "TimeoutStartSec": "<p>设置该服务允许的最大启动时长。\" 如果守护进程未能在限定的时长内发出\"启动完毕\"的信号，那么该服务将被视为启动失败，并会被关闭。 如果未指定时间单位，那么将视为以秒为单位。 例如设为\"20\"等价于设为\"20s\"。 设为 \"<code class=\"literal\">infinity</code>\" 则表示永不超时。 当 <code class=\"varname\">Type=oneshot</code> 时， 默认值为 \"<code class=\"literal\">infinity</code>\" (永不超时)， 否则默认值等于 <code class=\"varname\">DefaultTimeoutStartSec=</code> 的值(参见 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 手册)。 </p><p>如果一个 <code class=\"varname\">Type=notify</code> 服务发送了 \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" 信号， 那么允许的启动时长将会在 <code class=\"varname\">TimeoutStartSec=</code> 基础上继续延长指定的时长。 注意，必须在 <code class=\"varname\">TimeoutStartSec=</code> 用完之前发出第一个延时信号。当启动时间超出 <code class=\"varname\">TimeoutStartSec=</code> 之后，该服务可以在维持始终不超时的前提下，不断重复发送 \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" 信号， 直到完成启动(发送 \"<code class=\"literal\">READY=1</code>\" 信号)。详见 <a href=\"sd_notify.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_notify</span>(3)</span></a> 手册。 </p>",
                "TimeoutStopSec": "<p>This option serves two purposes. First, it configures the time to wait for each\n        <code class=\"varname\">ExecStop=</code> command. If any of them times out, subsequent <code class=\"varname\">ExecStop=</code> commands\n        are skipped and the service will be terminated by <code class=\"constant\">SIGTERM</code>. If no <code class=\"varname\">ExecStop=</code>\n        commands are specified, the service gets the <code class=\"constant\">SIGTERM</code> immediately. This default behavior\n        can be changed by the <code class=\"varname\">TimeoutStopFailureMode=</code> option. Second, it configures the time\n        to wait for the service itself to stop. If it doesn't terminate in the specified time, it will be forcibly terminated\n        by <code class=\"constant\">SIGKILL</code> (see <code class=\"varname\">KillMode=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.kill.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.kill</span>(5)</span></a>).\n        Takes a unit-less value in seconds, or a time span value such\n        as \"5min 20s\". Pass \"<code class=\"literal\">infinity</code>\" to disable the\n        timeout logic. Defaults to\n        <code class=\"varname\">DefaultTimeoutStopSec=</code> from the manager\n        configuration file (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a>).\n        </p><p>If a service of <code class=\"varname\">Type=notify</code> sends \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\", this may cause\n        the stop time to be extended beyond <code class=\"varname\">TimeoutStopSec=</code>. The first receipt of this message\n        must occur before <code class=\"varname\">TimeoutStopSec=</code> is exceeded, and once the stop time has extended beyond\n        <code class=\"varname\">TimeoutStopSec=</code>, the service manager will allow the service to continue to stop, provided\n        the service repeats \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" within the interval specified, or terminates itself\n        (see <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/sd_notify.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_notify</span>(3)</span></a>).\n        </p>",
                "TimeoutAbortSec": "<p>This option configures the time to wait for the service to terminate when it was aborted due to a\n        watchdog timeout (see <code class=\"varname\">WatchdogSec=</code>). If the service has a short <code class=\"varname\">TimeoutStopSec=</code>\n        this option can be used to give the system more time to write a core dump of the service. Upon expiration the service\n        will be forcibly terminated by <code class=\"constant\">SIGKILL</code> (see <code class=\"varname\">KillMode=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.kill.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.kill</span>(5)</span></a>). The core file will\n        be truncated in this case. Use <code class=\"varname\">TimeoutAbortSec=</code> to set a sensible timeout for the core dumping per\n        service that is large enough to write all expected data while also being short enough to handle the service failure\n        in due time.\n        </p><p>Takes a unit-less value in seconds, or a time span value such as \"5min 20s\". Pass an empty value to skip\n        the dedicated watchdog abort timeout handling and fall back <code class=\"varname\">TimeoutStopSec=</code>. Pass\n        \"<code class=\"literal\">infinity</code>\" to disable the timeout logic. Defaults to <code class=\"varname\">DefaultTimeoutAbortSec=</code> from\n        the manager configuration file (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a>).\n        </p><p>If a service of <code class=\"varname\">Type=notify</code> handles <code class=\"constant\">SIGABRT</code> itself (instead of relying\n        on the kernel to write a core dump) it can send \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" to\n        extended the abort time beyond <code class=\"varname\">TimeoutAbortSec=</code>. The first receipt of this message\n        must occur before <code class=\"varname\">TimeoutAbortSec=</code> is exceeded, and once the abort time has extended beyond\n        <code class=\"varname\">TimeoutAbortSec=</code>, the service manager will allow the service to continue to abort, provided\n        the service repeats \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" within the interval specified, or terminates itself\n        (see <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/sd_notify.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_notify</span>(3)</span></a>).\n        </p>",
                "TimeoutSec": "<p>一个同时设置 <code class=\"varname\">TimeoutStartSec=</code> 与 <code class=\"varname\">TimeoutStopSec=</code> 的快捷方式。 </p>",
                "TimeoutStartFailureMode": "<p>These options configure the action that is taken in case a daemon service does not signal\n        start-up within its configured <code class=\"varname\">TimeoutStartSec=</code>, respectively if it does not stop within\n        <code class=\"varname\">TimeoutStopSec=</code>. Takes one of <code class=\"option\">terminate</code>, <code class=\"option\">abort</code> and\n        <code class=\"option\">kill</code>. Both options default to <code class=\"option\">terminate</code>.</p><p>If <code class=\"option\">terminate</code> is set the service will be gracefully terminated by sending the signal\n        specified in <code class=\"varname\">KillSignal=</code> (defaults to <code class=\"constant\">SIGTERM</code>, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.kill.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.kill</span>(5)</span></a>). If the\n        service does not terminate the <code class=\"varname\">FinalKillSignal=</code> is sent after\n        <code class=\"varname\">TimeoutStopSec=</code>. If <code class=\"option\">abort</code> is set, <code class=\"varname\">WatchdogSignal=</code> is sent\n        instead and <code class=\"varname\">TimeoutAbortSec=</code> applies before sending <code class=\"varname\">FinalKillSignal=</code>.\n        This setting may be used to analyze services that fail to start-up or shut-down intermittently.\n        By using <code class=\"option\">kill</code> the service is immediately terminated by sending\n        <code class=\"varname\">FinalKillSignal=</code> without any further timeout. This setting can be used to expedite the\n        shutdown of failing services.\n        </p>",
                "TimeoutStopFailureMode": "<p>These options configure the action that is taken in case a daemon service does not signal\n        start-up within its configured <code class=\"varname\">TimeoutStartSec=</code>, respectively if it does not stop within\n        <code class=\"varname\">TimeoutStopSec=</code>. Takes one of <code class=\"option\">terminate</code>, <code class=\"option\">abort</code> and\n        <code class=\"option\">kill</code>. Both options default to <code class=\"option\">terminate</code>.</p><p>If <code class=\"option\">terminate</code> is set the service will be gracefully terminated by sending the signal\n        specified in <code class=\"varname\">KillSignal=</code> (defaults to <code class=\"constant\">SIGTERM</code>, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.kill.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.kill</span>(5)</span></a>). If the\n        service does not terminate the <code class=\"varname\">FinalKillSignal=</code> is sent after\n        <code class=\"varname\">TimeoutStopSec=</code>. If <code class=\"option\">abort</code> is set, <code class=\"varname\">WatchdogSignal=</code> is sent\n        instead and <code class=\"varname\">TimeoutAbortSec=</code> applies before sending <code class=\"varname\">FinalKillSignal=</code>.\n        This setting may be used to analyze services that fail to start-up or shut-down intermittently.\n        By using <code class=\"option\">kill</code> the service is immediately terminated by sending\n        <code class=\"varname\">FinalKillSignal=</code> without any further timeout. This setting can be used to expedite the\n        shutdown of failing services.\n        </p>",
                "RuntimeMaxSec": "<p>允许服务持续运行的最大时长。 如果服务持续运行超过了此处限制的时长，那么该服务将会被强制终止，同时将该服务变为失败(failed)状态。 注意，此选项对 <code class=\"varname\">Type=oneshot</code> 类型的服务无效，因为它们会在启动完成后立即终止。 默认值为 \"<code class=\"literal\">infinity</code>\" (不限时长)。</p><p>如果一个 <code class=\"varname\">Type=notify</code> 服务发送了 \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" 信号， 那么允许的运行时长将会在 <code class=\"varname\">RuntimeMaxSec=</code> 基础上继续延长指定的时长。 注意，必须在 <code class=\"varname\">RuntimeMaxSec=</code> 用完之前发出第一个延时信号。当运行时间超出 <code class=\"varname\">RuntimeMaxSec=</code> 之后，该服务可以在维持始终不超时的前提下，不断重复发送 \"<code class=\"literal\">EXTEND_TIMEOUT_USEC=…</code>\" 信号， 直到运行结束(发送 \"<code class=\"literal\">STOPPING=1</code>\" 信号或直接退出)。详见 <a href=\"sd_notify.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_notify</span>(3)</span></a> 手册。 </p>",
                "WatchdogSec": "<p>设置该服务的看门狗(watchdog)的超时时长。 看门狗将在服务成功启动之后被启动。 该服务在运行过程中必须周期性的以  \"<code class= \"literal \">WATCHDOG=1</code> \" ( \"keep-alive ping \")调用 <a href= \"sd_notify.html# \"><span class= \"citerefentry \"><span class= \"refentrytitle \">sd_notify</span>(3)</span></a> 函数。 如果在两次调用之间的时间间隔大于这里设定的值， 那么该服务将被视为失败(failed)状态， 并会被强制使用 <code class= \"varname \">WatchdogSignal=</code> 信号(默认为 <code class= \"constant \">SIGABRT</code>)关闭。 通过将 <code class= \"varname \">Restart=</code> 设为 <code class= \"option \">on-failure</code>, <code class= \"option \">on-watchdog</code>, <code class= \"option \">on-abnormal</code>, <code class= \"option \">always</code> 之一， 可以实现在失败状态下的自动重启该服务。 这里设置的值将会通过 <code class= \"varname \">WATCHDOG_USEC=</code> 环境变量传递给守护进程， 这样就允许那些支持看门狗的服务自动启用 \"keep-alive ping \"。 如果设置了此选项， 那么 <code class= \"varname \">NotifyAccess=</code> 将只能设为非 <code class= \"option \">none</code> 值。 如果 <code class= \"varname \">NotifyAccess=</code> 未设置，或者已经被明确设为 <code class= \"option \">none</code> ， 那么将会被自动强制修改为 <code class= \"option \">main</code> 。 如果未指定时间单位，那么将视为以秒为单位。 例如设为 \"20 \"等价于设为 \"20s \"。 默认值 \"0 \"表示禁用看门狗功能。 详见 <a href= \"sd_watchdog_enabled.html# \"><span class= \"citerefentry \"><span class= \"refentrytitle \">sd_watchdog_enabled</span>(3)</span></a> 与 <a href= \"sd_event_set_watchdog.html# \"><span class= \"citerefentry \"><span class= \"refentrytitle \">sd_event_set_watchdog</span>(3)</span></a> 手册。 </p>",
                "Restart": "<p>当服务进程 正常退出、异常退出、被杀死、超时的时候， 是否重新启动该服务。 所谓\"服务进程\" 是指 <code class=\"varname\">ExecStart=</code>, <code class=\"varname\">ExecStartPre=</code>, <code class=\"varname\">ExecStartPost=</code>, <code class=\"varname\">ExecStop=</code>, <code class=\"varname\">ExecStopPost=</code>, <code class=\"varname\">ExecReload=</code> 中设置的进程。 当进程是由于 systemd 的正常操作(例如 <span class=\"command\"><strong>systemctl stop|restart</strong></span>)而被停止时， 该服务不会被重新启动。 所谓\"超时\"可以是看门狗的\"keep-alive ping\"超时， 也可以是 <span class=\"command\"><strong>systemctl start|reload|stop</strong></span> 操作超时。</p><p>该选项的值可以取 <code class=\"option\">no</code>, <code class=\"option\">on-success</code>, <code class=\"option\">on-failure</code>, <code class=\"option\">on-abnormal</code>, <code class=\"option\">on-watchdog</code>, <code class=\"option\">on-abort</code>, <code class=\"option\">always</code> 之一。 <code class=\"option\">no</code>(默认值) 表示不会被重启。 <code class=\"option\">always</code> 表示会被无条件的重启。 <code class=\"option\">on-success</code> 表示仅在服务进程正常退出时重启， 所谓\"正常退出\"是指：退出码为\"0\"， 或者进程收到 <code class=\"constant\">SIGHUP</code>, <code class=\"constant\">SIGINT</code>, <code class=\"constant\">SIGTERM</code>, <code class=\"constant\">SIGPIPE</code> 信号之一， 并且 退出码符合 <code class=\"varname\">SuccessExitStatus=</code> 的设置。 <code class=\"option\">on-failure</code> 表示 仅在服务进程异常退出时重启， 所谓\"异常退出\" 是指： 退出码不为\"0\"， 或者 进程被强制杀死(包括 \"core dump\"以及收到 <code class=\"constant\">SIGHUP</code>, <code class=\"constant\">SIGINT</code>, <code class=\"constant\">SIGTERM</code>, <code class=\"constant\">SIGPIPE</code> 之外的其他信号)， 或者进程由于 看门狗超时 或者 systemd 的操作超时 而被杀死。</p><div class=\"table\"><a name=\"id-1.8.3.17.2.3\"></a><p class=\"title\"><b>表&nbsp;2.&nbsp;<code class=\"varname\">Restart=</code> 的设置分别对应于哪些退出原因</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Restart= 的设置分别对应于哪些退出原因\" border=\"1\"><colgroup><col class=\"path\"><col class=\"expl\"></colgroup><thead><tr><th>退出原因(↓) | Restart= (→)</th><th><code class=\"option\">no</code></th><th><code class=\"option\">always</code></th><th><code class=\"option\">on-success</code></th><th><code class=\"option\">on-failure</code></th><th><code class=\"option\">on-abnormal</code></th><th><code class=\"option\">on-abort</code></th><th><code class=\"option\">on-watchdog</code></th></tr></thead><tbody><tr><td>正常退出</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>退出码不为\"0\"</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>进程被强制杀死</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td><td>X</td><td>X</td><td>&nbsp;</td></tr><tr><td>systemd 操作超时</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>看门狗超时</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td></tr></tbody></table></div></div><br class=\"table-break\"><p>注意如下例外情况(详见下文)： (1) <code class=\"varname\">RestartPreventExitStatus=</code> 中列出的退出码或信号永远不会导致该服务被重启。 (2) 被 <span class=\"command\"><strong>systemctl stop</strong></span> 命令或等价的操作停止的服务永远不会被重启。 (3) <code class=\"varname\">RestartForceExitStatus=</code> 中列出的退出码或信号将会 无条件的导致该服务被重启。</p><p>注意，服务的重启频率仍然会受到由 <code class=\"varname\">StartLimitIntervalSec=</code> 与 <code class=\"varname\">StartLimitBurst=</code> 定义的启动频率的制约。详见 <a href=\"systemd.unit.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.unit</span>(5)</span></a> 手册。只有在达到启动频率限制之后， 重新启动的服务才会进入失败状态。</p><p>对于需要长期持续运行的守护进程， 推荐设为 <code class=\"option\">on-failure</code> 以增强可用性。 对于自身可以自主选择何时退出的服务， 推荐设为 <code class=\"option\">on-abnormal</code></p>",
                "SuccessExitStatus": "<p>额外定义其他的进程 \"正常退出 \"状态。 也就是，在退出码 \"0 \"、以及表示 \"正常退出 \"的 <code class= \"constant \">SIGHUP</code>, <code class= \"constant \">SIGINT</code>, <code class= \"constant \">SIGTERM</code>, <code class= \"constant \">SIGPIPE</code> 信号之外， 再额外添加一组表示 \"正常退出 \"的退出码或信号。 可以设为一系列 以空格分隔的数字退出码或者信号名称， 例如： </p><pre class= \"programlisting \">SuccessExitStatus=1 2 8 SIGKILL</pre><p> 表示当进程的退出码是 1, 2, 8 或被 <code class= \"constant \">SIGKILL</code> 信号终止时， 都可以视为 \"正常退出 \"。 </p><p>如果多次使用此选项， 那么最终的结果将是多个列表的合并。 如果将此选项设为空， 那么先前设置的列表 将被清空。</p>",
                "RestartPreventExitStatus": "<p>可以设为一系列  以空格分隔的数字退出码或信号名称，  当进程的退出码或收到的信号与此处的设置匹配时，  无论 <code class=\"varname\">Restart=</code> 选项  是如何设置的，  该服务都将无条件的  禁止重新启动。  例如：  </p><pre class=\"programlisting\">RestartPreventExitStatus=1 6 SIGABRT</pre><p>  可以确保退出码 1, 6 与 <code class=\"constant\">SIGABRT</code> 信号  不会导致该服务被自动重启。  默认值为空，  表示完全遵守   <code class=\"varname\">Restart=</code> 的设置。  如果多次使用此选项，那么最终的结果将是多个列表的合并。  如果将此选项设为空，那么先前设置的列表将被清空。</p>",
                "RestartForceExitStatus": "<p>可以设为一系列以空格分隔的数字退出码或信号名称，  当进程的退出码或收到的信号与此处的设置匹配时，  无论 <code class=\"varname\">Restart=</code> 是如何设置的，该服务都将无条件的被自动重新启动。  默认值为空，表示完全遵守 <code class=\"varname\">Restart=</code> 的设置。  如果多次使用此选项，那么最终的结果将是多个列表的合并。  如果将此选项设为空，那么先前设置的列表将被清空。</p>",
                "RootDirectoryStartOnly": "<p>接受一个布尔值。 设为 yes 表示根目录 <code class=\"varname\">RootDirectory=</code> 选项(参见 <a href=\"systemd.exec.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.exec</span>(5)</span></a> 手册) 仅对 <code class=\"varname\">ExecStart=</code> 中的程序有效， 而对 <code class=\"varname\">ExecStartPre=</code>, <code class=\"varname\">ExecStartPost=</code>, <code class=\"varname\">ExecReload=</code>, <code class=\"varname\">ExecStop=</code>, <code class=\"varname\">ExecStopPost=</code> 中的程序无效。 默认值 no 表示根目录对所有 <code class=\"varname\">Exec*=</code> 系列选项中的程序都有效。</p>",
                "NonBlocking": "<p>是否为所有基于套接字启动传递的文件描述符设置非阻塞标记(<code class=\"constant\">O_NONBLOCK</code>)。 设为 yes 表示除了通过 <code class=\"varname\">FileDescriptorStoreMax=</code> 引入的文件描述符之外， 所有 ≥3 的文件描述符(非 stdin, stdout, stderr 文件描述符)都将被设为非阻塞模式。 该选项仅在与 socket 单元 (<a href=\"systemd.socket.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.socket</span>(5)</span></a>) 联用的时候才有意义。 对于那些先前已经通过 <code class=\"varname\">FileDescriptorStoreMax=</code> 引入的文件描述符则毫无影响。 默认值为 no </p>",
                "NotifyAccess": "<p>设置通过  <a href=\"sd_notify.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_notify</span>(3)</span></a>  访问服务状态通知套接字的模式。  可以设为 <code class=\"option\">none</code>(默认值), <code class=\"option\">main</code>, <code class=\"option\">exec</code>, <code class=\"option\">all</code> 之一。  <code class=\"option\">none</code> 表示不更新任何守护进程的状态，忽略所有状态更新消息。  <code class=\"option\">main</code> 表示仅接受主进程的状态更新消息。  <code class=\"option\">exec</code> 表示仅接受主进程以及 <code class=\"varname\">Exec*=</code> 进程的状态更新消息。  <code class=\"option\">all</code> 表示接受该服务cgroup内所有进程的状态更新消息。  当设置了 <code class=\"varname\">Type=notify</code> 或 <code class=\"varname\">WatchdogSec=</code> 的时候(见前文)，此选项将只能设为非 <code class=\"option\">none</code> 值。  如果 <code class=\"varname\">NotifyAccess=</code> 未设置，或者已经被明确设为 <code class=\"option\">none</code> ，  那么将会被自动强制修改为 <code class=\"option\">main</code> 。</p><p>注意，服务单元的 <code class=\"function\">sd_notify()</code> 通知能够正常工作的前提，  是必须满足如下两个条件之一：  (1)在 PID=1 的进程处理通知消息时，发送该通知的进程依然在运行；  (2)发送该通知的进程是 systemd 派生的子进程(也就是匹配 <code class=\"option\">main</code> 或 <code class=\"option\">exec</code> 的进程)。  如果服务单元中的某个辅助进程在发送了 <code class=\"function\">sd_notify()</code> 通知之后就立即退出了，  那么 systemd 将有可能来不及将该通知关联到这个服务单元上。  在这种情况下，即使明确设置了 <code class=\"varname\">NotifyAccess=all</code> ，  该通知也可能会被忽略掉。</p>",
                "Sockets": "<p>设置一个 socket 单元的名称， 表示该服务在启动时应当从它继承套接字文件描述符。 通常并不需要明确设置此选项， 因为所有与该服务同名(不算后缀)的 socket 单元的套接字文件描述符， 都会被自动的 传递给派生进程。</p><p>注意： (1)同一个套接字文件描述符可以被传递给多个不同的进程(服务)。 (2)当套接字上有流量进入时， 被启动的可能是另一个不同于该服务的其他服务。 换句话说就是： 套接字单元中的 <code class=\"varname\">Sockets=</code> 所指向的服务单元中的 <code class=\"varname\">Sockets=</code> 未必要反向指回去。</p><p>如果多次使用此选项， 那么最终的结果将是多个socket单元的合集。 如果将此选项设为空， 那么先前设置的所有socket单元 都将被清空。</p>",
                "FileDescriptorStoreMax": "<p>允许在 systemd 中最多为该服务存储多少个使用 \"<code class=\"literal\">FDSTORE=1</code>\" 消息(<a href=\"sd_pid_notify_with_fds.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd_pid_notify_with_fds</span>(3)</span></a>) 的文件描述符。默认值为\"0\"(不存储)。 通过将服务重启过程中不应该关闭的套接字与文件描述符使用这种方法保存起来， 就可以实现让服务在重启(正常重启或崩溃重启)之后不丢失其状态。 进程的状态可以被序列化为一个文件之后保存在 <code class=\"filename\">/run</code> 中， 或者保存在一个 <a href=\"http://man7.org/linux/man-pages/man2/memfd_create.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">memfd_create</span>(2)</span></a> 内存文件描述符中(这是更好的选择)。 所有被 systemd 暂存的文件描述符都将在该服务重启之后交还给该服务的主进程。 所有被 systemd 暂存的文件描述符都将在遇到如下两种情况时被自动关闭： (1)收到 <code class=\"constant\">POLLHUP</code> 或 <code class=\"constant\">POLLERR</code> 信号； (2)该服务被彻底停止，并且没有任何剩余的任务需要处理。 如果使用了此选项，那么前文的 <code class=\"varname\">NotifyAccess=</code> 应该被设为允许访问 systemd 提供的通知套接字。若未设置 <code class=\"varname\">NotifyAccess=</code> ，那么将被隐含的设为 <code class=\"option\">main</code></p>",
                "USBFunctionDescriptors": "<p>设为一个包含 <a class=\"ulink\" href=\"https://www.kernel.org/doc/Documentation/usb/functionfs.txt\" target=\"_top\">USB FunctionFS</a> 描述符的文件路径， 以实现 USB gadget 支持。 仅与配置了 <code class=\"varname\">ListenUSBFunction=</code> 的 socket 单元一起使用。该文件的内容将被写入 <code class=\"filename\">ep0</code> 文件。</p>",
                "USBFunctionStrings": "<p>设为一个包含 <a class=\"ulink\" href=\"https://www.kernel.org/doc/Documentation/usb/functionfs.txt\" target=\"_top\">USB FunctionFS</a> 字符串的文件路径。 其行为与上面的 <code class=\"varname\">USBFunctionDescriptors=</code> 类似。</p>",
                "OOMPolicy": "<p>Configure the Out-Of-Memory (OOM) killer policy. On Linux, when memory becomes scarce\n        the kernel might decide to kill a running process in order to free up memory and reduce memory\n        pressure. This setting takes one of <code class=\"constant\">continue</code>, <code class=\"constant\">stop</code> or\n        <code class=\"constant\">kill</code>. If set to <code class=\"constant\">continue</code> and a process of the service is\n        killed by the kernel's OOM killer this is logged but the service continues running. If set to\n        <code class=\"constant\">stop</code> the event is logged but the service is terminated cleanly by the service\n        manager. If set to <code class=\"constant\">kill</code> and one of the service's processes is killed by the OOM\n        killer the kernel is instructed to kill all remaining processes of the service, too. Defaults to the\n        setting <code class=\"varname\">DefaultOOMPolicy=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a>\n        is set to, except for services where <code class=\"varname\">Delegate=</code> is turned on, where it defaults to\n        <code class=\"constant\">continue</code>.</p><p>Use the <code class=\"varname\">OOMScoreAdjust=</code> setting to configure whether processes of the unit\n        shall be considered preferred or less preferred candidates for process termination by the Linux OOM\n        killer logic. See\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.exec.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.exec</span>(5)</span></a> for\n        details.</p>",
                "WorkingDirectory": "<p>设置进程的工作目录。 既可以设为特殊值 \"<code class=\"literal\">~</code>\" 表示 <code class=\"varname\">User=</code> 用户的家目录，也可以设为一个以 <code class=\"varname\">RootDirectory=</code> 为基准的绝对路径。 例如当 <code class=\"varname\">RootDirectory=/sysroot</code> 并且 <code class=\"varname\">WorkingDirectory=/work/dir</code> 时，实际的工作目录将是 <code class=\"varname\">/sysroot/work/dir</code> 。 当 systemd 作为系统实例运行时，此选项的默认值是 <code class=\"filename\">/</code> ； 当 systemd 作为用户实例运行时，此选项的默认值是对应用户的家目录。 如果给目录加上 \"<code class=\"literal\">-</code>\" 前缀，那么表示即使此目录不存在，也不算致命错误。 如果未设置 <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code> 选项，那么为 <code class=\"varname\">WorkingDirectory=</code> 设置的绝对路径 将以主机(或容器)的根目录(也就是运行 systemd 的系统根目录)为基准。 注意，设置此选项将会导致自动添加 额外的依赖关系(见上文)。</p>",
                "RootDirectory": "<p>此选项仅可用于系统单元(不适用于用户单元)。 设置以 <a href=\"http://man7.org/linux/man-pages/man2/chroot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">chroot</span>(2)</span></a> 方式执行进程时的根目录。 必须设为一个以主机(或容器)的根目录(也就是运行 systemd 的系统根目录)为基准的绝对路径。 如果设置了此选项，必须确保进程及其辅助文件在 <code class=\"function\">chroot()</code> 监狱中确实可用。 注意，设置此选项将会导致自动添加额外的依赖关系(见上文)。</p><p>将 <code class=\"varname\">MountAPIVFS=</code> 以及 <code class=\"varname\">PrivateUsers=</code> 与 <code class=\"varname\">RootDirectory=</code> 一起使用时特别有意义。详见下文。</p>",
                "RootImage": "<p>可设为一个块设备节点或者一个普通文件。 此设置的含义与 <code class=\"varname\">RootDirectory=</code> 相同，不同之处在于是从块设备或回环文件挂载一个文件系统(而不是直接使用一个现成的目录)。 需要注意的是，块设备或回环文件中必须包含合法的文件系统，同时还需要满足以下条件之一： (1)不包含任何分区表；(2)仅包含单独一个 Linux 能够识别的 MBR/MS-DOS 或 GPT 分区； (3)包含一组完全遵守 <a class=\"ulink\" href=\"https://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/\" target=\"_top\">Discoverable Partitions Specification</a> 规范的 GPT 分区。</p><p>如果 <code class=\"varname\">DevicePolicy=</code> 的值为 \"<code class=\"literal\">closed</code>\", \"<code class=\"literal\">strict</code>\" 之一、 或者 <code class=\"varname\">DevicePolicy=auto</code> 且 <code class=\"varname\">DeviceAllow=</code> 非空，那么使用此选项将导致 <code class=\"filename\">/dev/loop-control</code> 被赋予 <code class=\"constant\">rw</code> 模式、 <code class=\"varname\">DeviceAllow=</code> 中的 \"<code class=\"literal\">block-loop</code>\" 与 \"<code class=\"literal\">block-blkext</code>\" 被赋予 <code class=\"constant\">rwm</code> 模式。详见 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 以了解 <code class=\"varname\">DevicePolicy=</code> 与 <code class=\"varname\">DeviceAllow=</code> 选项。此外，下面的 <code class=\"varname\">PrivateDevices=</code> 选项也可能会改变 <code class=\"varname\">DevicePolicy=</code> 的设置。此选项仅可用于系统单元(不适用于用户单元)。 </p>",
                "RootHash": "<p>Takes a data integrity (dm-verity) root hash specified in hexadecimal, or the path to a file\n        containing a root hash in ASCII hexadecimal format. This option enables data integrity checks using dm-verity,\n        if the used image contains the appropriate integrity data (see above) or if <code class=\"varname\">RootVerity=</code> is used.\n        The specified hash must match the root hash of integrity data, and is usually at least 256 bits (and hence 64\n        formatted hexadecimal characters) long (in case of SHA256 for example). If this option is not specified, but\n        the image file carries the \"<code class=\"literal\">user.verity.roothash</code>\" extended file attribute (see <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/xattr.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">xattr</span>(7)</span></a>), then the root\n        hash is read from it, also as formatted hexadecimal characters. If the extended file attribute is not found (or\n        is not supported by the underlying file system), but a file with the <code class=\"filename\">.roothash</code> suffix is\n        found next to the image file, bearing otherwise the same name (except if the image has the\n        <code class=\"filename\">.raw</code> suffix, in which case the root hash file must not have it in its name), the root hash\n        is read from it and automatically used, also as formatted hexadecimal characters.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "RootHashSignature": "<p>Takes a PKCS7 formatted binary signature of the <code class=\"varname\">RootHash=</code> option as a path\n        to a DER encoded signature file or as an ASCII base64 string encoding of the DER encoded signature, prefixed\n        by \"<code class=\"literal\">base64:</code>\". The dm-verity volume will only be opened if the signature of the root hash\n        signature is valid and created by a public key present in the kernel keyring. If this option is not specified,\n        but a file with the <code class=\"filename\">.roothash.p7s</code> suffix is found next to the image file, bearing otherwise\n        the same name (except if the image has the <code class=\"filename\">.raw</code> suffix, in which case the signature file\n        must not have it in its name), the signature is read from it and automatically used.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "RootVerity": "<p>Takes the path to a data integrity (dm-verity) file. This option enables data integrity checks\n        using dm-verity, if <code class=\"varname\">RootImage=</code> is used and a root-hash is passed and if the used image itself\n        does not contains the integrity data. The integrity data must be matched by the root hash. If this option is not\n        specified, but a file with the <code class=\"filename\">.verity</code> suffix is found next to the image file, bearing otherwise\n        the same name (except if the image has the <code class=\"filename\">.raw</code> suffix, in which case the verity data file must\n        not have it in its name), the verity data is read from it and automatically used.</p><p>This option is supported only for disk images that contain a single file system, without an\n        enveloping partition table. Images that contain a GPT partition table should instead include both\n        root file system and matching Verity data in the same image, implementing the <a target=\"__blank\" class=\"ulink\" href=\"https://systemd.io/DISCOVERABLE_PARTITIONS\" target=\"_top\">Discoverable Partition Specification</a>.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "MountAPIVFS": "<p>接受一个布尔值。设为 yes 表示为该单元内的进程创建私有的挂载名字空间， 并在其中挂载 <code class=\"filename\">/proc</code>, <code class=\"filename\">/sys</code>, <code class=\"filename\">/dev</code> 虚拟文件系统(除非它们已经被挂载了)。此设置仅在与 <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code> 一起使用时才有意义，因为宿主机上一般已经挂载了这三个虚拟文件系统； 同时，除非切换到了不同的根目录，否则私有的挂载名字空间将会完全按原样从宿主机复制一份， 这其中当然也就包含了这三个挂载点。注意，当 <code class=\"varname\">PrivateDevices=no</code> (默认值)时， <code class=\"filename\">/dev</code> 将会以绑定(--bind)的方式从宿主机上挂载。 要想让服务运行在一个私有的最小化 <code class=\"filename\">/dev/</code> 环境中，请务必联合 <code class=\"varname\">PrivateDevices=yes</code> 一起使用。此选项仅可用于系统单元(不适用于用户单元)。</p>",
                "BindPaths": "<p>设置专属于该单元的绑定挂载点(bind)。 通过\"绑定挂载\"，可以将该单元原本不可见的挂载点，放入该单元的可见范围内。 注意，通过此选项创建的绑定挂载点专属于该单元，对运行该单元的主机并不可见。 这些选项接受一个空格分隔的绑定挂载点的定义列表。列表中的每一项定义都遵守 \"[-]源路径[:目标路径[:挂载选项]]\" 格式(中括号表示可选)。 目标路径的默认值是源路径，挂载选项只能设为 \"<code class=\"literal\">rbind</code>\"(递归) 或 \"<code class=\"literal\">norbind</code>\"(不递归) 之一。 如果省略了目标路径，那么必须同时一起省略挂载选项。 前缀 \"<code class=\"literal\">-</code>\" 表示若源路径不存在 则忽略此项(而不是导致错误)。</p><p><code class=\"varname\">BindPaths=</code> 用于创建可读写绑定挂载点(除非源挂载点本来就是只读的)。 <code class=\"varname\">BindReadOnlyPaths=</code> 用于创建只读绑定挂载点。 可以多次使用这些选项，以设置更多的绑定挂载点。 注意，若将某个选项设为空，则表示撤消所有先前设置的绑定挂载点列表， 包括可读写绑定挂载点以及只读绑定挂载点。 也就是任意一个选项都会一次性撤销两个选项先前的全部设置。</p><p>这些选项一般和 <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code> 一起使用， 此时，源路径一般是主系统上的某个挂载点，而目标路径则是该单元根目录下的某个路径。 此选项仅可用于系统单元(不适用于用户单元)。</p>",
                "BindReadOnlyPaths": "<p>设置专属于该单元的绑定挂载点(bind)。 通过\"绑定挂载\"，可以将该单元原本不可见的挂载点，放入该单元的可见范围内。 注意，通过此选项创建的绑定挂载点专属于该单元，对运行该单元的主机并不可见。 这些选项接受一个空格分隔的绑定挂载点的定义列表。列表中的每一项定义都遵守 \"[-]源路径[:目标路径[:挂载选项]]\" 格式(中括号表示可选)。 目标路径的默认值是源路径，挂载选项只能设为 \"<code class=\"literal\">rbind</code>\"(递归) 或 \"<code class=\"literal\">norbind</code>\"(不递归) 之一。 如果省略了目标路径，那么必须同时一起省略挂载选项。 前缀 \"<code class=\"literal\">-</code>\" 表示若源路径不存在 则忽略此项(而不是导致错误)。</p><p><code class=\"varname\">BindPaths=</code> 用于创建可读写绑定挂载点(除非源挂载点本来就是只读的)。 <code class=\"varname\">BindReadOnlyPaths=</code> 用于创建只读绑定挂载点。 可以多次使用这些选项，以设置更多的绑定挂载点。 注意，若将某个选项设为空，则表示撤消所有先前设置的绑定挂载点列表， 包括可读写绑定挂载点以及只读绑定挂载点。 也就是任意一个选项都会一次性撤销两个选项先前的全部设置。</p><p>这些选项一般和 <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code> 一起使用， 此时，源路径一般是主系统上的某个挂载点，而目标路径则是该单元根目录下的某个路径。 此选项仅可用于系统单元(不适用于用户单元)。</p>",
                "User": "<p>设置进程在执行时使用的用户与组。 既可以设为一个数字形式的 UID/GID 也可以设为一个字符串形式的名称。 对于系统服务(由 PID=1 的 systemd 系统实例管理)以及由 root 运行的用户服务(由 root 用户启动的 <span class=\"command\"><strong>systemd --user</strong></span> 用户实例管理)， <code class=\"varname\">User=</code> 的默认值是 \"<code class=\"literal\">root</code>\" ，同时亦可明确将 <code class=\"varname\">User=</code> 设为其他用户。 对于普通用户运行的用户服务，<code class=\"varname\">User=</code> 的默认值就是该用户自身，并且禁止将 <code class=\"varname\">User=</code> 切换为其他用户。 如果没有明确设置 <code class=\"varname\">Group=</code> 选项，则使用 <code class=\"varname\">User=</code> 所属的默认组。 此选项不影响 带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p><p>注意， 为了避免歧义以及确保在不同 Linux 系统之间的兼容性， 用户与组的名称必须满足以下规则： (1)仅可包含 a-z, A-Z, 0-9, \"<code class=\"literal\">_</code>\", \"<code class=\"literal\">-</code>\" 字符； (2)首字母只能是 a-z, A-Z, \"<code class=\"literal\">_</code>\" 之一(也就是禁止使用数字与 \"<code class=\"literal\">-</code>\" 字符)； (3)字符串长度必须介于 1~31 之间。</p><p>当与 <code class=\"varname\">DynamicUser=yes</code> 一起使用时， 指定的用户与组将在服务启动时动态分配，并在服务停止时自动释放，除非它们已经被静态的创建了(见下文)。 当与 <code class=\"varname\">DynamicUser=no</code> 一起使用时， 指定的用户与组必须在服务启动之前就已经被静态的创建了， 例如在系统启动或安装软件包时，使用 <a href=\"sysusers.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sysusers.d</span>(5)</span></a> 机制所创建的用户与组。</p>",
                "Group": "<p>设置进程在执行时使用的用户与组。 既可以设为一个数字形式的 UID/GID 也可以设为一个字符串形式的名称。 对于系统服务(由 PID=1 的 systemd 系统实例管理)以及由 root 运行的用户服务(由 root 用户启动的 <span class=\"command\"><strong>systemd --user</strong></span> 用户实例管理)， <code class=\"varname\">User=</code> 的默认值是 \"<code class=\"literal\">root</code>\" ，同时亦可明确将 <code class=\"varname\">User=</code> 设为其他用户。 对于普通用户运行的用户服务，<code class=\"varname\">User=</code> 的默认值就是该用户自身，并且禁止将 <code class=\"varname\">User=</code> 切换为其他用户。 如果没有明确设置 <code class=\"varname\">Group=</code> 选项，则使用 <code class=\"varname\">User=</code> 所属的默认组。 此选项不影响 带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p><p>注意， 为了避免歧义以及确保在不同 Linux 系统之间的兼容性， 用户与组的名称必须满足以下规则： (1)仅可包含 a-z, A-Z, 0-9, \"<code class=\"literal\">_</code>\", \"<code class=\"literal\">-</code>\" 字符； (2)首字母只能是 a-z, A-Z, \"<code class=\"literal\">_</code>\" 之一(也就是禁止使用数字与 \"<code class=\"literal\">-</code>\" 字符)； (3)字符串长度必须介于 1~31 之间。</p><p>当与 <code class=\"varname\">DynamicUser=yes</code> 一起使用时， 指定的用户与组将在服务启动时动态分配，并在服务停止时自动释放，除非它们已经被静态的创建了(见下文)。 当与 <code class=\"varname\">DynamicUser=no</code> 一起使用时， 指定的用户与组必须在服务启动之前就已经被静态的创建了， 例如在系统启动或安装软件包时，使用 <a href=\"sysusers.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sysusers.d</span>(5)</span></a> 机制所创建的用户与组。</p>",
                "DynamicUser": "<p>设置是否动态分配用户。默认值为 \"no\" 。 设为 yes 表示在该单元启动时，为其动态分配一个 user/group 对，并在该单元停止时释放。 动态分配的 user/group 不会被添加到 <code class=\"filename\">/etc/passwd</code> 或 <code class=\"filename\">/etc/group</code> 文件中， 而是由 glibc 的 NSS 插件 <a href=\"nss-systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">nss-systemd</span>(8)</span></a> 进行维护，以确保能够从系统的 user/group 数据库中查询到动态分配的 user/group 对。 可以通过上文的 <code class=\"varname\">User=</code> 与 <code class=\"varname\">Group=</code> 明确指定动态分配的 user/group 的名称。 若未明确指定名称，则自动根据单元的名称生成： 如果单元名(不含类型后缀)恰好符合用户名规则，那么就直接使用单元名，否则将使用单元名的哈希值。 如果 <code class=\"varname\">User=</code> 或 <code class=\"varname\">Group=</code> 恰好指定了一个已经静态存在的名称， 那么将直接使用已经静态存在的 user/group (而不是动态分配)。注意，如果指定的 <code class=\"varname\">User=</code> 名称恰好与某个静态组同名， 那么在 <code class=\"varname\">User=</code> 中设置的用户名也必须是静态用户。同样， 如果指定的 <code class=\"varname\">Group=</code> 名称恰好与某个静态用户同名，那么在 <code class=\"varname\">Group=</code> 中设置的组名也必须是静态组。因为动态分配的 UID/GID 范围在 61184-65519 之间， 所以静态存在的 UID/GID 应该避免使用这个范围。在任意时间点上， 每一个动态分配的 UID/GID 只能对应最多一个动态分配的 user/group 。 因为动态分配的 UID/GID 在单元停止后会被回收，并且会被反复循环使用， 所以使用动态分配用户的单元不应该在其停止后遗留下任何属于动态分配用户的文件或目录， 否则其他单元有可能在未来取得相同的 UID/GID ，从而成为这些遗留文件或目录的拥有者。 当 <code class=\"varname\">DynamicUser=yes</code> 时，也同时隐含的设置了 <code class=\"varname\">RemoveIPC=yes</code> 与 <code class=\"varname\">PrivateTmp=yes</code> ，从而确保将单元的 IPC 对象与临时文件的生存期 与单元自身的生存期、为该单元动态分配的 user/group 的生存期绑定在一起。 因为除 <code class=\"filename\">/tmp</code> 与 <code class=\"filename\">/var/tmp</code> 之外，通常不存在其他全局可写的目录， 所以，这通常也确保了使用动态分配 user/group 的单元，不可能在单元停止之后还遗留任何文件或目录。 进一步，<code class=\"varname\">DynamicUser=yes</code> 还同时隐含了 <code class=\"varname\">ProtectSystem=strict</code> 与 <code class=\"varname\">ProtectHome=read-only</code> ，以禁止单元写入文件系统上的敏感路径。 如果想要允许单元写入某些特定的路径， 那么必须将这些路径使用 <code class=\"varname\">ReadWritePaths=</code> 白名单明确列出。 注意，必须小心使用这个白名单，以避免由于循环使用 UID/GID 带来的安全问题。 可以使用下文的 <code class=\"varname\">RuntimeDirectory=</code> 设置一个运行时的写入目录， 该目录的拥有者将会被自动设为动态分配的 user/group ，并会在单元停止后被自动删除。 可以使用下文的 <code class=\"varname\">StateDirectory=</code>, <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code> 来设置一组专门用途的可写目录， 以避免由于循环使用 UID/GID 带来的安全问题。</p>",
                "SupplementaryGroups": "<p>设置进程在执行时使用的附加组。值是一个空格分隔的组名或组ID列表。  可以多次使用此选项，以添加更多的附加组。  若设为空，则表示清空先前已设置的列表。  注意，此选项并不覆盖系统现有的附加组，而只是在现有的附加组基础上进行扩展。  此选项不影响  带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p>",
                "PAMName": "<p>设置建立PAM会话所使用的PAM服务名称。 此选项仅在与 <code class=\"varname\">User=</code> 连用时才有意义(否则将被忽略)。 若设置，那么将以设置的名称为进程注册一个PAM会话。 若未设置，那么将不会为进程打开任何PAM会话。详见 <a href=\"http://man7.org/linux/man-pages/man8/pam.8.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">pam</span>(8)</span></a> 手册。</p><p>注意，对于每一个使用了此选项的单元， 都会在其生存期内维护一个PAM会话处理进程(作为该单元的一部分)，以确保在整个单元的生存期内，PAM机制始终可以正常工作。 此PAM会话处理进程名为 \"<code class=\"literal\">(sd-pam)</code>\" 并且始终作为该单元的主进程的直接子进程存在。</p><p>使用此选项非常可能(取决于PAM的配置)导致在该单元启动时， 将该单元的主进程迁移到自己的会话 scope 单元中，从而使得同一个主进程被关联到两个单元： (1)启动该主进程的单元(也就是配置了 <code class=\"varname\">PAMName=</code> 选项的单元)； (2)与该单元对应的会话 scope 单元。 例如，将此选项与 <code class=\"varname\">NotifyAccess=</code><code class=\"option\">all</code> 一起使用时，就会导致上述结果。 在这种情况下，该主进程的所有子进程将会被仅关联到对应的会话 scope 单元， 从而导致这些子进程无法通过通知消息反映原始服务单元的状态变化(因为这些通知消息仅属于会话 scope 单元，而非原始服务单元)。 因此，不应该将 <code class=\"varname\">PAMName=</code> 与 <code class=\"varname\">NotifyAccess=</code><code class=\"option\">all</code> 一起使用。</p>",
                "CapabilityBoundingSet": "<p>设置进程的 capability 集合(bounding, effective, permitted, inheritable)中应该包含哪些 <a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">capabilities</span>(7)</span></a> 。 选项值是一个空格分隔的 capability 名称(例如 <code class=\"constant\">CAP_SYS_ADMIN</code>, <code class=\"constant\">CAP_DAC_OVERRIDE</code>, <code class=\"constant\">CAP_SYS_PTRACE</code>)列表 。 列表中的 capabilities 将会被包含在 capability 集合中， 而所有其他不在列表中的 capabilities 则会被剔除。 如果列表以 \"<code class=\"literal\">~</code>\" 符号开头，那么表示取反， 也就是所有列表之外的 capabilities 将会被包含在 capability 集合中。 若未设置此选项，则表示不修改进程的 capability 集合。 若多次设置此选项，则表示将多个设置的 capability 集合合并： 一般情况下使用 <code class=\"constant\">OR</code> 逻辑合并，但以\"<code class=\"literal\">~</code>\"开头的行则用 <code class=\"constant\">AND</code> 逻辑合并。 若设为空，则表示清空所有已设置的 capability 集合。 若设为一个单独的 \"<code class=\"literal\">~</code>\" 字符， 则表示清空先前的所有设置，并将 capability 集合重置为包含所有的 capabilities 。 此选项不影响带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p><p>例子：如果一个单元拥有如下设置： </p><pre class=\"programlisting\">CapabilityBoundingSet=CAP_A CAP_BCapabilityBoundingSet=CAP_B CAP_C</pre><p> 那么表示 <code class=\"constant\">CAP_A</code>, <code class=\"constant\">CAP_B</code>, <code class=\"constant\">CAP_C</code> 全部被设置。 如果在第二行前面加上 \"<code class=\"literal\">~</code>\" 前缀： </p><pre class=\"programlisting\">CapabilityBoundingSet=CAP_A CAP_BCapabilityBoundingSet=~CAP_B CAP_C</pre><p> 那么表示仅有 <code class=\"constant\">CAP_A</code> 被设置。</p>",
                "AmbientCapabilities": "<p>设置进程的 ambient capability 集合中应该包含哪些 <a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">capabilities</span>(7)</span></a> 。 选项值是一个空格分隔的 capability 名称列表， 例如 <code class=\"constant\">CAP_SYS_ADMIN</code>, <code class=\"constant\">CAP_DAC_OVERRIDE</code>, <code class=\"constant\">CAP_SYS_PTRACE</code> 。 若多次设置此选项，则表示合并多个已设置的 ambient capability 集合(参见上文 <code class=\"varname\">CapabilityBoundingSet=</code> 的例子)。 如果列表以 \"<code class=\"literal\">~</code>\" 符号开头，那么表示取反， 也就是所有列表之外的 capabilities 将会被包含在 ambient capability 集合中。 若设为空，则表示清空所有已设置的 ambient capability 集合。 若设为一个单独的 \"<code class=\"literal\">~</code>\" 字符，则表示清空先前的所有设置，并将 ambient capability 集合重置为包含所有的 capabilities 。 注意，添加到 ambient capability 集合中的 capabilities 也会被添加到进程的 inherited capability 集合中。 你可以使用 ambient capability 集合给以普通用户身份运行的进程赋予某些 capabilities 。 注意，此时 <code class=\"constant\">keep-caps</code> 将被自动添加到 <code class=\"varname\">SecureBits=</code> 中， 以确保此处设置的 capabilities 不受用户设置的影响。 此选项不影响带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p>",
                "NoNewPrivileges": "<p>接收一个布尔值。设为 yes 表示该服务的所有进程与子进程都不能通过 <code class=\"function\">execve()</code> 调用获得任何新权限(例如通过 setuid/setgid 位或者文件系统 capability)。 该选项是最简单也是最有效的防止进程提升权限的方法。 默认值为 no ，但是，当 <code class=\"varname\">SystemCallFilter=</code>, <code class=\"varname\">SystemCallArchitectures=</code>, <code class=\"varname\">RestrictAddressFamilies=</code>, <code class=\"varname\">RestrictNamespaces=</code>, <code class=\"varname\">PrivateDevices=</code>, <code class=\"varname\">ProtectKernelTunables=</code>, <code class=\"varname\">ProtectKernelModules=</code>, <code class=\"varname\">MemoryDenyWriteExecute=</code>, <code class=\"varname\">RestrictRealtime=</code>, <code class=\"varname\">LockPersonality=</code> 之一被开启的时候，此选项将会被自动强制设为 yes (不过 <span class=\"command\"><strong>systemctl show</strong></span> 依然显示此处设置的值)。参见 <a class=\"ulink\" href=\"https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html\" target=\"_top\">No New Privileges Flag</a> </p>",
                "SecureBits": "<p>设置进程的安全位。值是一个空格分隔的列表。 可用列表项如下： <code class=\"option\">keep-caps</code>, <code class=\"option\">keep-caps-locked</code>, <code class=\"option\">no-setuid-fixup</code>, <code class=\"option\">no-setuid-fixup-locked</code>, <code class=\"option\">noroot</code>, <code class=\"option\">noroot-locked</code> 。可以多次使用此选项，以合并(OR)多个安全位。 若设为空，则表示将安全位重置为\"0\"。 此选项不影响带有 \"<code class=\"literal\">+</code>\" 前缀的命令。参见 <a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">capabilities</span>(7)</span></a> 手册。</p>",
                "SELinuxContext": "<p>设置进程的 SELinux 安全上下文。 设置此选项会覆盖自动域名转换，不过，安全策略依然需要对转换进行授权。 此选项仅在 SELinux 确实被开启的情况下才有意义。若加上 \"<code class=\"literal\">-</code>\" 前缀则表示忽略一切错误。 此选项不影响带有 \"<code class=\"literal\">+</code>\" 前缀的命令。详见 <a href=\"https://linux.die.net/man/3/setexeccon\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setexeccon</span>(3)</span></a> 文档。</p>",
                "AppArmorProfile": "<p>设置进程的 profile 名称，进程将在启动时切换到此 profile 。 设置的 profile 必须已经加载到内核中，否则该单元将无法启动。 此选项仅在 AppArmor 确实被开启的情况下才有意义。若加上 \"<code class=\"literal\">-</code>\" 前缀则表示忽略一切错误。 此选项不影响带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p>",
                "SmackProcessLabel": "<p>设置进程的 <code class=\"option\">SMACK64</code> 安全标签。 进程将以设定的标签启动，SMACK 将会根据此标签决定是否允许该进程启动。 若允许，进程将继续以此标签运行，除非该可执行文件有其自身的 <code class=\"option\">SMACK64EXEC</code> 标签(此时将会切换到其自身标签运行)。 默认值是 systemd 的运行时标签。 该选项仅在 SMACK 已启用的情况下才有意义。</p><p>若加上 \"<code class=\"literal\">-</code>\" 前缀则表示忽略一切错误。 设为空表示撤消先前的设置。 此选项不影响带有 \"<code class=\"literal\">+</code>\" 前缀的命令。</p>",
                "LimitCPU": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitFSIZE": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitDATA": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitSTACK": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitCORE": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitRSS": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitNOFILE": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitAS": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitNPROC": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitMEMLOCK": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitLOCKS": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitSIGPENDING": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitMSGQUEUE": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitNICE": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitRTPRIO": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "LimitRTTIME": "<p>设置进程的各种软/硬资源限制。 详见 <a href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a> 手册。 这些指令的值有两种表示法，一个单独的 <code class=\"option\">value</code> 值表示将软硬两种限制设为同一个值。 而冒号分隔的 <code class=\"option\">soft:hard</code> 值表示分别设置软限制与硬限制(例如 LimitAS=4G:16G)。 特殊值 <code class=\"option\">infinity</code> 表示没有限制。 对于以字节为单位的选项，可以使用以1024为基数的 K, M, G, T, P, E 后缀(例如 LimitAS=16G)。 对于时间限制，可以加上 \"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天), \"w\"(周) 等明确的时间单位后缀(<a href=\"systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a>)。 如果仅设置了一个整数而没有单位，那么对于 <code class=\"varname\">LimitCPU=</code> 来说默认单位是秒。 而对于 <code class=\"varname\">LimitRTTIME=</code> 来说默认单位是微秒(百万分之一秒)。 注意，这些资源限制值的实际效果可能会受到各自有效粒度的影响。 例如 <code class=\"varname\">LimitCPU=</code> 所设置的时间会被向上取整到一秒钟的整数倍。 <code class=\"varname\">LimitNICE=</code> 的值有两种表示法： 可以设为带有 \"<code class=\"literal\">+</code>\" 或 \"<code class=\"literal\">-</code>\" 前缀的谦让值(介于 -20 到 19 之间)。 也可以设为无前缀的原始资源限制参数(介于 1 到 40 之间)。</p><p>注意，对进程的资源限制是针对单个进程的。当父进程派生出一个子进程的时候， 子进程便获得了一个全新的资源集(重新计算资源限制)，而不是共享父进程的资源限制，这可能会导致资源超限。 而且 <code class=\"varname\">LimitRSS=</code> 在Linux平台是没有意义的(因为没有被Linux实现)。 建议使用 <a href=\"systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a> 中的资源限制方法，而不是此处这些针对单个进程的限制指令。因为前者的限制是针对整个单元的，并且可以在运行时动态调整，所以是更好的选择。 例如 <code class=\"varname\">MemoryLimit=</code> 就是对 <code class=\"varname\">LimitRSS=</code> 更好的替代。</p><p>对于系统单元来说，可以自由地设置资源限制。 而对于用户单元(也就是由 <a href=\"systemd.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd</span>(1)</span></a> 用户实例运行的单元)来说， 只能在操作系统分配给该用户的全部资源范围内，进一步限制单元的资源消耗。</p><p>对于一个单元来说，未明确限制的资源的默认值由 <a href=\"systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> 中的 <code class=\"varname\">DefaultLimitCPU=</code>, <code class=\"varname\">DefaultLimitFSIZE=</code>, … 系列选项的值确定。 而这一系列选项的默认值则 取决于底层操作系统的配置(全系统或针对单个用户)。</p><div class=\"table\"><a name=\"id-1.12.2.1.17.5\"></a><p class=\"title\"><b>表&nbsp;1.&nbsp;资源限制指令、对应的 <span class=\"command\">ulimit</span> 命令、单位</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"资源限制指令、对应的 ulimit 命令、单位\" border=\"1\"><colgroup><col class=\"directive\"><col class=\"equivalent\"><col class=\"unit\"></colgroup><thead><tr><th>指令</th><th>等价的 <span class=\"command\"><strong>ulimit</strong></span> 命令</th><th>单位</th></tr></thead><tbody><tr><td>LimitCPU=</td><td>ulimit -t</td><td>秒</td></tr><tr><td>LimitFSIZE=</td><td>ulimit -f</td><td>字节</td></tr><tr><td>LimitDATA=</td><td>ulimit -d</td><td>字节</td></tr><tr><td>LimitSTACK=</td><td>ulimit -s</td><td>字节</td></tr><tr><td>LimitCORE=</td><td>ulimit -c</td><td>字节</td></tr><tr><td>LimitRSS=</td><td>ulimit -m</td><td>字节</td></tr><tr><td>LimitNOFILE=</td><td>ulimit -n</td><td>文件描述符的数量</td></tr><tr><td>LimitAS=</td><td>ulimit -v</td><td>字节</td></tr><tr><td>LimitNPROC=</td><td>ulimit -u</td><td>进程的数量</td></tr><tr><td>LimitMEMLOCK=</td><td>ulimit -l</td><td>字节</td></tr><tr><td>LimitLOCKS=</td><td>ulimit -x</td><td>锁的数量</td></tr><tr><td>LimitSIGPENDING=</td><td>ulimit -i</td><td>信号队列的长度(排队的信号数量)</td></tr><tr><td>LimitMSGQUEUE=</td><td>ulimit -q</td><td>字节</td></tr><tr><td>LimitNICE=</td><td>ulimit -e</td><td>谦让度</td></tr><tr><td>LimitRTPRIO=</td><td>ulimit -r</td><td>实时优先级</td></tr><tr><td>LimitRTTIME=</td><td>不存在</td><td>微秒</td></tr></tbody></table></div></div><br class=\"table-break\">",
                "UMask": "<p>设置文件创建掩码。详见 <a href=\"http://man7.org/linux/man-pages/man2/umask.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">umask</span>(2)</span></a> 手册。默认值为 0022</p>",
                "CoredumpFilter": "<p>Controls which types of memory mappings will be saved if the process dumps core\n        (using the <code class=\"filename\">/proc/<em class=\"replaceable\"><code>pid</code></em>/coredump_filter</code> file). Takes a\n        whitespace-separated combination of mapping type names or numbers (with the default base 16). Mapping\n        type names are <code class=\"constant\">private-anonymous</code>, <code class=\"constant\">shared-anonymous</code>,\n        <code class=\"constant\">private-file-backed</code>, <code class=\"constant\">shared-file-backed</code>,\n        <code class=\"constant\">elf-headers</code>, <code class=\"constant\">private-huge</code>,\n        <code class=\"constant\">shared-huge</code>, <code class=\"constant\">private-dax</code>, <code class=\"constant\">shared-dax</code>,\n        and the special values <code class=\"constant\">all</code> (all types) and <code class=\"constant\">default</code> (the\n        kernel default of \"<code class=\"literal\"><code class=\"constant\">private-anonymous</code>\n        <code class=\"constant\">shared-anonymous</code> <code class=\"constant\">elf-headers</code>\n        <code class=\"constant\">private-huge</code></code>\"). See\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man5/core.5.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">core</span>(5)</span></a>\n        for the meaning of the mapping types. When specified multiple times, all specified masks are\n        ORed. When not set, or if the empty value is assigned, the inherited value is not changed.</p><div class=\"example\"><a target=\"__blank\" name=\"id-1.12.2.3.2.2\"></a><p class=\"title\"><b>Example&nbsp;1.&nbsp;Add DAX pages to the dump filter</b></p><div class=\"example-contents\"><pre class=\"programlisting\">CoredumpFilter=default private-dax shared-dax</pre></div></div><br class=\"example-break\">",
                "KeyringMode": "<p>控制如何设置服务单元的内核会话密钥环(参见 <a href=\"http://man7.org/linux/man-pages/man7/session-keyring.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">session-keyring</span>(7)</span></a> 以详细了解会话密钥环的更多详情)。可设为 <code class=\"option\">inherit</code>, <code class=\"option\">private</code>, <code class=\"option\">shared</code> 之一。 设为 <code class=\"option\">inherit</code> 表示不对密钥环做特别的设置，直接使用内核的默认行为。 设为 <code class=\"option\">private</code> 表示每调用一个服务进程，都会为其分配一个不与任何用户密钥环连接的全新会话密钥环。 建议系统服务使用此设置，以确保使用同一个用户身份(通常是 root)运行的多个不同服务之间不会共享各自的密钥。 设为 <code class=\"option\">shared</code> 表示与 <code class=\"option\">private</code> 类似，也会为每一个服务进程分配一个会话密钥环， 但不同之处在于，<code class=\"varname\">User=</code> 用户的密钥环将会被连接到这个新分配的密钥环之中， 从而允许单元中的进程请求分配给 <code class=\"varname\">User=</code> 用户的密钥。 除非设为 <code class=\"option\">inherit</code> 模式，并且将单元的 <code class=\"varname\">$INVOCATION_ID</code> 值按照 \"<code class=\"literal\">invocation_id</code>\" 名称， 作为一个受保护的密钥，添加到新创建的会话密钥环中； 否则，在 <code class=\"option\">shared</code> 模式下，使用同一个用户身份运行的多个不同服务之间会共享各自的密钥。 对于系统服务单元来说，默认值是 <code class=\"option\">private</code> ； 对于非服务单元以及用户单元来说，默认值是 <code class=\"option\">inherit</code> 。</p>",
                "OOMScoreAdjust": "<p>设置进程因内存不足而被杀死的优先级。 可设为 -1000(禁止被杀死) 到 1000(最先被杀死)之间的整数值。 详见 <a class=\"ulink\" href=\"https://www.kernel.org/doc/Documentation/filesystems/proc.txt\" target=\"_top\">proc.txt</a> 文档。</p>",
                "TimerSlackNSec": "<p>设置进程的定时器粒度。 详见 <a href=\"http://man7.org/linux/man-pages/man2/prctl.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">prctl</span>(2)</span></a> 手册。 定时器的粒度大小控制着进程被操作系统定时器唤醒的时间精度(也就是最小时间片)。如果仅设为一个整数而没有单位，那么单位是纳秒。 也可以在整数后面加上时间单位后缀：\"ms\"(毫秒), \"s\"(秒), \"min\"(分钟), \"h\"(小时), \"d\"(天)</p>",
                "Personality": "<p>当进程调用 <a href=\"http://man7.org/linux/man-pages/man2/uname.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">uname</span>(2)</span></a> 时， 应该返回哪种体系结构标识符，可设为 <code class=\"constant\">x86</code>, <code class=\"constant\">x86-64</code>, <code class=\"constant\">ppc</code>, <code class=\"constant\">ppc-le</code>, <code class=\"constant\">ppc64</code>, <code class=\"constant\">ppc64-le</code>, <code class=\"constant\">s390</code>, <code class=\"constant\">s390x</code> 之一。 必须按照硬件的实际情况设置此选项。 通常，64位架构都隐含支持与其对应的32位架构。 例如 <code class=\"constant\">x86-64</code> 同时支持 <code class=\"constant\">x86-64</code> 与 <code class=\"constant\">x86</code> 。 这主要用于在 x86-64 平台上运行 32-bit 服务的场合。 若未设置，则返回未经修改的原始值(取决于主机的内核)。</p>",
                "IgnoreSIGPIPE": "<p>接受一个布尔值。 默认值 yes 表示忽略发送给进程的 <code class=\"constant\">SIGPIPE</code> 信号， 因为该信号通常仅对shell管道有意义。</p>",
                "Nice": "<p>设置进程的默认谦让值。 可以设为 -20(最高优先级) 到 19(最低优先级) 之间的整数值。详见 <a href=\"http://man7.org/linux/man-pages/man2/setpriority.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setpriority</span>(2)</span></a> 手册。</p>",
                "CPUSchedulingPolicy": "<p>设置进程的CPU调度策略。可设为 <code class=\"option\">other</code>, <code class=\"option\">batch</code>, <code class=\"option\">idle</code>, <code class=\"option\">fifo</code>, <code class=\"option\">rr</code> 之一。详见 <a href=\"http://man7.org/linux/man-pages/man2/sched_setscheduler.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sched_setscheduler</span>(2)</span></a> 手册。</p>",
                "CPUSchedulingPriority": "<p>设置进程的CPU调度优先级。有效值范围取决于 CPUSchedulingPolicy= 的设置。 例如对于实时调度策略(fifo, rr)来说，可以设为 1(最低优先级) 到 99(最高优先级) 之间的整数。 详见 <a href=\"http://man7.org/linux/man-pages/man2/sched_setscheduler.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sched_setscheduler</span>(2)</span></a> 手册。</p>",
                "CPUSchedulingResetOnFork": "<p>是否为派生(fork)的子进程重置CPU调度策略与优先级。若设为 yes 则表示：当父进程的CPU调度策略与优先级高于默认值时， 将重置派生的子进程的CPU调度策略与优先级为默认值。这样就可以阻止派生的子进程继承不应有的高优先级。详见 <a href=\"http://man7.org/linux/man-pages/man2/sched_setscheduler.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sched_setscheduler</span>(2)</span></a> 手册。 默认值为 no 。</p>",
                "CPUAffinity": "<p>设置进程的CPU关联性。值是一个逗号分隔的CPU编号与CPU范围列表。 CPU范围可以用\"编号下限-编号上限\"格式表示。 若多次设置此选项，则表示将多个选项值以掩码的方式相融合。 若设为空，则表示重置掩码并清空先前设置的所有CPU编号列表。 详见 <a href=\"http://man7.org/linux/man-pages/man2/sched_setaffinity.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sched_setaffinity</span>(2)</span></a> 手册。</p>",
                "NUMAPolicy": "<p>Controls the NUMA memory policy of the executed processes. Takes a policy type, one of:\n        <code class=\"option\">default</code>, <code class=\"option\">preferred</code>, <code class=\"option\">bind</code>, <code class=\"option\">interleave</code> and\n        <code class=\"option\">local</code>. A list of NUMA nodes that should be associated with the policy must be specified\n        in <code class=\"varname\">NUMAMask=</code>. For more details on each policy please see,\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/set_mempolicy.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">set_mempolicy</span>(2)</span></a>. For overall\n        overview of NUMA support in Linux see,\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/numa.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">numa</span>(7)</span></a>.\n        </p>",
                "NUMAMask": "<p>Controls the NUMA node list which will be applied alongside with selected NUMA policy.\n        Takes a list of NUMA nodes and has the same syntax as a list of CPUs for <code class=\"varname\">CPUAffinity=</code>\n        option. Note that the list of NUMA nodes is not required for <code class=\"option\">default</code> and <code class=\"option\">local</code>\n        policies and for <code class=\"option\">preferred</code> policy we expect a single NUMA node.</p>",
                "IOSchedulingClass": "<p>设置进程的IO调度类型。可设为 0 到 3 之间的数字或对应的 <code class=\"option\">none</code>, <code class=\"option\">realtime</code>, <code class=\"option\">best-effort</code>, <code class=\"option\">idle</code> 字符串。将此选项设为空字符串表示同时撤销先前给 <code class=\"varname\">IOSchedulingClass=</code> 与 <code class=\"varname\">IOSchedulingPriority=</code> 设置的值。详见 <a href=\"http://man7.org/linux/man-pages/man2/ioprio_set.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">ioprio_set</span>(2)</span></a> 手册。</p>",
                "IOSchedulingPriority": "<p>设置进程的IO调度优先级。可设为 0(最高优先级) 到 7(最低优先级) 之间的数字。 实际可用的优先级取决于 <code class=\"varname\">IOSchedulingClass=</code> 的设置。 将此选项设为空字符串表示同时撤销先前给 <code class=\"varname\">IOSchedulingClass=</code> 与 <code class=\"varname\">IOSchedulingPriority=</code> 设置的值。 参见 <a href=\"http://man7.org/linux/man-pages/man2/ioprio_set.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">ioprio_set</span>(2)</span></a> 手册。</p>",
                "ProtectSystem": "<p>可设为布尔值或 \"<code class=\"literal\">full</code>\" 或 \"<code class=\"literal\">strict</code>\" 之一。 若设为 yes 则表示为该单元内的进程以只读模式挂载 <code class=\"filename\">/usr</code> 与 <code class=\"filename\">/boot</code> 目录。 若设为 \"<code class=\"literal\">full</code>\" 则表示为该单元内的进程以只读模式挂载 <code class=\"filename\">/etc</code> 与 <code class=\"filename\">/usr</code> 与 <code class=\"filename\">/boot</code> 目录。 若设为 \"<code class=\"literal\">strict</code>\" 则表示为该单元内的进程以只读模式挂载 除虚拟文件系统 <code class=\"filename\">/dev</code>, <code class=\"filename\">/proc</code>, <code class=\"filename\">/sys</code> 之外的所有其他目录(对这些目录可以使用 <code class=\"varname\">PrivateDevices=</code>, <code class=\"varname\">ProtectKernelTunables=</code>, <code class=\"varname\">ProtectControlGroups=</code> 进行保护)。 这样可以有效禁止该单元对操作系统、配置文件、本地挂载点进行任何修改。 推荐为所有需要长时间运行的服务开启此选项，除非该单元确实需要对系统进行修改。 开启此选项之后，还可以使用 <code class=\"varname\">ReadWritePaths=</code> 来将某些特定的目录改为读写模式。 当 <code class=\"varname\">DynamicUser=yes</code> 时，此选项的默认值为 \"yes\" ，否则默认值为 \"no\" 。 注意，此选项并不确保在任何情况下都能提供有效的保护(尤其是主机与单元间的挂载传递)， 它与 <code class=\"varname\">ReadOnlyPaths=</code> 选项 具有相同的局限性(详见后文)。</p>",
                "ProtectHome": "<p>接受一个布尔值或特殊值 \"<code class=\"literal\">read-only</code>\" 或 \"<code class=\"literal\">tmpfs</code>\" 。 设为 yes 表示对该单元内的进程屏蔽 <code class=\"filename\">/home</code>, <code class=\"filename\">/root</code>, <code class=\"filename\">/run/user</code> 目录(内容为空且不可访问)。设为 \"<code class=\"literal\">read-only</code>\" 表示这三个目录仅为只读(不可写入)。设为 \"<code class=\"literal\">tmpfs</code>\" 表示在这三个目录上挂载只读模式的临时文件系统， 这样既可以隐藏与单元内的进程无关的用户目录，又可以让 <code class=\"varname\">BindPaths=</code> 或 <code class=\"varname\">BindReadOnlyPaths=</code> 中列出的目录仍然对单元内的进程可见。</p><p>设为 \"<code class=\"literal\">yes</code>\" 相当于将这三个目录放入 <code class=\"varname\">InaccessiblePaths=</code> 中；设为 \"<code class=\"literal\">read-only</code>\" 相当于将这三个目录放入 <code class=\"varname\">ReadOnlyPaths=</code> 中；设为 \"<code class=\"literal\">tmpfs</code>\" 相当于将这三个目录放入 <code class=\"varname\">TemporaryFileSystem=</code> 中。</p><p>推荐为所有需要长时间运行的服务开启此选项(特别是面向网络的服务)，以确保其无法访问隐私数据。 当 <code class=\"varname\">DynamicUser=yes</code> 时，此选项的默认值为 \"yes\" ，否则默认值为 \"no\" 。 注意，此选项并不确保在任何情况下都能提供有效的保护(尤其是主机与单元间的挂载传递)， 它与 <code class=\"varname\">ReadOnlyPaths=</code> 选项具有相同的局限性(详见后文)。 此选项仅可用于系统单元(不适用于用户单元)。</p>",
                "RuntimeDirectory": "<p>These options take a whitespace-separated list of directory names. The specified directory\n        names must be relative, and may not include \"<code class=\"literal\">..</code>\". If set, one or more\n        directories by the specified names will be created (including their parents) below the locations\n        defined in the following table, when the unit is started. Also, the corresponding environment variable\n        is defined with the full path of directories. If multiple directories are set, then in the environment variable\n        the paths are concatenated with colon (\"<code class=\"literal\">:</code>\").</p><div class=\"table\"><a target=\"__blank\" name=\"id-1.14.4.3.6.2\"></a><p class=\"title\"><b>Table&nbsp;2.&nbsp;Automatic directory creation and environment variables</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Automatic directory creation and environment variables\" border=\"1\"><colgroup><col><col><col><col></colgroup><thead><tr><th>Directory</th><th>Below path for system units</th><th>Below path for user units</th><th>Environment variable set</th></tr></thead><tbody><tr><td><code class=\"varname\">RuntimeDirectory=</code></td><td><code class=\"filename\">/run/</code></td><td><code class=\"varname\">$XDG_RUNTIME_DIR</code></td><td><code class=\"varname\">$RUNTIME_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">StateDirectory=</code></td><td><code class=\"filename\">/var/lib/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$STATE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">CacheDirectory=</code></td><td><code class=\"filename\">/var/cache/</code></td><td><code class=\"varname\">$XDG_CACHE_HOME</code></td><td><code class=\"varname\">$CACHE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">LogsDirectory=</code></td><td><code class=\"filename\">/var/log/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code><code class=\"filename\">/log/</code></td><td><code class=\"varname\">$LOGS_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">ConfigurationDirectory=</code></td><td><code class=\"filename\">/etc/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$CONFIGURATION_DIRECTORY</code></td></tr></tbody></table></div></div><br class=\"table-break\"><p>In case of <code class=\"varname\">RuntimeDirectory=</code> the innermost subdirectories are removed when\n        the unit is stopped. It is possible to preserve the specified directories in this case if\n        <code class=\"varname\">RuntimeDirectoryPreserve=</code> is configured to <code class=\"option\">restart</code> or\n        <code class=\"option\">yes</code> (see below). The directories specified with <code class=\"varname\">StateDirectory=</code>,\n        <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>,\n        <code class=\"varname\">ConfigurationDirectory=</code> are not removed when the unit is stopped.</p><p>Except in case of <code class=\"varname\">ConfigurationDirectory=</code>, the innermost specified directories will be\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>. If the\n        specified directories already exist and their owning user or group do not match the configured ones, all files\n        and directories below the specified directories as well as the directories themselves will have their file\n        ownership recursively changed to match what is configured. As an optimization, if the specified directories are\n        already owned by the right user and group, files and directories below of them are left as-is, even if they do\n        not match what is requested. The innermost specified directories will have their access mode adjusted to the\n        what is specified in <code class=\"varname\">RuntimeDirectoryMode=</code>, <code class=\"varname\">StateDirectoryMode=</code>,\n        <code class=\"varname\">CacheDirectoryMode=</code>, <code class=\"varname\">LogsDirectoryMode=</code> and\n        <code class=\"varname\">ConfigurationDirectoryMode=</code>.</p><p>These options imply <code class=\"varname\">BindPaths=</code> for the specified paths. When combined with\n        <code class=\"varname\">RootDirectory=</code> or <code class=\"varname\">RootImage=</code> these paths always reside on the host and\n        are mounted from there into the unit's file system namespace.</p><p>If <code class=\"varname\">DynamicUser=</code> is used in conjunction with\n        <code class=\"varname\">StateDirectory=</code>, the logic for <code class=\"varname\">CacheDirectory=</code> and\n        <code class=\"varname\">LogsDirectory=</code> is slightly altered: the directories are created below\n        <code class=\"filename\">/var/lib/private</code>, <code class=\"filename\">/var/cache/private</code> and\n        <code class=\"filename\">/var/log/private</code>, respectively, which are host directories made inaccessible to\n        unprivileged users, which ensures that access to these directories cannot be gained through dynamic\n        user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from\n        perspective of the host and from inside the unit, the relevant directories hence always appear\n        directly below <code class=\"filename\">/var/lib</code>, <code class=\"filename\">/var/cache</code> and\n        <code class=\"filename\">/var/log</code>.</p><p>Use <code class=\"varname\">RuntimeDirectory=</code> to manage one or more runtime directories for the unit and bind\n        their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create\n        runtime directories in <code class=\"filename\">/run</code> due to lack of privileges, and to make sure the runtime\n        directory is cleaned up automatically after use. For runtime directories that require more complex or different\n        configuration or lifetime guarantees, please consider using\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a>.</p><p>The directories defined by these options are always created under the standard paths used by systemd\n        (<code class=\"filename\">/var</code>, <code class=\"filename\">/run</code>, <code class=\"filename\">/etc</code>, …). If the service needs\n        directories in a different location, a different mechanism has to be used to create them.</p><p><a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a> provides\n        functionality that overlaps with these options. Using these options is recommended, because the lifetime of\n        the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the\n        <code class=\"filename\">tmpfiles.d</code> configuration is executed before the unit is started.</p><p>To remove any of the directories created by these settings, use the <span class=\"command\"><strong>systemctl clean\n        …</strong></span> command on the relevant units, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> for\n        details.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar baz</pre><p>\n        the service manager creates <code class=\"filename\">/run/foo</code> (if it does not exist),\n\n        <code class=\"filename\">/run/foo/bar</code>, and <code class=\"filename\">/run/baz</code>. The\n        directories <code class=\"filename\">/run/foo/bar</code> and\n        <code class=\"filename\">/run/baz</code> except <code class=\"filename\">/run/foo</code> are\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>, and removed\n        when the service is stopped.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc</pre><p>\n        then the environment variable \"<code class=\"literal\">RUNTIME_DIRECTORY</code>\" is set with \"<code class=\"literal\">/run/foo/bar</code>\", and\n        \"<code class=\"literal\">STATE_DIRECTORY</code>\" is set with \"<code class=\"literal\">/var/lib/aaa/bbb:/var/lib/ccc</code>\".</p>",
                "StateDirectory": "<p>These options take a whitespace-separated list of directory names. The specified directory\n        names must be relative, and may not include \"<code class=\"literal\">..</code>\". If set, one or more\n        directories by the specified names will be created (including their parents) below the locations\n        defined in the following table, when the unit is started. Also, the corresponding environment variable\n        is defined with the full path of directories. If multiple directories are set, then in the environment variable\n        the paths are concatenated with colon (\"<code class=\"literal\">:</code>\").</p><div class=\"table\"><a target=\"__blank\" name=\"id-1.14.4.3.6.2\"></a><p class=\"title\"><b>Table&nbsp;2.&nbsp;Automatic directory creation and environment variables</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Automatic directory creation and environment variables\" border=\"1\"><colgroup><col><col><col><col></colgroup><thead><tr><th>Directory</th><th>Below path for system units</th><th>Below path for user units</th><th>Environment variable set</th></tr></thead><tbody><tr><td><code class=\"varname\">RuntimeDirectory=</code></td><td><code class=\"filename\">/run/</code></td><td><code class=\"varname\">$XDG_RUNTIME_DIR</code></td><td><code class=\"varname\">$RUNTIME_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">StateDirectory=</code></td><td><code class=\"filename\">/var/lib/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$STATE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">CacheDirectory=</code></td><td><code class=\"filename\">/var/cache/</code></td><td><code class=\"varname\">$XDG_CACHE_HOME</code></td><td><code class=\"varname\">$CACHE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">LogsDirectory=</code></td><td><code class=\"filename\">/var/log/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code><code class=\"filename\">/log/</code></td><td><code class=\"varname\">$LOGS_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">ConfigurationDirectory=</code></td><td><code class=\"filename\">/etc/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$CONFIGURATION_DIRECTORY</code></td></tr></tbody></table></div></div><br class=\"table-break\"><p>In case of <code class=\"varname\">RuntimeDirectory=</code> the innermost subdirectories are removed when\n        the unit is stopped. It is possible to preserve the specified directories in this case if\n        <code class=\"varname\">RuntimeDirectoryPreserve=</code> is configured to <code class=\"option\">restart</code> or\n        <code class=\"option\">yes</code> (see below). The directories specified with <code class=\"varname\">StateDirectory=</code>,\n        <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>,\n        <code class=\"varname\">ConfigurationDirectory=</code> are not removed when the unit is stopped.</p><p>Except in case of <code class=\"varname\">ConfigurationDirectory=</code>, the innermost specified directories will be\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>. If the\n        specified directories already exist and their owning user or group do not match the configured ones, all files\n        and directories below the specified directories as well as the directories themselves will have their file\n        ownership recursively changed to match what is configured. As an optimization, if the specified directories are\n        already owned by the right user and group, files and directories below of them are left as-is, even if they do\n        not match what is requested. The innermost specified directories will have their access mode adjusted to the\n        what is specified in <code class=\"varname\">RuntimeDirectoryMode=</code>, <code class=\"varname\">StateDirectoryMode=</code>,\n        <code class=\"varname\">CacheDirectoryMode=</code>, <code class=\"varname\">LogsDirectoryMode=</code> and\n        <code class=\"varname\">ConfigurationDirectoryMode=</code>.</p><p>These options imply <code class=\"varname\">BindPaths=</code> for the specified paths. When combined with\n        <code class=\"varname\">RootDirectory=</code> or <code class=\"varname\">RootImage=</code> these paths always reside on the host and\n        are mounted from there into the unit's file system namespace.</p><p>If <code class=\"varname\">DynamicUser=</code> is used in conjunction with\n        <code class=\"varname\">StateDirectory=</code>, the logic for <code class=\"varname\">CacheDirectory=</code> and\n        <code class=\"varname\">LogsDirectory=</code> is slightly altered: the directories are created below\n        <code class=\"filename\">/var/lib/private</code>, <code class=\"filename\">/var/cache/private</code> and\n        <code class=\"filename\">/var/log/private</code>, respectively, which are host directories made inaccessible to\n        unprivileged users, which ensures that access to these directories cannot be gained through dynamic\n        user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from\n        perspective of the host and from inside the unit, the relevant directories hence always appear\n        directly below <code class=\"filename\">/var/lib</code>, <code class=\"filename\">/var/cache</code> and\n        <code class=\"filename\">/var/log</code>.</p><p>Use <code class=\"varname\">RuntimeDirectory=</code> to manage one or more runtime directories for the unit and bind\n        their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create\n        runtime directories in <code class=\"filename\">/run</code> due to lack of privileges, and to make sure the runtime\n        directory is cleaned up automatically after use. For runtime directories that require more complex or different\n        configuration or lifetime guarantees, please consider using\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a>.</p><p>The directories defined by these options are always created under the standard paths used by systemd\n        (<code class=\"filename\">/var</code>, <code class=\"filename\">/run</code>, <code class=\"filename\">/etc</code>, …). If the service needs\n        directories in a different location, a different mechanism has to be used to create them.</p><p><a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a> provides\n        functionality that overlaps with these options. Using these options is recommended, because the lifetime of\n        the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the\n        <code class=\"filename\">tmpfiles.d</code> configuration is executed before the unit is started.</p><p>To remove any of the directories created by these settings, use the <span class=\"command\"><strong>systemctl clean\n        …</strong></span> command on the relevant units, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> for\n        details.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar baz</pre><p>\n        the service manager creates <code class=\"filename\">/run/foo</code> (if it does not exist),\n\n        <code class=\"filename\">/run/foo/bar</code>, and <code class=\"filename\">/run/baz</code>. The\n        directories <code class=\"filename\">/run/foo/bar</code> and\n        <code class=\"filename\">/run/baz</code> except <code class=\"filename\">/run/foo</code> are\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>, and removed\n        when the service is stopped.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc</pre><p>\n        then the environment variable \"<code class=\"literal\">RUNTIME_DIRECTORY</code>\" is set with \"<code class=\"literal\">/run/foo/bar</code>\", and\n        \"<code class=\"literal\">STATE_DIRECTORY</code>\" is set with \"<code class=\"literal\">/var/lib/aaa/bbb:/var/lib/ccc</code>\".</p>",
                "CacheDirectory": "<p>These options take a whitespace-separated list of directory names. The specified directory\n        names must be relative, and may not include \"<code class=\"literal\">..</code>\". If set, one or more\n        directories by the specified names will be created (including their parents) below the locations\n        defined in the following table, when the unit is started. Also, the corresponding environment variable\n        is defined with the full path of directories. If multiple directories are set, then in the environment variable\n        the paths are concatenated with colon (\"<code class=\"literal\">:</code>\").</p><div class=\"table\"><a target=\"__blank\" name=\"id-1.14.4.3.6.2\"></a><p class=\"title\"><b>Table&nbsp;2.&nbsp;Automatic directory creation and environment variables</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Automatic directory creation and environment variables\" border=\"1\"><colgroup><col><col><col><col></colgroup><thead><tr><th>Directory</th><th>Below path for system units</th><th>Below path for user units</th><th>Environment variable set</th></tr></thead><tbody><tr><td><code class=\"varname\">RuntimeDirectory=</code></td><td><code class=\"filename\">/run/</code></td><td><code class=\"varname\">$XDG_RUNTIME_DIR</code></td><td><code class=\"varname\">$RUNTIME_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">StateDirectory=</code></td><td><code class=\"filename\">/var/lib/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$STATE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">CacheDirectory=</code></td><td><code class=\"filename\">/var/cache/</code></td><td><code class=\"varname\">$XDG_CACHE_HOME</code></td><td><code class=\"varname\">$CACHE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">LogsDirectory=</code></td><td><code class=\"filename\">/var/log/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code><code class=\"filename\">/log/</code></td><td><code class=\"varname\">$LOGS_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">ConfigurationDirectory=</code></td><td><code class=\"filename\">/etc/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$CONFIGURATION_DIRECTORY</code></td></tr></tbody></table></div></div><br class=\"table-break\"><p>In case of <code class=\"varname\">RuntimeDirectory=</code> the innermost subdirectories are removed when\n        the unit is stopped. It is possible to preserve the specified directories in this case if\n        <code class=\"varname\">RuntimeDirectoryPreserve=</code> is configured to <code class=\"option\">restart</code> or\n        <code class=\"option\">yes</code> (see below). The directories specified with <code class=\"varname\">StateDirectory=</code>,\n        <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>,\n        <code class=\"varname\">ConfigurationDirectory=</code> are not removed when the unit is stopped.</p><p>Except in case of <code class=\"varname\">ConfigurationDirectory=</code>, the innermost specified directories will be\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>. If the\n        specified directories already exist and their owning user or group do not match the configured ones, all files\n        and directories below the specified directories as well as the directories themselves will have their file\n        ownership recursively changed to match what is configured. As an optimization, if the specified directories are\n        already owned by the right user and group, files and directories below of them are left as-is, even if they do\n        not match what is requested. The innermost specified directories will have their access mode adjusted to the\n        what is specified in <code class=\"varname\">RuntimeDirectoryMode=</code>, <code class=\"varname\">StateDirectoryMode=</code>,\n        <code class=\"varname\">CacheDirectoryMode=</code>, <code class=\"varname\">LogsDirectoryMode=</code> and\n        <code class=\"varname\">ConfigurationDirectoryMode=</code>.</p><p>These options imply <code class=\"varname\">BindPaths=</code> for the specified paths. When combined with\n        <code class=\"varname\">RootDirectory=</code> or <code class=\"varname\">RootImage=</code> these paths always reside on the host and\n        are mounted from there into the unit's file system namespace.</p><p>If <code class=\"varname\">DynamicUser=</code> is used in conjunction with\n        <code class=\"varname\">StateDirectory=</code>, the logic for <code class=\"varname\">CacheDirectory=</code> and\n        <code class=\"varname\">LogsDirectory=</code> is slightly altered: the directories are created below\n        <code class=\"filename\">/var/lib/private</code>, <code class=\"filename\">/var/cache/private</code> and\n        <code class=\"filename\">/var/log/private</code>, respectively, which are host directories made inaccessible to\n        unprivileged users, which ensures that access to these directories cannot be gained through dynamic\n        user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from\n        perspective of the host and from inside the unit, the relevant directories hence always appear\n        directly below <code class=\"filename\">/var/lib</code>, <code class=\"filename\">/var/cache</code> and\n        <code class=\"filename\">/var/log</code>.</p><p>Use <code class=\"varname\">RuntimeDirectory=</code> to manage one or more runtime directories for the unit and bind\n        their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create\n        runtime directories in <code class=\"filename\">/run</code> due to lack of privileges, and to make sure the runtime\n        directory is cleaned up automatically after use. For runtime directories that require more complex or different\n        configuration or lifetime guarantees, please consider using\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a>.</p><p>The directories defined by these options are always created under the standard paths used by systemd\n        (<code class=\"filename\">/var</code>, <code class=\"filename\">/run</code>, <code class=\"filename\">/etc</code>, …). If the service needs\n        directories in a different location, a different mechanism has to be used to create them.</p><p><a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a> provides\n        functionality that overlaps with these options. Using these options is recommended, because the lifetime of\n        the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the\n        <code class=\"filename\">tmpfiles.d</code> configuration is executed before the unit is started.</p><p>To remove any of the directories created by these settings, use the <span class=\"command\"><strong>systemctl clean\n        …</strong></span> command on the relevant units, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> for\n        details.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar baz</pre><p>\n        the service manager creates <code class=\"filename\">/run/foo</code> (if it does not exist),\n\n        <code class=\"filename\">/run/foo/bar</code>, and <code class=\"filename\">/run/baz</code>. The\n        directories <code class=\"filename\">/run/foo/bar</code> and\n        <code class=\"filename\">/run/baz</code> except <code class=\"filename\">/run/foo</code> are\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>, and removed\n        when the service is stopped.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc</pre><p>\n        then the environment variable \"<code class=\"literal\">RUNTIME_DIRECTORY</code>\" is set with \"<code class=\"literal\">/run/foo/bar</code>\", and\n        \"<code class=\"literal\">STATE_DIRECTORY</code>\" is set with \"<code class=\"literal\">/var/lib/aaa/bbb:/var/lib/ccc</code>\".</p>",
                "LogsDirectory": "<p>These options take a whitespace-separated list of directory names. The specified directory\n        names must be relative, and may not include \"<code class=\"literal\">..</code>\". If set, one or more\n        directories by the specified names will be created (including their parents) below the locations\n        defined in the following table, when the unit is started. Also, the corresponding environment variable\n        is defined with the full path of directories. If multiple directories are set, then in the environment variable\n        the paths are concatenated with colon (\"<code class=\"literal\">:</code>\").</p><div class=\"table\"><a target=\"__blank\" name=\"id-1.14.4.3.6.2\"></a><p class=\"title\"><b>Table&nbsp;2.&nbsp;Automatic directory creation and environment variables</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Automatic directory creation and environment variables\" border=\"1\"><colgroup><col><col><col><col></colgroup><thead><tr><th>Directory</th><th>Below path for system units</th><th>Below path for user units</th><th>Environment variable set</th></tr></thead><tbody><tr><td><code class=\"varname\">RuntimeDirectory=</code></td><td><code class=\"filename\">/run/</code></td><td><code class=\"varname\">$XDG_RUNTIME_DIR</code></td><td><code class=\"varname\">$RUNTIME_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">StateDirectory=</code></td><td><code class=\"filename\">/var/lib/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$STATE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">CacheDirectory=</code></td><td><code class=\"filename\">/var/cache/</code></td><td><code class=\"varname\">$XDG_CACHE_HOME</code></td><td><code class=\"varname\">$CACHE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">LogsDirectory=</code></td><td><code class=\"filename\">/var/log/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code><code class=\"filename\">/log/</code></td><td><code class=\"varname\">$LOGS_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">ConfigurationDirectory=</code></td><td><code class=\"filename\">/etc/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$CONFIGURATION_DIRECTORY</code></td></tr></tbody></table></div></div><br class=\"table-break\"><p>In case of <code class=\"varname\">RuntimeDirectory=</code> the innermost subdirectories are removed when\n        the unit is stopped. It is possible to preserve the specified directories in this case if\n        <code class=\"varname\">RuntimeDirectoryPreserve=</code> is configured to <code class=\"option\">restart</code> or\n        <code class=\"option\">yes</code> (see below). The directories specified with <code class=\"varname\">StateDirectory=</code>,\n        <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>,\n        <code class=\"varname\">ConfigurationDirectory=</code> are not removed when the unit is stopped.</p><p>Except in case of <code class=\"varname\">ConfigurationDirectory=</code>, the innermost specified directories will be\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>. If the\n        specified directories already exist and their owning user or group do not match the configured ones, all files\n        and directories below the specified directories as well as the directories themselves will have their file\n        ownership recursively changed to match what is configured. As an optimization, if the specified directories are\n        already owned by the right user and group, files and directories below of them are left as-is, even if they do\n        not match what is requested. The innermost specified directories will have their access mode adjusted to the\n        what is specified in <code class=\"varname\">RuntimeDirectoryMode=</code>, <code class=\"varname\">StateDirectoryMode=</code>,\n        <code class=\"varname\">CacheDirectoryMode=</code>, <code class=\"varname\">LogsDirectoryMode=</code> and\n        <code class=\"varname\">ConfigurationDirectoryMode=</code>.</p><p>These options imply <code class=\"varname\">BindPaths=</code> for the specified paths. When combined with\n        <code class=\"varname\">RootDirectory=</code> or <code class=\"varname\">RootImage=</code> these paths always reside on the host and\n        are mounted from there into the unit's file system namespace.</p><p>If <code class=\"varname\">DynamicUser=</code> is used in conjunction with\n        <code class=\"varname\">StateDirectory=</code>, the logic for <code class=\"varname\">CacheDirectory=</code> and\n        <code class=\"varname\">LogsDirectory=</code> is slightly altered: the directories are created below\n        <code class=\"filename\">/var/lib/private</code>, <code class=\"filename\">/var/cache/private</code> and\n        <code class=\"filename\">/var/log/private</code>, respectively, which are host directories made inaccessible to\n        unprivileged users, which ensures that access to these directories cannot be gained through dynamic\n        user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from\n        perspective of the host and from inside the unit, the relevant directories hence always appear\n        directly below <code class=\"filename\">/var/lib</code>, <code class=\"filename\">/var/cache</code> and\n        <code class=\"filename\">/var/log</code>.</p><p>Use <code class=\"varname\">RuntimeDirectory=</code> to manage one or more runtime directories for the unit and bind\n        their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create\n        runtime directories in <code class=\"filename\">/run</code> due to lack of privileges, and to make sure the runtime\n        directory is cleaned up automatically after use. For runtime directories that require more complex or different\n        configuration or lifetime guarantees, please consider using\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a>.</p><p>The directories defined by these options are always created under the standard paths used by systemd\n        (<code class=\"filename\">/var</code>, <code class=\"filename\">/run</code>, <code class=\"filename\">/etc</code>, …). If the service needs\n        directories in a different location, a different mechanism has to be used to create them.</p><p><a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a> provides\n        functionality that overlaps with these options. Using these options is recommended, because the lifetime of\n        the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the\n        <code class=\"filename\">tmpfiles.d</code> configuration is executed before the unit is started.</p><p>To remove any of the directories created by these settings, use the <span class=\"command\"><strong>systemctl clean\n        …</strong></span> command on the relevant units, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> for\n        details.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar baz</pre><p>\n        the service manager creates <code class=\"filename\">/run/foo</code> (if it does not exist),\n\n        <code class=\"filename\">/run/foo/bar</code>, and <code class=\"filename\">/run/baz</code>. The\n        directories <code class=\"filename\">/run/foo/bar</code> and\n        <code class=\"filename\">/run/baz</code> except <code class=\"filename\">/run/foo</code> are\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>, and removed\n        when the service is stopped.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc</pre><p>\n        then the environment variable \"<code class=\"literal\">RUNTIME_DIRECTORY</code>\" is set with \"<code class=\"literal\">/run/foo/bar</code>\", and\n        \"<code class=\"literal\">STATE_DIRECTORY</code>\" is set with \"<code class=\"literal\">/var/lib/aaa/bbb:/var/lib/ccc</code>\".</p>",
                "ConfigurationDirectory": "<p>These options take a whitespace-separated list of directory names. The specified directory\n        names must be relative, and may not include \"<code class=\"literal\">..</code>\". If set, one or more\n        directories by the specified names will be created (including their parents) below the locations\n        defined in the following table, when the unit is started. Also, the corresponding environment variable\n        is defined with the full path of directories. If multiple directories are set, then in the environment variable\n        the paths are concatenated with colon (\"<code class=\"literal\">:</code>\").</p><div class=\"table\"><a target=\"__blank\" name=\"id-1.14.4.3.6.2\"></a><p class=\"title\"><b>Table&nbsp;2.&nbsp;Automatic directory creation and environment variables</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Automatic directory creation and environment variables\" border=\"1\"><colgroup><col><col><col><col></colgroup><thead><tr><th>Directory</th><th>Below path for system units</th><th>Below path for user units</th><th>Environment variable set</th></tr></thead><tbody><tr><td><code class=\"varname\">RuntimeDirectory=</code></td><td><code class=\"filename\">/run/</code></td><td><code class=\"varname\">$XDG_RUNTIME_DIR</code></td><td><code class=\"varname\">$RUNTIME_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">StateDirectory=</code></td><td><code class=\"filename\">/var/lib/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$STATE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">CacheDirectory=</code></td><td><code class=\"filename\">/var/cache/</code></td><td><code class=\"varname\">$XDG_CACHE_HOME</code></td><td><code class=\"varname\">$CACHE_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">LogsDirectory=</code></td><td><code class=\"filename\">/var/log/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code><code class=\"filename\">/log/</code></td><td><code class=\"varname\">$LOGS_DIRECTORY</code></td></tr><tr><td><code class=\"varname\">ConfigurationDirectory=</code></td><td><code class=\"filename\">/etc/</code></td><td><code class=\"varname\">$XDG_CONFIG_HOME</code></td><td><code class=\"varname\">$CONFIGURATION_DIRECTORY</code></td></tr></tbody></table></div></div><br class=\"table-break\"><p>In case of <code class=\"varname\">RuntimeDirectory=</code> the innermost subdirectories are removed when\n        the unit is stopped. It is possible to preserve the specified directories in this case if\n        <code class=\"varname\">RuntimeDirectoryPreserve=</code> is configured to <code class=\"option\">restart</code> or\n        <code class=\"option\">yes</code> (see below). The directories specified with <code class=\"varname\">StateDirectory=</code>,\n        <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>,\n        <code class=\"varname\">ConfigurationDirectory=</code> are not removed when the unit is stopped.</p><p>Except in case of <code class=\"varname\">ConfigurationDirectory=</code>, the innermost specified directories will be\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>. If the\n        specified directories already exist and their owning user or group do not match the configured ones, all files\n        and directories below the specified directories as well as the directories themselves will have their file\n        ownership recursively changed to match what is configured. As an optimization, if the specified directories are\n        already owned by the right user and group, files and directories below of them are left as-is, even if they do\n        not match what is requested. The innermost specified directories will have their access mode adjusted to the\n        what is specified in <code class=\"varname\">RuntimeDirectoryMode=</code>, <code class=\"varname\">StateDirectoryMode=</code>,\n        <code class=\"varname\">CacheDirectoryMode=</code>, <code class=\"varname\">LogsDirectoryMode=</code> and\n        <code class=\"varname\">ConfigurationDirectoryMode=</code>.</p><p>These options imply <code class=\"varname\">BindPaths=</code> for the specified paths. When combined with\n        <code class=\"varname\">RootDirectory=</code> or <code class=\"varname\">RootImage=</code> these paths always reside on the host and\n        are mounted from there into the unit's file system namespace.</p><p>If <code class=\"varname\">DynamicUser=</code> is used in conjunction with\n        <code class=\"varname\">StateDirectory=</code>, the logic for <code class=\"varname\">CacheDirectory=</code> and\n        <code class=\"varname\">LogsDirectory=</code> is slightly altered: the directories are created below\n        <code class=\"filename\">/var/lib/private</code>, <code class=\"filename\">/var/cache/private</code> and\n        <code class=\"filename\">/var/log/private</code>, respectively, which are host directories made inaccessible to\n        unprivileged users, which ensures that access to these directories cannot be gained through dynamic\n        user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from\n        perspective of the host and from inside the unit, the relevant directories hence always appear\n        directly below <code class=\"filename\">/var/lib</code>, <code class=\"filename\">/var/cache</code> and\n        <code class=\"filename\">/var/log</code>.</p><p>Use <code class=\"varname\">RuntimeDirectory=</code> to manage one or more runtime directories for the unit and bind\n        their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create\n        runtime directories in <code class=\"filename\">/run</code> due to lack of privileges, and to make sure the runtime\n        directory is cleaned up automatically after use. For runtime directories that require more complex or different\n        configuration or lifetime guarantees, please consider using\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a>.</p><p>The directories defined by these options are always created under the standard paths used by systemd\n        (<code class=\"filename\">/var</code>, <code class=\"filename\">/run</code>, <code class=\"filename\">/etc</code>, …). If the service needs\n        directories in a different location, a different mechanism has to be used to create them.</p><p><a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">tmpfiles.d</span>(5)</span></a> provides\n        functionality that overlaps with these options. Using these options is recommended, because the lifetime of\n        the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the\n        <code class=\"filename\">tmpfiles.d</code> configuration is executed before the unit is started.</p><p>To remove any of the directories created by these settings, use the <span class=\"command\"><strong>systemctl clean\n        …</strong></span> command on the relevant units, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> for\n        details.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar baz</pre><p>\n        the service manager creates <code class=\"filename\">/run/foo</code> (if it does not exist),\n\n        <code class=\"filename\">/run/foo/bar</code>, and <code class=\"filename\">/run/baz</code>. The\n        directories <code class=\"filename\">/run/foo/bar</code> and\n        <code class=\"filename\">/run/baz</code> except <code class=\"filename\">/run/foo</code> are\n        owned by the user and group specified in <code class=\"varname\">User=</code> and <code class=\"varname\">Group=</code>, and removed\n        when the service is stopped.</p><p>Example: if a system service unit has the following,\n        </p><pre class=\"programlisting\">RuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc</pre><p>\n        then the environment variable \"<code class=\"literal\">RUNTIME_DIRECTORY</code>\" is set with \"<code class=\"literal\">/run/foo/bar</code>\", and\n        \"<code class=\"literal\">STATE_DIRECTORY</code>\" is set with \"<code class=\"literal\">/var/lib/aaa/bbb:/var/lib/ccc</code>\".</p>",
                "RuntimeDirectoryMode": "<p>Specifies the access mode of the directories specified in <code class=\"varname\">RuntimeDirectory=</code>,\n        <code class=\"varname\">StateDirectory=</code>, <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>, or\n        <code class=\"varname\">ConfigurationDirectory=</code>, respectively, as an octal number.  Defaults to\n        <code class=\"constant\">0755</code>. See \"Permissions\" in <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/path_resolution.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">path_resolution</span>(7)</span></a> for a\n        discussion of the meaning of permission bits.</p>",
                "StateDirectoryMode": "<p>Specifies the access mode of the directories specified in <code class=\"varname\">RuntimeDirectory=</code>,\n        <code class=\"varname\">StateDirectory=</code>, <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>, or\n        <code class=\"varname\">ConfigurationDirectory=</code>, respectively, as an octal number.  Defaults to\n        <code class=\"constant\">0755</code>. See \"Permissions\" in <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/path_resolution.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">path_resolution</span>(7)</span></a> for a\n        discussion of the meaning of permission bits.</p>",
                "CacheDirectoryMode": "<p>Specifies the access mode of the directories specified in <code class=\"varname\">RuntimeDirectory=</code>,\n        <code class=\"varname\">StateDirectory=</code>, <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>, or\n        <code class=\"varname\">ConfigurationDirectory=</code>, respectively, as an octal number.  Defaults to\n        <code class=\"constant\">0755</code>. See \"Permissions\" in <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/path_resolution.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">path_resolution</span>(7)</span></a> for a\n        discussion of the meaning of permission bits.</p>",
                "LogsDirectoryMode": "<p>Specifies the access mode of the directories specified in <code class=\"varname\">RuntimeDirectory=</code>,\n        <code class=\"varname\">StateDirectory=</code>, <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>, or\n        <code class=\"varname\">ConfigurationDirectory=</code>, respectively, as an octal number.  Defaults to\n        <code class=\"constant\">0755</code>. See \"Permissions\" in <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/path_resolution.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">path_resolution</span>(7)</span></a> for a\n        discussion of the meaning of permission bits.</p>",
                "ConfigurationDirectoryMode": "<p>Specifies the access mode of the directories specified in <code class=\"varname\">RuntimeDirectory=</code>,\n        <code class=\"varname\">StateDirectory=</code>, <code class=\"varname\">CacheDirectory=</code>, <code class=\"varname\">LogsDirectory=</code>, or\n        <code class=\"varname\">ConfigurationDirectory=</code>, respectively, as an octal number.  Defaults to\n        <code class=\"constant\">0755</code>. See \"Permissions\" in <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/path_resolution.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">path_resolution</span>(7)</span></a> for a\n        discussion of the meaning of permission bits.</p>",
                "RuntimeDirectoryPreserve": "<p>Takes a boolean argument or <code class=\"option\">restart</code>.  If set to <code class=\"option\">no</code> (the\n        default), the directories specified in <code class=\"varname\">RuntimeDirectory=</code> are always removed when the service\n        stops. If set to <code class=\"option\">restart</code> the directories are preserved when the service is both automatically\n        and manually restarted. Here, the automatic restart means the operation specified in\n        <code class=\"varname\">Restart=</code>, and manual restart means the one triggered by <span class=\"command\"><strong>systemctl restart\n        foo.service</strong></span>. If set to <code class=\"option\">yes</code>, then the directories are not removed when the service is\n        stopped. Note that since the runtime directory <code class=\"filename\">/run</code> is a mount point of\n        \"<code class=\"literal\">tmpfs</code>\", then for system services the directories specified in\n        <code class=\"varname\">RuntimeDirectory=</code> are removed when the system is rebooted.</p>",
                "TimeoutCleanSec": "<p>Configures a timeout on the clean-up operation requested through <span class=\"command\"><strong>systemctl\n        clean …</strong></span>, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemctl</span>(1)</span></a> for\n        details. Takes the usual time values and defaults to <code class=\"constant\">infinity</code>, i.e. by default\n        no timeout is applied. If a timeout is configured the clean operation will be aborted forcibly when\n        the timeout is reached, potentially leaving resources on disk.</p>",
                "ReadWritePaths": "<p>Sets up a new file system namespace for executed processes. These options may be used to limit\n        access a process might have to the file system hierarchy. Each setting takes a space-separated list of paths\n        relative to the host's root directory (i.e. the system running the service manager).  Note that if paths\n        contain symlinks, they are resolved relative to the root directory set with\n        <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>.</p><p>Paths listed in <code class=\"varname\">ReadWritePaths=</code> are accessible from within the namespace\n        with the same access modes as from outside of it. Paths listed in <code class=\"varname\">ReadOnlyPaths=</code>\n        are accessible for reading only, writing will be refused even if the usual file access controls would\n        permit this. Nest <code class=\"varname\">ReadWritePaths=</code> inside of <code class=\"varname\">ReadOnlyPaths=</code> in\n        order to provide writable subdirectories within read-only directories. Use\n        <code class=\"varname\">ReadWritePaths=</code> in order to allow-list specific paths for write access if\n        <code class=\"varname\">ProtectSystem=strict</code> is used.</p><p>Paths listed in <code class=\"varname\">InaccessiblePaths=</code> will be made inaccessible for processes inside\n        the namespace along with everything below them in the file system hierarchy. This may be more restrictive than\n        desired, because it is not possible to nest <code class=\"varname\">ReadWritePaths=</code>, <code class=\"varname\">ReadOnlyPaths=</code>,\n        <code class=\"varname\">BindPaths=</code>, or <code class=\"varname\">BindReadOnlyPaths=</code> inside it. For a more flexible option,\n        see <code class=\"varname\">TemporaryFileSystem=</code>.</p><p>Non-directory paths may be specified as well. These options may be specified more than once,\n        in which case all paths listed will have limited access from within the namespace. If the empty string is\n        assigned to this option, the specific list is reset, and all prior assignments have no effect.</p><p>Paths in <code class=\"varname\">ReadWritePaths=</code>, <code class=\"varname\">ReadOnlyPaths=</code> and\n        <code class=\"varname\">InaccessiblePaths=</code> may be prefixed with \"<code class=\"literal\">-</code>\", in which case they will be\n        ignored when they do not exist. If prefixed with \"<code class=\"literal\">+</code>\" the paths are taken relative to the root\n        directory of the unit, as configured with <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>,\n        instead of relative to the root directory of the host (see above). When combining \"<code class=\"literal\">-</code>\" and\n        \"<code class=\"literal\">+</code>\" on the same path make sure to specify \"<code class=\"literal\">-</code>\" first, and \"<code class=\"literal\">+</code>\"\n        second.</p><p>Note that these settings will disconnect propagation of mounts from the unit's processes to the\n        host. This means that this setting may not be used for services which shall be able to install mount points in\n        the main mount namespace. For <code class=\"varname\">ReadWritePaths=</code> and <code class=\"varname\">ReadOnlyPaths=</code>\n        propagation in the other direction is not affected, i.e. mounts created on the host generally appear in the\n        unit processes' namespace, and mounts removed on the host also disappear there too. In particular, note that\n        mount propagation from host to unit will result in unmodified mounts to be created in the unit's namespace,\n        i.e. writable mounts appearing on the host will be writable in the unit's namespace too, even when propagated\n        below a path marked with <code class=\"varname\">ReadOnlyPaths=</code>! Restricting access with these options hence does\n        not extend to submounts of a directory that are created later on. This means the lock-down offered by that\n        setting is not complete, and does not offer full protection. </p><p>Note that the effect of these settings may be undone by privileged processes. In order to set up an\n        effective sandboxed environment for a unit it is thus recommended to combine these settings with either\n        <code class=\"varname\">CapabilityBoundingSet=~CAP_SYS_ADMIN</code> or\n        <code class=\"varname\">SystemCallFilter=~@mount</code>.</p><p><a target=\"__blank\" name=\"plural\"></a>These options are only available for system services and are not supported for services\nrunning in per-user instances of the service manager.</p>",
                "ReadOnlyPaths": "<p>Sets up a new file system namespace for executed processes. These options may be used to limit\n        access a process might have to the file system hierarchy. Each setting takes a space-separated list of paths\n        relative to the host's root directory (i.e. the system running the service manager).  Note that if paths\n        contain symlinks, they are resolved relative to the root directory set with\n        <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>.</p><p>Paths listed in <code class=\"varname\">ReadWritePaths=</code> are accessible from within the namespace\n        with the same access modes as from outside of it. Paths listed in <code class=\"varname\">ReadOnlyPaths=</code>\n        are accessible for reading only, writing will be refused even if the usual file access controls would\n        permit this. Nest <code class=\"varname\">ReadWritePaths=</code> inside of <code class=\"varname\">ReadOnlyPaths=</code> in\n        order to provide writable subdirectories within read-only directories. Use\n        <code class=\"varname\">ReadWritePaths=</code> in order to allow-list specific paths for write access if\n        <code class=\"varname\">ProtectSystem=strict</code> is used.</p><p>Paths listed in <code class=\"varname\">InaccessiblePaths=</code> will be made inaccessible for processes inside\n        the namespace along with everything below them in the file system hierarchy. This may be more restrictive than\n        desired, because it is not possible to nest <code class=\"varname\">ReadWritePaths=</code>, <code class=\"varname\">ReadOnlyPaths=</code>,\n        <code class=\"varname\">BindPaths=</code>, or <code class=\"varname\">BindReadOnlyPaths=</code> inside it. For a more flexible option,\n        see <code class=\"varname\">TemporaryFileSystem=</code>.</p><p>Non-directory paths may be specified as well. These options may be specified more than once,\n        in which case all paths listed will have limited access from within the namespace. If the empty string is\n        assigned to this option, the specific list is reset, and all prior assignments have no effect.</p><p>Paths in <code class=\"varname\">ReadWritePaths=</code>, <code class=\"varname\">ReadOnlyPaths=</code> and\n        <code class=\"varname\">InaccessiblePaths=</code> may be prefixed with \"<code class=\"literal\">-</code>\", in which case they will be\n        ignored when they do not exist. If prefixed with \"<code class=\"literal\">+</code>\" the paths are taken relative to the root\n        directory of the unit, as configured with <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>,\n        instead of relative to the root directory of the host (see above). When combining \"<code class=\"literal\">-</code>\" and\n        \"<code class=\"literal\">+</code>\" on the same path make sure to specify \"<code class=\"literal\">-</code>\" first, and \"<code class=\"literal\">+</code>\"\n        second.</p><p>Note that these settings will disconnect propagation of mounts from the unit's processes to the\n        host. This means that this setting may not be used for services which shall be able to install mount points in\n        the main mount namespace. For <code class=\"varname\">ReadWritePaths=</code> and <code class=\"varname\">ReadOnlyPaths=</code>\n        propagation in the other direction is not affected, i.e. mounts created on the host generally appear in the\n        unit processes' namespace, and mounts removed on the host also disappear there too. In particular, note that\n        mount propagation from host to unit will result in unmodified mounts to be created in the unit's namespace,\n        i.e. writable mounts appearing on the host will be writable in the unit's namespace too, even when propagated\n        below a path marked with <code class=\"varname\">ReadOnlyPaths=</code>! Restricting access with these options hence does\n        not extend to submounts of a directory that are created later on. This means the lock-down offered by that\n        setting is not complete, and does not offer full protection. </p><p>Note that the effect of these settings may be undone by privileged processes. In order to set up an\n        effective sandboxed environment for a unit it is thus recommended to combine these settings with either\n        <code class=\"varname\">CapabilityBoundingSet=~CAP_SYS_ADMIN</code> or\n        <code class=\"varname\">SystemCallFilter=~@mount</code>.</p><p><a target=\"__blank\" name=\"plural\"></a>These options are only available for system services and are not supported for services\nrunning in per-user instances of the service manager.</p>",
                "InaccessiblePaths": "<p>Sets up a new file system namespace for executed processes. These options may be used to limit\n        access a process might have to the file system hierarchy. Each setting takes a space-separated list of paths\n        relative to the host's root directory (i.e. the system running the service manager).  Note that if paths\n        contain symlinks, they are resolved relative to the root directory set with\n        <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>.</p><p>Paths listed in <code class=\"varname\">ReadWritePaths=</code> are accessible from within the namespace\n        with the same access modes as from outside of it. Paths listed in <code class=\"varname\">ReadOnlyPaths=</code>\n        are accessible for reading only, writing will be refused even if the usual file access controls would\n        permit this. Nest <code class=\"varname\">ReadWritePaths=</code> inside of <code class=\"varname\">ReadOnlyPaths=</code> in\n        order to provide writable subdirectories within read-only directories. Use\n        <code class=\"varname\">ReadWritePaths=</code> in order to allow-list specific paths for write access if\n        <code class=\"varname\">ProtectSystem=strict</code> is used.</p><p>Paths listed in <code class=\"varname\">InaccessiblePaths=</code> will be made inaccessible for processes inside\n        the namespace along with everything below them in the file system hierarchy. This may be more restrictive than\n        desired, because it is not possible to nest <code class=\"varname\">ReadWritePaths=</code>, <code class=\"varname\">ReadOnlyPaths=</code>,\n        <code class=\"varname\">BindPaths=</code>, or <code class=\"varname\">BindReadOnlyPaths=</code> inside it. For a more flexible option,\n        see <code class=\"varname\">TemporaryFileSystem=</code>.</p><p>Non-directory paths may be specified as well. These options may be specified more than once,\n        in which case all paths listed will have limited access from within the namespace. If the empty string is\n        assigned to this option, the specific list is reset, and all prior assignments have no effect.</p><p>Paths in <code class=\"varname\">ReadWritePaths=</code>, <code class=\"varname\">ReadOnlyPaths=</code> and\n        <code class=\"varname\">InaccessiblePaths=</code> may be prefixed with \"<code class=\"literal\">-</code>\", in which case they will be\n        ignored when they do not exist. If prefixed with \"<code class=\"literal\">+</code>\" the paths are taken relative to the root\n        directory of the unit, as configured with <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>,\n        instead of relative to the root directory of the host (see above). When combining \"<code class=\"literal\">-</code>\" and\n        \"<code class=\"literal\">+</code>\" on the same path make sure to specify \"<code class=\"literal\">-</code>\" first, and \"<code class=\"literal\">+</code>\"\n        second.</p><p>Note that these settings will disconnect propagation of mounts from the unit's processes to the\n        host. This means that this setting may not be used for services which shall be able to install mount points in\n        the main mount namespace. For <code class=\"varname\">ReadWritePaths=</code> and <code class=\"varname\">ReadOnlyPaths=</code>\n        propagation in the other direction is not affected, i.e. mounts created on the host generally appear in the\n        unit processes' namespace, and mounts removed on the host also disappear there too. In particular, note that\n        mount propagation from host to unit will result in unmodified mounts to be created in the unit's namespace,\n        i.e. writable mounts appearing on the host will be writable in the unit's namespace too, even when propagated\n        below a path marked with <code class=\"varname\">ReadOnlyPaths=</code>! Restricting access with these options hence does\n        not extend to submounts of a directory that are created later on. This means the lock-down offered by that\n        setting is not complete, and does not offer full protection. </p><p>Note that the effect of these settings may be undone by privileged processes. In order to set up an\n        effective sandboxed environment for a unit it is thus recommended to combine these settings with either\n        <code class=\"varname\">CapabilityBoundingSet=~CAP_SYS_ADMIN</code> or\n        <code class=\"varname\">SystemCallFilter=~@mount</code>.</p><p><a target=\"__blank\" name=\"plural\"></a>These options are only available for system services and are not supported for services\nrunning in per-user instances of the service manager.</p>",
                "TemporaryFileSystem": "<p>Takes a space-separated list of mount points for temporary file systems (tmpfs). If set, a new file\n        system namespace is set up for executed processes, and a temporary file system is mounted on each mount point.\n        This option may be specified more than once, in which case temporary file systems are mounted on all listed mount\n        points. If the empty string is assigned to this option, the list is reset, and all prior assignments have no effect.\n        Each mount point may optionally be suffixed with a colon (\"<code class=\"literal\">:</code>\") and mount options such as\n        \"<code class=\"literal\">size=10%</code>\" or \"<code class=\"literal\">ro</code>\". By default, each temporary file system is mounted\n        with \"<code class=\"literal\">nodev,strictatime,mode=0755</code>\". These can be disabled by explicitly specifying the corresponding\n        mount options, e.g., \"<code class=\"literal\">dev</code>\" or \"<code class=\"literal\">nostrictatime</code>\".</p><p>This is useful to hide files or directories not relevant to the processes invoked by the unit, while necessary\n        files or directories can be still accessed by combining with <code class=\"varname\">BindPaths=</code> or\n        <code class=\"varname\">BindReadOnlyPaths=</code>:</p><p>Example: if a unit has the following,\n        </p><pre class=\"programlisting\">TemporaryFileSystem=/var:ro\nBindReadOnlyPaths=/var/lib/systemd</pre><p>\n        then the invoked processes by the unit cannot see any files or directories under <code class=\"filename\">/var</code> except for\n        <code class=\"filename\">/var/lib/systemd</code> or its contents.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "PrivateTmp": "<p>Takes a boolean argument. If true, sets up a new file system namespace for the executed\n        processes and mounts private <code class=\"filename\">/tmp/</code> and <code class=\"filename\">/var/tmp/</code> directories inside it\n        that are not shared by processes outside of the namespace. This is useful to secure access to temporary files of\n        the process, but makes sharing between processes via <code class=\"filename\">/tmp</code> or <code class=\"filename\">/var/tmp</code>\n        impossible. If this is enabled, all temporary files created by a service in these directories will be removed\n        after the service is stopped.  Defaults to false. It is possible to run two or more units within the same\n        private <code class=\"filename\">/tmp</code> and <code class=\"filename\">/var/tmp</code> namespace by using the\n        <code class=\"varname\">JoinsNamespaceOf=</code> directive, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.unit</span>(5)</span></a> for\n        details. This setting is implied if <code class=\"varname\">DynamicUser=</code> is set. For this setting the same\n        restrictions regarding mount propagation and privileges apply as for <code class=\"varname\">ReadOnlyPaths=</code> and\n        related calls, see above. Enabling this setting has the side effect of adding <code class=\"varname\">Requires=</code> and\n        <code class=\"varname\">After=</code> dependencies on all mount units necessary to access <code class=\"filename\">/tmp</code> and\n        <code class=\"filename\">/var/tmp</code>. Moreover an implicitly <code class=\"varname\">After=</code> ordering on\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-tmpfiles-setup.service.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-tmpfiles-setup.service</span>(8)</span></a>\n        is added.</p><p>Note that the implementation of this setting might be impossible (for example if mount namespaces are not\n        available), and the unit should be written in a way that does not solely rely on this setting for\n        security.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "PrivateDevices": "<p>Takes a boolean argument. If true, sets up a new <code class=\"filename\">/dev</code> mount for the\n        executed processes and only adds API pseudo devices such as <code class=\"filename\">/dev/null</code>,\n        <code class=\"filename\">/dev/zero</code> or <code class=\"filename\">/dev/random</code> (as well as the pseudo TTY subsystem) to it,\n        but no physical devices such as <code class=\"filename\">/dev/sda</code>, system memory <code class=\"filename\">/dev/mem</code>,\n        system ports <code class=\"filename\">/dev/port</code> and others. This is useful to securely turn off physical device\n        access by the executed process. Defaults to false. Enabling this option will install a system call filter to\n        block low-level I/O system calls that are grouped in the <code class=\"varname\">@raw-io</code> set, will also remove\n        <code class=\"constant\">CAP_MKNOD</code> and <code class=\"constant\">CAP_SYS_RAWIO</code> from the capability bounding set for the\n        unit (see above), and set <code class=\"varname\">DevicePolicy=closed</code> (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a>\n        for details). Note that using this setting will disconnect propagation of mounts from the service to the host\n        (propagation in the opposite direction continues to work).  This means that this setting may not be used for\n        services which shall be able to install mount points in the main mount namespace. The new\n        <code class=\"filename\">/dev</code> will be mounted read-only and 'noexec'. The latter may break old programs which try\n        to set up executable memory by using\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mmap.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mmap</span>(2)</span></a> of\n        <code class=\"filename\">/dev/zero</code> instead of using <code class=\"constant\">MAP_ANON</code>. For this setting the same\n        restrictions regarding mount propagation and privileges apply as for <code class=\"varname\">ReadOnlyPaths=</code> and\n        related calls, see above.  If turned on and if running in user mode, or in system mode, but without the\n        <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting <code class=\"varname\">User=</code>),\n        <code class=\"varname\">NoNewPrivileges=yes</code> is implied.</p><p>Note that the implementation of this setting might be impossible (for example if mount namespaces are not\n        available), and the unit should be written in a way that does not solely rely on this setting for\n        security.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "PrivateNetwork": "<p>Takes a boolean argument. If true, sets up a new network namespace for the executed processes\n        and configures only the loopback network device \"<code class=\"literal\">lo</code>\" inside it. No other network devices will\n        be available to the executed process. This is useful to turn off network access by the executed process.\n        Defaults to false. It is possible to run two or more units within the same private network namespace by using\n        the <code class=\"varname\">JoinsNamespaceOf=</code> directive, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.unit</span>(5)</span></a> for\n        details. Note that this option will disconnect all socket families from the host, including\n        <code class=\"constant\">AF_NETLINK</code> and <code class=\"constant\">AF_UNIX</code>. Effectively, for\n        <code class=\"constant\">AF_NETLINK</code> this means that device configuration events received from\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-udevd.service.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-udevd.service</span>(8)</span></a> are\n        not delivered to the unit's processes. And for <code class=\"constant\">AF_UNIX</code> this has the effect that\n        <code class=\"constant\">AF_UNIX</code> sockets in the abstract socket namespace of the host will become unavailable to\n        the unit's processes (however, those located in the file system will continue to be accessible).</p><p>Note that the implementation of this setting might be impossible (for example if network namespaces are\n        not available), and the unit should be written in a way that does not solely rely on this setting for\n        security.</p><p>When this option is used on a socket unit any sockets bound on behalf of this unit will be\n        bound within a private network namespace. This may be combined with\n        <code class=\"varname\">JoinsNamespaceOf=</code> to listen on sockets inside of network namespaces of other\n        services.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "NetworkNamespacePath": "<p>Takes an absolute file system path refererring to a Linux network namespace\n        pseudo-file (i.e. a file like <code class=\"filename\">/proc/$PID/ns/net</code> or a bind mount or symlink to\n        one). When set the invoked processes are added to the network namespace referenced by that path. The\n        path has to point to a valid namespace file at the moment the processes are forked off. If this\n        option is used <code class=\"varname\">PrivateNetwork=</code> has no effect. If this option is used together with\n        <code class=\"varname\">JoinsNamespaceOf=</code> then it only has an effect if this unit is started before any of\n        the listed units that have <code class=\"varname\">PrivateNetwork=</code> or\n        <code class=\"varname\">NetworkNamespacePath=</code> configured, as otherwise the network namespace of those\n        units is reused.</p><p>When this option is used on a socket unit any sockets bound on behalf of this unit will be\n        bound within the specified network namespace.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "PrivateUsers": "<p>Takes a boolean argument. If true, sets up a new user namespace for the executed processes and\n        configures a minimal user and group mapping, that maps the \"<code class=\"literal\">root</code>\" user and group as well as\n        the unit's own user and group to themselves and everything else to the \"<code class=\"literal\">nobody</code>\" user and\n        group. This is useful to securely detach the user and group databases used by the unit from the rest of the\n        system, and thus to create an effective sandbox environment. All files, directories, processes, IPC objects and\n        other resources owned by users/groups not equaling \"<code class=\"literal\">root</code>\" or the unit's own will stay visible\n        from within the unit but appear owned by the \"<code class=\"literal\">nobody</code>\" user and group. If this mode is enabled,\n        all unit processes are run without privileges in the host user namespace (regardless if the unit's own\n        user/group is \"<code class=\"literal\">root</code>\" or not). Specifically this means that the process will have zero process\n        capabilities on the host's user namespace, but full capabilities within the service's user namespace. Settings\n        such as <code class=\"varname\">CapabilityBoundingSet=</code> will affect only the latter, and there's no way to acquire\n        additional capabilities in the host's user namespace. Defaults to off.</p><p>When this setting is set up by a per-user instance of the service manager, the mapping of the\n        \"<code class=\"literal\">root</code>\" user and group to itself is omitted (unless the user manager is root).\n        Additionally, in the per-user instance manager case, the\n        user namespace will be set up before most other namespaces. This means that combining\n        <code class=\"varname\">PrivateUsers=</code><code class=\"option\">true</code> with other namespaces will enable use of features not\n        normally supported by the per-user instances of the service manager.</p><p>This setting is particularly useful in conjunction with\n        <code class=\"varname\">RootDirectory=</code>/<code class=\"varname\">RootImage=</code>, as the need to synchronize the user and group\n        databases in the root directory and on the host is reduced, as the only users and groups who need to be matched\n        are \"<code class=\"literal\">root</code>\", \"<code class=\"literal\">nobody</code>\" and the unit's own user and group.</p><p>Note that the implementation of this setting might be impossible (for example if user namespaces are not\n        available), and the unit should be written in a way that does not solely rely on this setting for\n        security.</p>",
                "ProtectHostname": "<p>Takes a boolean argument. When set, sets up a new UTS namespace for the executed\n        processes. In addition, changing hostname or domainname is prevented. Defaults to off.</p><p>Note that the implementation of this setting might be impossible (for example if UTS namespaces\n        are not available), and the unit should be written in a way that does not solely rely on this setting\n        for security.</p><p>Note that when this option is enabled for a service hostname changes no longer propagate from\n        the system into the service, it is hence not suitable for services that need to take notice of system\n        hostname changes dynamically.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "ProtectClock": "<p>Takes a boolean argument. If set, writes to the hardware clock or system clock will be denied.\n        It is recommended to turn this on for most services that do not need modify the clock. Defaults to off. Enabling\n        this option removes <code class=\"constant\">CAP_SYS_TIME</code> and <code class=\"constant\">CAP_WAKE_ALARM</code> from the\n        capability bounding set for this unit, installs a system call filter to block calls that can set the\n        clock, and <code class=\"varname\">DeviceAllow=char-rtc r</code> is implied. This ensures <code class=\"filename\">/dev/rtc0</code>,\n        <code class=\"filename\">/dev/rtc1</code>, etc. are made read-only to the service. See\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.resource-control</span>(5)</span></a>\n        for the details about <code class=\"varname\">DeviceAllow=</code>.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "ProtectKernelTunables": "<p>Takes a boolean argument. If true, kernel variables accessible through\n        <code class=\"filename\">/proc/sys</code>, <code class=\"filename\">/sys</code>, <code class=\"filename\">/proc/sysrq-trigger</code>,\n        <code class=\"filename\">/proc/latency_stats</code>, <code class=\"filename\">/proc/acpi</code>,\n        <code class=\"filename\">/proc/timer_stats</code>, <code class=\"filename\">/proc/fs</code> and <code class=\"filename\">/proc/irq</code> will\n        be made read-only to all processes of the unit. Usually, tunable kernel variables should be initialized only at\n        boot-time, for example with the\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/sysctl.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sysctl.d</span>(5)</span></a> mechanism. Few\n        services need to write to these at runtime; it is hence recommended to turn this on for most services. For this\n        setting the same restrictions regarding mount propagation and privileges apply as for\n        <code class=\"varname\">ReadOnlyPaths=</code> and related calls, see above. Defaults to off.  If turned on and if running\n        in user mode, or in system mode, but without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g.  services\n        for which <code class=\"varname\">User=</code> is set), <code class=\"varname\">NoNewPrivileges=yes</code> is implied. Note that this\n        option does not prevent indirect changes to kernel tunables effected by IPC calls to other processes. However,\n        <code class=\"varname\">InaccessiblePaths=</code> may be used to make relevant IPC file system objects inaccessible. If\n        <code class=\"varname\">ProtectKernelTunables=</code> is set, <code class=\"varname\">MountAPIVFS=yes</code> is\n        implied.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "ProtectKernelModules": "<p>Takes a boolean argument. If true, explicit module loading will be denied. This allows\n        module load and unload operations to be turned off on modular kernels. It is recommended to turn this on for most services\n        that do not need special file systems or extra kernel modules to work. Defaults to off. Enabling this option\n        removes <code class=\"constant\">CAP_SYS_MODULE</code> from the capability bounding set for the unit, and installs a\n        system call filter to block module system calls, also <code class=\"filename\">/usr/lib/modules</code> is made\n        inaccessible. For this setting the same restrictions regarding mount propagation and privileges apply as for\n        <code class=\"varname\">ReadOnlyPaths=</code> and related calls, see above.  Note that limited automatic module loading due\n        to user configuration or kernel mapping tables might still happen as side effect of requested user operations,\n        both privileged and unprivileged. To disable module auto-load feature please see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/sysctl.d.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sysctl.d</span>(5)</span></a>\n        <code class=\"constant\">kernel.modules_disabled</code> mechanism and\n        <code class=\"filename\">/proc/sys/kernel/modules_disabled</code> documentation.  If turned on and if running in user\n        mode, or in system mode, but without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting\n        <code class=\"varname\">User=</code>), <code class=\"varname\">NoNewPrivileges=yes</code> is implied.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "ProtectKernelLogs": "<p>Takes a boolean argument. If true, access to the kernel log ring buffer will be denied. It is\n        recommended to turn this on for most services that do not need to read from or write to the kernel log ring\n        buffer. Enabling this option removes <code class=\"constant\">CAP_SYSLOG</code> from the capability bounding set for this\n        unit, and installs a system call filter to block the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/syslog.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">syslog</span>(2)</span></a>\n        system call (not to be confused with the libc API\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man3/syslog.3.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">syslog</span>(3)</span></a>\n        for userspace logging). The kernel exposes its log buffer to userspace via <code class=\"filename\">/dev/kmsg</code> and\n        <code class=\"filename\">/proc/kmsg</code>. If enabled, these are made inaccessible to all the processes in the unit.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "ProtectControlGroups": "<p>Takes a boolean argument. If true, the Linux Control Groups (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/cgroups.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">cgroups</span>(7)</span></a>) hierarchies\n        accessible through <code class=\"filename\">/sys/fs/cgroup</code> will be made read-only to all processes of the\n        unit. Except for container managers no services should require write access to the control groups hierarchies;\n        it is hence recommended to turn this on for most services. For this setting the same restrictions regarding\n        mount propagation and privileges apply as for <code class=\"varname\">ReadOnlyPaths=</code> and related calls, see\n        above. Defaults to off. If <code class=\"varname\">ProtectControlGroups=</code> is set, <code class=\"varname\">MountAPIVFS=yes</code>\n        is implied.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "RestrictAddressFamilies": "<p>Restricts the set of socket address families accessible to the processes of this\n        unit. Takes a space-separated list of address family names to allow-list, such as\n        <code class=\"constant\">AF_UNIX</code>, <code class=\"constant\">AF_INET</code> or <code class=\"constant\">AF_INET6</code>. When\n        prefixed with <code class=\"constant\">~</code> the listed address families will be applied as deny list,\n        otherwise as allow list.  Note that this restricts access to the <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/socket.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">socket</span>(2)</span></a>\n        system call only. Sockets passed into the process by other means (for example, by using socket\n        activation with socket units, see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.socket.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.socket</span>(5)</span></a>)\n        are unaffected. Also, sockets created with <code class=\"function\">socketpair()</code> (which creates connected\n        AF_UNIX sockets only) are unaffected. Note that this option has no effect on 32-bit x86, s390, s390x,\n        mips, mips-le, ppc, ppc-le, ppc64, ppc64-le and is ignored (but works correctly on other ABIs,\n        including x86-64). Note that on systems supporting multiple ABIs (such as x86/x86-64) it is\n        recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the\n        restrictions of this option. Specifically, it is recommended to combine this option with\n        <code class=\"varname\">SystemCallArchitectures=native</code> or similar. If running in user mode, or in system\n        mode, but without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting\n        <code class=\"varname\">User=nobody</code>), <code class=\"varname\">NoNewPrivileges=yes</code> is implied. By default, no\n        restrictions apply, all address families are accessible to processes. If assigned the empty string,\n        any previous address family restriction changes are undone. This setting does not affect commands\n        prefixed with \"<code class=\"literal\">+</code>\".</p><p>Use this option to limit exposure of processes to remote access, in particular via exotic and sensitive\n        network protocols, such as <code class=\"constant\">AF_PACKET</code>. Note that in most cases, the local\n        <code class=\"constant\">AF_UNIX</code> address family should be included in the configured allow list as it is frequently\n        used for local communication, including for\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/syslog.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">syslog</span>(2)</span></a>\n        logging.</p>",
                "RestrictNamespaces": "<p>Restricts access to Linux namespace functionality for the processes of this unit. For details\n        about Linux namespaces, see <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/namespaces.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">namespaces</span>(7)</span></a>. Either\n        takes a boolean argument, or a space-separated list of namespace type identifiers. If false (the default), no\n        restrictions on namespace creation and switching are made. If true, access to any kind of namespacing is\n        prohibited. Otherwise, a space-separated list of namespace type identifiers must be specified, consisting of\n        any combination of: <code class=\"constant\">cgroup</code>, <code class=\"constant\">ipc</code>, <code class=\"constant\">net</code>,\n        <code class=\"constant\">mnt</code>, <code class=\"constant\">pid</code>, <code class=\"constant\">user</code> and <code class=\"constant\">uts</code>. Any\n        namespace type listed is made accessible to the unit's processes, access to namespace types not listed is\n        prohibited (allow-listing). By prepending the list with a single tilde character (\"<code class=\"literal\">~</code>\") the\n        effect may be inverted: only the listed namespace types will be made inaccessible, all unlisted ones are\n        permitted (deny-listing). If the empty string is assigned, the default namespace restrictions are applied,\n        which is equivalent to false. This option may appear more than once, in which case the namespace types are\n        merged by <code class=\"constant\">OR</code>, or by <code class=\"constant\">AND</code> if the lines are prefixed with\n        \"<code class=\"literal\">~</code>\" (see examples below). Internally, this setting limits access to the\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/unshare.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">unshare</span>(2)</span></a>,\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/clone.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">clone</span>(2)</span></a> and\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/setns.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setns</span>(2)</span></a> system calls, taking\n        the specified flags parameters into account. Note that — if this option is used — in addition to restricting\n        creation and switching of the specified types of namespaces (or all of them, if true) access to the\n        <code class=\"function\">setns()</code> system call with a zero flags parameter is prohibited.  This setting is only\n        supported on x86, x86-64, mips, mips-le, mips64, mips64-le, mips64-n32, mips64-le-n32, ppc64, ppc64-le, s390\n        and s390x, and enforces no restrictions on other architectures. If running in user mode, or in system mode, but\n        without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting <code class=\"varname\">User=</code>),\n        <code class=\"varname\">NoNewPrivileges=yes</code> is implied.</p><p>Example: if a unit has the following,\n        </p><pre class=\"programlisting\">RestrictNamespaces=cgroup ipc\nRestrictNamespaces=cgroup net</pre><p>\n        then <code class=\"constant\">cgroup</code>, <code class=\"constant\">ipc</code>, and <code class=\"constant\">net</code> are set.\n        If the second line is prefixed with \"<code class=\"literal\">~</code>\", e.g.,\n        </p><pre class=\"programlisting\">RestrictNamespaces=cgroup ipc\nRestrictNamespaces=~cgroup net</pre><p>\n        then, only <code class=\"constant\">ipc</code> is set.</p>",
                "LockPersonality": "<p>Takes a boolean argument. If set, locks down the <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/personality.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">personality</span>(2)</span></a> system\n        call so that the kernel execution domain may not be changed from the default or the personality selected with\n        <code class=\"varname\">Personality=</code> directive. This may be useful to improve security, because odd personality\n        emulations may be poorly tested and source of vulnerabilities. If running in user mode, or in system mode, but\n        without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting <code class=\"varname\">User=</code>),\n        <code class=\"varname\">NoNewPrivileges=yes</code> is implied.</p>",
                "MemoryDenyWriteExecute": "<p>Takes a boolean argument. If set, attempts to create memory mappings that are writable and\n        executable at the same time, or to change existing memory mappings to become executable, or mapping shared\n        memory segments as executable are prohibited.  Specifically, a system call filter is added that rejects\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mmap.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mmap</span>(2)</span></a> system calls with both\n        <code class=\"constant\">PROT_EXEC</code> and <code class=\"constant\">PROT_WRITE</code> set,\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mprotect.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mprotect</span>(2)</span></a> or\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/pkey_mprotect.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">pkey_mprotect</span>(2)</span></a> system calls\n        with <code class=\"constant\">PROT_EXEC</code> set and\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/shmat.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">shmat</span>(2)</span></a> system calls with\n        <code class=\"constant\">SHM_EXEC</code> set. Note that this option is incompatible with programs and libraries that\n        generate program code dynamically at runtime, including JIT execution engines, executable stacks, and code\n        \"trampoline\" feature of various C compilers. This option improves service security, as it makes harder for\n        software exploits to change running code dynamically. However, the protection can be circumvented, if\n        the service can write to a filesystem, which is not mounted with <code class=\"constant\">noexec</code> (such as\n        <code class=\"filename\">/dev/shm</code>), or it can use <code class=\"function\">memfd_create()</code>.  This can be\n        prevented by making such file systems inaccessible to the service\n        (e.g. <code class=\"varname\">InaccessiblePaths=/dev/shm</code>) and installing further system call filters\n        (<code class=\"varname\">SystemCallFilter=~memfd_create</code>). Note that this feature is fully available on\n        x86-64, and partially on x86. Specifically, the <code class=\"function\">shmat()</code> protection is not\n        available on x86. Note that on systems supporting multiple ABIs (such as x86/x86-64) it is\n        recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the\n        restrictions of this option. Specifically, it is recommended to combine this option with\n        <code class=\"varname\">SystemCallArchitectures=native</code> or similar. If running in user mode, or in system\n        mode, but without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting\n        <code class=\"varname\">User=</code>), <code class=\"varname\">NoNewPrivileges=yes</code> is implied.</p>",
                "RestrictRealtime": "<p>Takes a boolean argument. If set, any attempts to enable realtime scheduling in a process of\n        the unit are refused. This restricts access to realtime task scheduling policies such as\n        <code class=\"constant\">SCHED_FIFO</code>, <code class=\"constant\">SCHED_RR</code> or <code class=\"constant\">SCHED_DEADLINE</code>. See\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/sched.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sched</span>(7)</span></a>\n        for details about these scheduling policies. If running in user mode, or in system mode, but without the\n        <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting <code class=\"varname\">User=</code>),\n        <code class=\"varname\">NoNewPrivileges=yes</code> is implied. Realtime scheduling policies may be used to monopolize CPU\n        time for longer periods of time, and may hence be used to lock up or otherwise trigger Denial-of-Service\n        situations on the system. It is hence recommended to restrict access to realtime scheduling to the few programs\n        that actually require them. Defaults to off.</p>",
                "RestrictSUIDSGID": "<p>Takes a boolean argument. If set, any attempts to set the set-user-ID (SUID) or\n        set-group-ID (SGID) bits on files or directories will be denied (for details on these bits see\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/inode.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">inode</span>(7)</span></a>). If\n        running in user mode, or in system mode, but without the <code class=\"constant\">CAP_SYS_ADMIN</code>\n        capability (e.g. setting <code class=\"varname\">User=</code>), <code class=\"varname\">NoNewPrivileges=yes</code> is\n        implied. As the SUID/SGID bits are mechanisms to elevate privileges, and allows users to acquire the\n        identity of other users, it is recommended to restrict creation of SUID/SGID files to the few\n        programs that actually require them. Note that this restricts marking of any type of file system\n        object with these bits, including both regular files and directories (where the SGID is a different\n        meaning than for files, see documentation). This option is implied if <code class=\"varname\">DynamicUser=</code>\n        is enabled. Defaults to off.</p>",
                "RemoveIPC": "<p>Takes a boolean parameter. If set, all System V and POSIX IPC objects owned by the user and\n        group the processes of this unit are run as are removed when the unit is stopped. This setting only has an\n        effect if at least one of <code class=\"varname\">User=</code>, <code class=\"varname\">Group=</code> and\n        <code class=\"varname\">DynamicUser=</code> are used. It has no effect on IPC objects owned by the root user. Specifically,\n        this removes System V semaphores, as well as System V and POSIX shared memory segments and message queues. If\n        multiple units use the same user or group the IPC objects are removed when the last of these units is\n        stopped. This setting is implied if <code class=\"varname\">DynamicUser=</code> is set.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "PrivateMounts": "<p>Takes a boolean parameter. If set, the processes of this unit will be run in their own private\n        file system (mount) namespace with all mount propagation from the processes towards the host's main file system\n        namespace turned off. This means any file system mount points established or removed by the unit's processes\n        will be private to them and not be visible to the host. However, file system mount points established or\n        removed on the host will be propagated to the unit's processes. See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/mount_namespaces.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mount_namespaces</span>(7)</span></a> for\n        details on file system namespaces. Defaults to off.</p><p>When turned on, this executes three operations for each invoked process: a new\n        <code class=\"constant\">CLONE_NEWNS</code> namespace is created, after which all existing mounts are remounted to\n        <code class=\"constant\">MS_SLAVE</code> to disable propagation from the unit's processes to the host (but leaving\n        propagation in the opposite direction in effect). Finally, the mounts are remounted again to the propagation\n        mode configured with <code class=\"varname\">MountFlags=</code>, see below.</p><p>File system namespaces are set up individually for each process forked off by the service manager. Mounts\n        established in the namespace of the process created by <code class=\"varname\">ExecStartPre=</code> will hence be cleaned\n        up automatically as soon as that process exits and will not be available to subsequent processes forked off for\n        <code class=\"varname\">ExecStart=</code> (and similar applies to the various other commands configured for\n        units). Similarly, <code class=\"varname\">JoinsNamespaceOf=</code> does not permit sharing kernel mount namespaces between\n        units, it only enables sharing of the <code class=\"filename\">/tmp/</code> and <code class=\"filename\">/var/tmp/</code>\n        directories.</p><p>Other file system namespace unit settings — <code class=\"varname\">PrivateMounts=</code>,\n        <code class=\"varname\">PrivateTmp=</code>, <code class=\"varname\">PrivateDevices=</code>, <code class=\"varname\">ProtectSystem=</code>,\n        <code class=\"varname\">ProtectHome=</code>, <code class=\"varname\">ReadOnlyPaths=</code>, <code class=\"varname\">InaccessiblePaths=</code>,\n        <code class=\"varname\">ReadWritePaths=</code>, … — also enable file system namespacing in a fashion equivalent to this\n        option. Hence it is primarily useful to explicitly request this behaviour if none of the other settings are\n        used.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "MountFlags": "<p>Takes a mount propagation setting: <code class=\"option\">shared</code>, <code class=\"option\">slave</code> or\n        <code class=\"option\">private</code>, which controls whether file system mount points in the file system namespaces set up\n        for this unit's processes will receive or propagate mounts and unmounts from other file system namespaces. See\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mount.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mount</span>(2)</span></a>\n        for details on mount propagation, and the three propagation flags in particular.</p><p>This setting only controls the <span class=\"emphasis\"><em>final</em></span> propagation setting in effect on all mount\n        points of the file system namespace created for each process of this unit. Other file system namespacing unit\n        settings (see the discussion in <code class=\"varname\">PrivateMounts=</code> above) will implicitly disable mount and\n        unmount propagation from the unit's processes towards the host by changing the propagation setting of all mount\n        points in the unit's file system namespace to <code class=\"option\">slave</code> first. Setting this option to\n        <code class=\"option\">shared</code> does not reestablish propagation in that case.</p><p>If not set – but file system namespaces are enabled through another file system namespace unit setting –\n        <code class=\"option\">shared</code> mount propagation is used, but — as mentioned — as <code class=\"option\">slave</code> is applied\n        first, propagation from the unit's processes to the host is still turned off.</p><p>It is not recommended to use <code class=\"option\">private</code> mount propagation for units, as this means\n        temporary mounts (such as removable media) of the host will stay mounted and thus indefinitely busy in forked\n        off processes, as unmount propagation events won't be received by the file system namespace of the unit.</p><p>Usually, it is best to leave this setting unmodified, and use higher level file system namespacing\n        options instead, in particular <code class=\"varname\">PrivateMounts=</code>, see above.</p><p><a target=\"__blank\" name=\"singular\"></a>This option is only available for system services and is not supported for services\nrunning in per-user instances of the service manager.</p>",
                "SystemCallFilter": "<p>Takes a space-separated list of system call names. If this setting is used, all\n        system calls executed by the unit processes except for the listed ones will result in immediate\n        process termination with the <code class=\"constant\">SIGSYS</code> signal (allow-listing). (See\n        <code class=\"varname\">SystemCallErrorNumber=</code> below for changing the default action). If the first\n        character of the list is \"<code class=\"literal\">~</code>\", the effect is inverted: only the listed system calls\n        will result in immediate process termination (deny-listing). Deny-listed system calls and system call\n        groups may optionally be suffixed with a colon (\"<code class=\"literal\">:</code>\") and \"<code class=\"literal\">errno</code>\"\n        error number (between 0 and 4095) or errno name such as <code class=\"constant\">EPERM</code>,\n        <code class=\"constant\">EACCES</code> or <code class=\"constant\">EUCLEAN</code> (see <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man3/errno.3.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">errno</span>(3)</span></a> for a\n        full list). This value will be returned when a deny-listed system call is triggered, instead of\n        terminating the processes immediately.  This value takes precedence over the one given in\n        <code class=\"varname\">SystemCallErrorNumber=</code>, see below.  If running in user mode, or in system mode,\n        but without the <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting\n        <code class=\"varname\">User=nobody</code>), <code class=\"varname\">NoNewPrivileges=yes</code> is implied. This feature\n        makes use of the Secure Computing Mode 2 interfaces of the kernel ('seccomp filtering') and is useful\n        for enforcing a minimal sandboxing environment. Note that the <code class=\"function\">execve</code>,\n        <code class=\"function\">exit</code>, <code class=\"function\">exit_group</code>, <code class=\"function\">getrlimit</code>,\n        <code class=\"function\">rt_sigreturn</code>, <code class=\"function\">sigreturn</code> system calls and the system calls\n        for querying time and sleeping are implicitly allow-listed and do not need to be listed\n        explicitly. This option may be specified more than once, in which case the filter masks are\n        merged. If the empty string is assigned, the filter is reset, all prior assignments will have no\n        effect. This does not affect commands prefixed with \"<code class=\"literal\">+</code>\".</p><p>Note that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off\n        alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this\n        option. Specifically, it is recommended to combine this option with\n        <code class=\"varname\">SystemCallArchitectures=native</code> or similar.</p><p>Note that strict system call filters may impact execution and error handling code paths of the service\n        invocation. Specifically, access to the <code class=\"function\">execve</code> system call is required for the execution\n        of the service binary — if it is blocked service invocation will necessarily fail. Also, if execution of the\n        service binary fails for some reason (for example: missing service executable), the error handling logic might\n        require access to an additional set of system calls in order to process and log this failure correctly. It\n        might be necessary to temporarily disable system call filters in order to simplify debugging of such\n        failures.</p><p>If you specify both types of this option (i.e.  allow-listing and deny-listing), the first\n        encountered will take precedence and will dictate the default action (termination or approval of a\n        system call). Then the next occurrences of this option will add or delete the listed system calls\n        from the set of the filtered system calls, depending of its type and the default action. (For\n        example, if you have started with an allow list rule for <code class=\"function\">read</code> and\n        <code class=\"function\">write</code>, and right after it add a deny list rule for <code class=\"function\">write</code>,\n        then <code class=\"function\">write</code> will be removed from the set.)</p><p>As the number of possible system calls is large, predefined sets of system calls are provided.  A set\n        starts with \"<code class=\"literal\">@</code>\" character, followed by name of the set.\n\n        </p><div class=\"table\"><a target=\"__blank\" name=\"id-1.15.2.1.2.5.2\"></a><p class=\"title\"><b>Table&nbsp;3.&nbsp;Currently predefined system call sets</b></p><div class=\"table-contents\"><table class=\"table\" summary=\"Currently predefined system call sets\" border=\"1\"><colgroup><col class=\"set\"><col class=\"description\"></colgroup><thead><tr><th>Set</th><th>Description</th></tr></thead><tbody><tr><td>@aio</td><td>Asynchronous I/O (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/io_setup.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">io_setup</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/io_submit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">io_submit</span>(2)</span></a>, and related calls)</td></tr><tr><td>@basic-io</td><td>System calls for basic I/O: reading, writing, seeking, file descriptor duplication and closing (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/read.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">read</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/write.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">write</span>(2)</span></a>, and related calls)</td></tr><tr><td>@chown</td><td>Changing file ownership (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/chown.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">chown</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/fchownat.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">fchownat</span>(2)</span></a>, and related calls)</td></tr><tr><td>@clock</td><td>System calls for changing the system clock (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/adjtimex.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">adjtimex</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/settimeofday.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">settimeofday</span>(2)</span></a>, and related calls)</td></tr><tr><td>@cpu-emulation</td><td>System calls for CPU emulation functionality (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/vm86.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">vm86</span>(2)</span></a> and related calls)</td></tr><tr><td>@debug</td><td>Debugging, performance monitoring and tracing functionality (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/ptrace.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">ptrace</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/perf_event_open.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">perf_event_open</span>(2)</span></a> and related calls)</td></tr><tr><td>@file-system</td><td>File system operations: opening, creating files and directories for read and write, renaming and removing them, reading file properties, or creating hard and symbolic links</td></tr><tr><td>@io-event</td><td>Event loop system calls (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/poll.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">poll</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/select.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">select</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/epoll.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">epoll</span>(7)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/eventfd.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">eventfd</span>(2)</span></a> and related calls)</td></tr><tr><td>@ipc</td><td>Pipes, SysV IPC, POSIX Message Queues and other IPC (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/mq_overview.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mq_overview</span>(7)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/svipc.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">svipc</span>(7)</span></a>)</td></tr><tr><td>@keyring</td><td>Kernel keyring access (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/keyctl.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">keyctl</span>(2)</span></a> and related calls)</td></tr><tr><td>@memlock</td><td>Locking of memory in RAM (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mlock.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mlock</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mlockall.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mlockall</span>(2)</span></a> and related calls)</td></tr><tr><td>@module</td><td>Loading and unloading of kernel modules (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/init_module.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">init_module</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/delete_module.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">delete_module</span>(2)</span></a> and related calls)</td></tr><tr><td>@mount</td><td>Mounting and unmounting of file systems (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/mount.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">mount</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/chroot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">chroot</span>(2)</span></a>, and related calls)</td></tr><tr><td>@network-io</td><td>Socket I/O (including local AF_UNIX): <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/socket.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">socket</span>(7)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/unix.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">unix</span>(7)</span></a></td></tr><tr><td>@obsolete</td><td>Unusual, obsolete or unimplemented (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/create_module.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">create_module</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/gtty.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">gtty</span>(2)</span></a>, …)</td></tr><tr><td>@privileged</td><td>All system calls which need super-user capabilities (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">capabilities</span>(7)</span></a>)</td></tr><tr><td>@process</td><td>Process control, execution, namespaceing operations (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/clone.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">clone</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/kill.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">kill</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/namespaces.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">namespaces</span>(7)</span></a>, …)</td></tr><tr><td>@raw-io</td><td>Raw I/O port access (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/ioperm.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">ioperm</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/iopl.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">iopl</span>(2)</span></a>, <code class=\"function\">pciconfig_read()</code>, …)</td></tr><tr><td>@reboot</td><td>System calls for rebooting and reboot preparation (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/reboot.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">reboot</span>(2)</span></a>, <code class=\"function\">kexec()</code>, …)</td></tr><tr><td>@resources</td><td>System calls for changing resource limits, memory and scheduling parameters (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setrlimit</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/setpriority.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setpriority</span>(2)</span></a>, …)</td></tr><tr><td>@setuid</td><td>System calls for changing user ID and group ID credentials, (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/setuid.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setuid</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/setgid.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setgid</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/setresuid.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">setresuid</span>(2)</span></a>, …)</td></tr><tr><td>@signal</td><td>System calls for manipulating and handling process signals (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/signal.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">signal</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/sigprocmask.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sigprocmask</span>(2)</span></a>, …)</td></tr><tr><td>@swap</td><td>System calls for enabling/disabling swap devices (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/swapon.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">swapon</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/swapoff.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">swapoff</span>(2)</span></a>)</td></tr><tr><td>@sync</td><td>Synchronizing files and memory to disk (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/fsync.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">fsync</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/msync.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">msync</span>(2)</span></a>, and related calls)</td></tr><tr><td>@system-service</td><td>A reasonable set of system calls used by common system services, excluding any special purpose calls. This is the recommended starting point for allow-listing system calls for system services, as it contains what is typically needed by system services, but excludes overly specific interfaces. For example, the following APIs are excluded: \"<code class=\"literal\">@clock</code>\", \"<code class=\"literal\">@mount</code>\", \"<code class=\"literal\">@swap</code>\", \"<code class=\"literal\">@reboot</code>\".</td></tr><tr><td>@timer</td><td>System calls for scheduling operations by time (<a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/alarm.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">alarm</span>(2)</span></a>, <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/timer_create.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">timer_create</span>(2)</span></a>, …)</td></tr></tbody></table></div></div><p><br class=\"table-break\">\n\n        Note, that as new system calls are added to the kernel, additional system calls might be added to the groups\n        above. Contents of the sets may also change between systemd versions. In addition, the list of system calls\n        depends on the kernel version and architecture for which systemd was compiled. Use\n        <span class=\"command\"><strong>systemd-analyze&nbsp;syscall-filter</strong></span> to list the actual list of system calls in each\n        filter.</p><p>Generally, allow-listing system calls (rather than deny-listing) is the safer mode of\n        operation. It is recommended to enforce system call allow lists for all long-running system\n        services. Specifically, the following lines are a relatively safe basic choice for the majority of\n        system services:</p><pre class=\"programlisting\">[Service]\nSystemCallFilter=@system-service\nSystemCallErrorNumber=EPERM</pre><p>Note that various kernel system calls are defined redundantly: there are multiple system calls\n        for executing the same operation. For example, the <code class=\"function\">pidfd_send_signal()</code> system\n        call may be used to execute operations similar to what can be done with the older\n        <code class=\"function\">kill()</code> system call, hence blocking the latter without the former only provides\n        weak protection. Since new system calls are added regularly to the kernel as development progresses,\n        keeping system call deny lists comprehensive requires constant work. It is thus recommended to use\n        allow-listing instead, which offers the benefit that new system calls are by default implicitly\n        blocked until the allow list is updated.</p><p>Also note that a number of system calls are required to be accessible for the dynamic linker to\n        work. The dynamic linker is required for running most regular programs (specifically: all dynamic ELF\n        binaries, which is how most distributions build packaged programs). This means that blocking these\n        system calls (which include <code class=\"function\">open()</code>, <code class=\"function\">openat()</code> or\n        <code class=\"function\">mmap()</code>) will make most programs typically shipped with generic distributions\n        unusable.</p><p>It is recommended to combine the file system namespacing related options with\n        <code class=\"varname\">SystemCallFilter=~@mount</code>, in order to prohibit the unit's processes to undo the\n        mappings. Specifically these are the options <code class=\"varname\">PrivateTmp=</code>,\n        <code class=\"varname\">PrivateDevices=</code>, <code class=\"varname\">ProtectSystem=</code>, <code class=\"varname\">ProtectHome=</code>,\n        <code class=\"varname\">ProtectKernelTunables=</code>, <code class=\"varname\">ProtectControlGroups=</code>,\n        <code class=\"varname\">ProtectKernelLogs=</code>, <code class=\"varname\">ProtectClock=</code>, <code class=\"varname\">ReadOnlyPaths=</code>,\n        <code class=\"varname\">InaccessiblePaths=</code> and <code class=\"varname\">ReadWritePaths=</code>.</p>",
                "SystemCallErrorNumber": "<p>Takes an \"<code class=\"literal\">errno</code>\" error number (between 1 and 4095) or errno name\n        such as <code class=\"constant\">EPERM</code>, <code class=\"constant\">EACCES</code> or <code class=\"constant\">EUCLEAN</code>, to\n        return when the system call filter configured with <code class=\"varname\">SystemCallFilter=</code> is triggered,\n        instead of terminating the process immediately. See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man3/errno.3.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">errno</span>(3)</span></a> for a\n        full list of error codes. When this setting is not used, or when the empty string is assigned, the\n        process will be terminated immediately when the filter is triggered.</p>",
                "SystemCallArchitectures": "<p>Takes a space-separated list of architecture identifiers to include in the system call\n        filter. The known architecture identifiers are the same as for <code class=\"varname\">ConditionArchitecture=</code>\n        described in <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.unit</span>(5)</span></a>,\n        as well as <code class=\"constant\">x32</code>, <code class=\"constant\">mips64-n32</code>, <code class=\"constant\">mips64-le-n32</code>, and\n        the special identifier <code class=\"constant\">native</code>.  The special identifier <code class=\"constant\">native</code>\n        implicitly maps to the native architecture of the system (or more precisely: to the architecture the system\n        manager is compiled for). If running in user mode, or in system mode, but without the\n        <code class=\"constant\">CAP_SYS_ADMIN</code> capability (e.g. setting <code class=\"varname\">User=nobody</code>),\n        <code class=\"varname\">NoNewPrivileges=yes</code> is implied. By default, this option is set to the empty list, i.e. no\n        filtering is applied.</p><p>If this setting is used, processes of this unit will only be permitted to call native system calls, and\n        system calls of the specified architectures. For the purposes of this option, the x32 architecture is treated\n        as including x86-64 system calls. However, this setting still fulfills its purpose, as explained below, on\n        x32.</p><p>System call filtering is not equally effective on all architectures. For example, on x86\n        filtering of network socket-related calls is not possible, due to ABI limitations — a limitation that x86-64\n        does not have, however. On systems supporting multiple ABIs at the same time — such as x86/x86-64 — it is hence\n        recommended to limit the set of permitted system call architectures so that secondary ABIs may not be used to\n        circumvent the restrictions applied to the native ABI of the system. In particular, setting\n        <code class=\"varname\">SystemCallArchitectures=native</code> is a good choice for disabling non-native ABIs.</p><p>System call architectures may also be restricted system-wide via the\n        <code class=\"varname\">SystemCallArchitectures=</code> option in the global configuration. See\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a> for\n        details.</p>",
                "Environment": "<p>Sets environment variables for executed processes. Takes a space-separated list of variable\n        assignments. This option may be specified more than once, in which case all listed variables will be set. If\n        the same variable is set twice, the later setting will override the earlier setting. If the empty string is\n        assigned to this option, the list of environment variables is reset, all prior assignments have no\n        effect. Variable expansion is not performed inside the strings, however, specifier expansion is possible. The $\n        character has no special meaning. If you need to assign a value containing spaces or the equals sign to a\n        variable, use double quotes (\") for the assignment.</p><p>Example:\n        </p><pre class=\"programlisting\">Environment=\"VAR1=word1 word2\" VAR2=word3 \"VAR3=$word 5 6\"</pre><p>\n        gives three variables \"<code class=\"literal\">VAR1</code>\",\n        \"<code class=\"literal\">VAR2</code>\", \"<code class=\"literal\">VAR3</code>\"\n        with the values \"<code class=\"literal\">word1 word2</code>\",\n        \"<code class=\"literal\">word3</code>\", \"<code class=\"literal\">$word 5 6</code>\".\n        </p><p>\n        See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/environ.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">environ</span>(7)</span></a> for details\n        about environment variables.</p><p>Note that environment variables are not suitable for passing secrets (such as passwords, key material, …)\n        to service processes. Environment variables set for a unit are exposed to unprivileged clients via D-Bus IPC,\n        and generally not understood as being data that requires protection. Moreover, environment variables are\n        propagated down the process tree, including across security boundaries (such as setuid/setgid executables), and\n        hence might leak to processes that should not have access to the secret data.</p>",
                "EnvironmentFile": "<p>Similar to <code class=\"varname\">Environment=</code> but reads the environment variables from a text\n        file. The text file should contain new-line-separated variable assignments.  Empty lines, lines without an\n        \"<code class=\"literal\">=</code>\" separator, or lines starting with ; or # will be ignored, which may be used for\n        commenting. A line ending with a backslash will be concatenated with the following one, allowing multiline\n        variable definitions. The parser strips leading and trailing whitespace from the values of assignments, unless\n        you use double quotes (\").</p><p><a target=\"__blank\" class=\"ulink\" href=\"https://en.wikipedia.org/wiki/Escape_sequences_in_C#Table_of_escape_sequences\" target=\"_top\">C escapes</a>\n        are supported, but not\n        <a target=\"__blank\" class=\"ulink\" href=\"https://en.wikipedia.org/wiki/Control_character#In_ASCII\" target=\"_top\">most control characters</a>.\n        \"<code class=\"literal\">\\t</code>\" and \"<code class=\"literal\">\\n</code>\" can be used to insert tabs and newlines within\n        <code class=\"varname\">EnvironmentFile=</code>.</p><p>The argument passed should be an absolute filename or wildcard expression, optionally prefixed with\n        \"<code class=\"literal\">-</code>\", which indicates that if the file does not exist, it will not be read and no error or\n        warning message is logged. This option may be specified more than once in which case all specified files are\n        read. If the empty string is assigned to this option, the list of file to read is reset, all prior assignments\n        have no effect.</p><p>The files listed with this directive will be read shortly before the process is executed (more\n        specifically, after all processes from a previous unit state terminated.  This means you can generate these\n        files in one unit state, and read it with this option in the next.  The files are read from the file\n        system of the service manager, before any file system changes like bind mounts take place).</p><p>Settings from these files override settings made with <code class=\"varname\">Environment=</code>. If the same\n        variable is set twice from these files, the files will be read in the order they are specified and the later\n        setting will override the earlier setting.</p>",
                "PassEnvironment": "<p>Pass environment variables set for the system service manager to executed processes. Takes a\n        space-separated list of variable names. This option may be specified more than once, in which case all listed\n        variables will be passed. If the empty string is assigned to this option, the list of environment variables to\n        pass is reset, all prior assignments have no effect. Variables specified that are not set for the system\n        manager will not be passed and will be silently ignored. Note that this option is only relevant for the system\n        service manager, as system services by default do not automatically inherit any environment variables set for\n        the service manager itself. However, in case of the user service manager all environment variables are passed\n        to the executed processes anyway, hence this option is without effect for the user service manager.</p><p>Variables set for invoked processes due to this setting are subject to being overridden by those\n        configured with <code class=\"varname\">Environment=</code> or <code class=\"varname\">EnvironmentFile=</code>.</p><p><a target=\"__blank\" class=\"ulink\" href=\"https://en.wikipedia.org/wiki/Escape_sequences_in_C#Table_of_escape_sequences\" target=\"_top\">C escapes</a>\n        are supported, but not\n        <a target=\"__blank\" class=\"ulink\" href=\"https://en.wikipedia.org/wiki/Control_character#In_ASCII\" target=\"_top\">most control characters</a>.\n        \"<code class=\"literal\">\\t</code>\" and \"<code class=\"literal\">\\n</code>\" can be used to insert tabs and newlines within\n        <code class=\"varname\">EnvironmentFile=</code>.</p><p>Example:\n        </p><pre class=\"programlisting\">PassEnvironment=VAR1 VAR2 VAR3</pre><p>\n        passes three variables \"<code class=\"literal\">VAR1</code>\",\n        \"<code class=\"literal\">VAR2</code>\", \"<code class=\"literal\">VAR3</code>\"\n        with the values set for those variables in PID1.</p><p>\n        See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/environ.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">environ</span>(7)</span></a> for details\n        about environment variables.</p>",
                "UnsetEnvironment": "<p>Explicitly unset environment variable assignments that would normally be passed from the\n        service manager to invoked processes of this unit. Takes a space-separated list of variable names or variable\n        assignments. This option may be specified more than once, in which case all listed variables/assignments will\n        be unset. If the empty string is assigned to this option, the list of environment variables/assignments to\n        unset is reset. If a variable assignment is specified (that is: a variable name, followed by\n        \"<code class=\"literal\">=</code>\", followed by its value), then any environment variable matching this precise assignment is\n        removed. If a variable name is specified (that is a variable name without any following \"<code class=\"literal\">=</code>\" or\n        value), then any assignment matching the variable name, regardless of its value is removed. Note that the\n        effect of <code class=\"varname\">UnsetEnvironment=</code> is applied as final step when the environment list passed to\n        executed processes is compiled. That means it may undo assignments from any configuration source, including\n        assignments made through <code class=\"varname\">Environment=</code> or <code class=\"varname\">EnvironmentFile=</code>, inherited from\n        the system manager's global set of environment variables, inherited via <code class=\"varname\">PassEnvironment=</code>,\n        set by the service manager itself (such as <code class=\"varname\">$NOTIFY_SOCKET</code> and such), or set by a PAM module\n        (in case <code class=\"varname\">PAMName=</code> is used).</p><p>\n        See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/environ.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">environ</span>(7)</span></a> for details\n        about environment variables.</p>",
                "StandardInput": "<p>Controls where file descriptor 0 (STDIN) of the executed processes is connected to. Takes one\n        of <code class=\"option\">null</code>, <code class=\"option\">tty</code>, <code class=\"option\">tty-force</code>, <code class=\"option\">tty-fail</code>,\n        <code class=\"option\">data</code>, <code class=\"option\">file:<em class=\"replaceable\"><code>path</code></em></code>, <code class=\"option\">socket</code> or\n        <code class=\"option\">fd:<em class=\"replaceable\"><code>name</code></em></code>.</p><p>If <code class=\"option\">null</code> is selected, standard input will be connected to <code class=\"filename\">/dev/null</code>,\n        i.e. all read attempts by the process will result in immediate EOF.</p><p>If <code class=\"option\">tty</code> is selected, standard input is connected to a TTY (as configured by\n        <code class=\"varname\">TTYPath=</code>, see below) and the executed process becomes the controlling process of the\n        terminal. If the terminal is already being controlled by another process, the executed process waits until the\n        current controlling process releases the terminal.</p><p><code class=\"option\">tty-force</code> is similar to <code class=\"option\">tty</code>, but the executed process is forcefully and\n        immediately made the controlling process of the terminal, potentially removing previous controlling processes\n        from the terminal.</p><p><code class=\"option\">tty-fail</code> is similar to <code class=\"option\">tty</code>, but if the terminal already has a\n        controlling process start-up of the executed process fails.</p><p>The <code class=\"option\">data</code> option may be used to configure arbitrary textual or binary data to pass via\n        standard input to the executed process. The data to pass is configured via\n        <code class=\"varname\">StandardInputText=</code>/<code class=\"varname\">StandardInputData=</code> (see below). Note that the actual\n        file descriptor type passed (memory file, regular file, UNIX pipe, …) might depend on the kernel and available\n        privileges. In any case, the file descriptor is read-only, and when read returns the specified data followed by\n        EOF.</p><p>The <code class=\"option\">file:<em class=\"replaceable\"><code>path</code></em></code> option may be used to connect a specific file\n        system object to standard input. An absolute path following the \"<code class=\"literal\">:</code>\" character is expected,\n        which may refer to a regular file, a FIFO or special file. If an <code class=\"constant\">AF_UNIX</code> socket in the\n        file system is specified, a stream socket is connected to it. The latter is useful for connecting standard\n        input of processes to arbitrary system services.</p><p>The <code class=\"option\">socket</code> option is valid in socket-activated services only, and requires the relevant\n        socket unit file (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.socket.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.socket</span>(5)</span></a> for details)\n        to have <code class=\"varname\">Accept=yes</code> set, or to specify a single socket only. If this option is set, standard\n        input will be connected to the socket the service was activated from, which is primarily useful for\n        compatibility with daemons designed for use with the traditional <a target=\"__blank\" href=\"https://www.freebsd.org/cgi/man.cgi?inetd(8)\"><span class=\"citerefentry\"><span class=\"refentrytitle\">inetd</span>(8)</span></a> socket activation\n        daemon.</p><p>The <code class=\"option\">fd:<em class=\"replaceable\"><code>name</code></em></code> option connects standard input to a specific,\n        named file descriptor provided by a socket unit.  The name may be specified as part of this option, following a\n        \"<code class=\"literal\">:</code>\" character (e.g. \"<code class=\"literal\">fd:foobar</code>\").  If no name is specified, the name\n        \"<code class=\"literal\">stdin</code>\" is implied (i.e. \"<code class=\"literal\">fd</code>\" is equivalent to \"<code class=\"literal\">fd:stdin</code>\").\n        At least one socket unit defining the specified name must be provided via the <code class=\"varname\">Sockets=</code>\n        option, and the file descriptor name may differ from the name of its containing socket unit.  If multiple\n        matches are found, the first one will be used.  See <code class=\"varname\">FileDescriptorName=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.socket.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.socket</span>(5)</span></a> for more\n        details about named file descriptors and their ordering.</p><p>This setting defaults to <code class=\"option\">null</code>.</p>",
                "StandardOutput": "<p>Controls where file descriptor 1 (stdout) of the executed processes is connected\n        to. Takes one of <code class=\"option\">inherit</code>, <code class=\"option\">null</code>, <code class=\"option\">tty</code>,\n        <code class=\"option\">journal</code>, <code class=\"option\">kmsg</code>, <code class=\"option\">journal+console</code>,\n        <code class=\"option\">kmsg+console</code>, <code class=\"option\">file:<em class=\"replaceable\"><code>path</code></em></code>,\n        <code class=\"option\">append:<em class=\"replaceable\"><code>path</code></em></code>, <code class=\"option\">socket</code> or\n        <code class=\"option\">fd:<em class=\"replaceable\"><code>name</code></em></code>.</p><p><code class=\"option\">inherit</code> duplicates the file descriptor of standard input for standard output.</p><p><code class=\"option\">null</code> connects standard output to <code class=\"filename\">/dev/null</code>, i.e. everything written\n        to it will be lost.</p><p><code class=\"option\">tty</code> connects standard output to a tty (as configured via <code class=\"varname\">TTYPath=</code>,\n        see below). If the TTY is used for output only, the executed process will not become the controlling process of\n        the terminal, and will not fail or wait for other processes to release the terminal.</p><p><code class=\"option\">journal</code> connects standard output with the journal, which is accessible via\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/journalctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">journalctl</span>(1)</span></a>. Note\n        that everything that is written to kmsg (see below) is implicitly stored in the journal as well, the\n        specific option listed below is hence a superset of this one. (Also note that any external,\n        additional syslog daemons receive their log data from the journal, too, hence this is the option to\n        use when logging shall be processed with such a daemon.)</p><p><code class=\"option\">kmsg</code> connects standard output with the kernel log buffer which is accessible via\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man1/dmesg.1.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">dmesg</span>(1)</span></a>,\n        in addition to the journal. The journal daemon might be configured to send all logs to kmsg anyway, in which\n        case this option is no different from <code class=\"option\">journal</code>.</p><p><code class=\"option\">journal+console</code> and <code class=\"option\">kmsg+console</code> work in a similar way as the\n        two options above but copy the output to the system console as well.</p><p>The <code class=\"option\">file:<em class=\"replaceable\"><code>path</code></em></code> option may be used to connect a specific file\n        system object to standard output. The semantics are similar to the same option of\n        <code class=\"varname\">StandardInput=</code>, see above. If <em class=\"replaceable\"><code>path</code></em> refers to a regular file\n        on the filesystem, it is opened (created if it doesn't exist yet) for writing at the beginning of the file,\n        but without truncating it.\n        If standard input and output are directed to the same file path, it is opened only once, for reading as well\n        as writing and duplicated. This is particularly useful when the specified path refers to an\n        <code class=\"constant\">AF_UNIX</code> socket in the file system, as in that case only a\n        single stream connection is created for both input and output.</p><p><code class=\"option\">append:<em class=\"replaceable\"><code>path</code></em></code> is similar to\n        <code class=\"option\">file:<em class=\"replaceable\"><code>path</code></em></code> above, but it opens the file in append mode.\n        </p><p><code class=\"option\">socket</code> connects standard output to a socket acquired via socket activation. The\n        semantics are similar to the same option of <code class=\"varname\">StandardInput=</code>, see above.</p><p>The <code class=\"option\">fd:<em class=\"replaceable\"><code>name</code></em></code> option connects standard output to a specific,\n        named file descriptor provided by a socket unit.  A name may be specified as part of this option, following a\n        \"<code class=\"literal\">:</code>\" character (e.g. \"<code class=\"literal\">fd:foobar</code>\").  If no name is specified, the name\n        \"<code class=\"literal\">stdout</code>\" is implied (i.e. \"<code class=\"literal\">fd</code>\" is equivalent to\n        \"<code class=\"literal\">fd:stdout</code>\").  At least one socket unit defining the specified name must be provided via the\n        <code class=\"varname\">Sockets=</code> option, and the file descriptor name may differ from the name of its containing\n        socket unit.  If multiple matches are found, the first one will be used.  See\n        <code class=\"varname\">FileDescriptorName=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.socket.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.socket</span>(5)</span></a> for more\n        details about named descriptors and their ordering.</p><p>If the standard output (or error output, see below) of a unit is connected to the journal or\n        the kernel log buffer, the unit will implicitly gain a dependency of type <code class=\"varname\">After=</code>\n        on <code class=\"filename\">systemd-journald.socket</code> (also see the \"Implicit Dependencies\" section\n        above). Also note that in this case stdout (or stderr, see below) will be an\n        <code class=\"constant\">AF_UNIX</code> stream socket, and not a pipe or FIFO that can be re-opened. This means\n        when executing shell scripts the construct <span class=\"command\"><strong>echo \"hello\" &gt; /dev/stderr</strong></span> for\n        writing text to stderr will not work. To mitigate this use the construct <span class=\"command\"><strong>echo \"hello\"\n        &gt;&amp;2</strong></span> instead, which is mostly equivalent and avoids this pitfall.</p><p>This setting defaults to the value set with <code class=\"varname\">DefaultStandardOutput=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a>, which\n        defaults to <code class=\"option\">journal</code>. Note that setting this parameter might result in additional dependencies\n        to be added to the unit (see above).</p>",
                "StandardError": "<p>Controls where file descriptor 2 (stderr) of the executed processes is connected to. The\n        available options are identical to those of <code class=\"varname\">StandardOutput=</code>, with some exceptions: if set to\n        <code class=\"option\">inherit</code> the file descriptor used for standard output is duplicated for standard error, while\n        <code class=\"option\">fd:<em class=\"replaceable\"><code>name</code></em></code> will use a default file descriptor name of\n        \"<code class=\"literal\">stderr</code>\".</p><p>This setting defaults to the value set with <code class=\"varname\">DefaultStandardError=</code> in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-system.conf</span>(5)</span></a>, which\n        defaults to <code class=\"option\">inherit</code>. Note that setting this parameter might result in additional dependencies\n        to be added to the unit (see above).</p>",
                "StandardInputText": "<p>Configures arbitrary textual or binary data to pass via file descriptor 0 (STDIN) to the\n        executed processes. These settings have no effect unless <code class=\"varname\">StandardInput=</code> is set to\n        <code class=\"option\">data</code>. Use this option to embed process input data directly in the unit file.</p><p><code class=\"varname\">StandardInputText=</code> accepts arbitrary textual data. C-style escapes for special\n        characters as well as the usual \"<code class=\"literal\">%</code>\"-specifiers are resolved. Each time this setting is used\n        the specified text is appended to the per-unit data buffer, followed by a newline character (thus every use\n        appends a new line to the end of the buffer). Note that leading and trailing whitespace of lines configured\n        with this option is removed. If an empty line is specified the buffer is cleared (hence, in order to insert an\n        empty line, add an additional \"<code class=\"literal\">\\n</code>\" to the end or beginning of a line).</p><p><code class=\"varname\">StandardInputData=</code> accepts arbitrary binary data, encoded in <a target=\"__blank\" class=\"ulink\" href=\"https://tools.ietf.org/html/rfc2045#section-6.8\" target=\"_top\">Base64</a>. No escape sequences or specifiers are\n        resolved. Any whitespace in the encoded version is ignored during decoding.</p><p>Note that <code class=\"varname\">StandardInputText=</code> and <code class=\"varname\">StandardInputData=</code> operate on the\n        same data buffer, and may be mixed in order to configure both binary and textual data for the same input\n        stream. The textual or binary data is joined strictly in the order the settings appear in the unit\n        file. Assigning an empty string to either will reset the data buffer.</p><p>Please keep in mind that in order to maintain readability long unit file settings may be split into\n        multiple lines, by suffixing each line (except for the last) with a \"<code class=\"literal\">\\</code>\" character (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.unit</span>(5)</span></a> for\n        details). This is particularly useful for large data configured with these two options. Example:</p><pre class=\"programlisting\">…\nStandardInput=data\nStandardInputData=SWNrIHNpdHplIGRhIHVuJyBlc3NlIEtsb3BzLAp1ZmYgZWVtYWwga2xvcHAncy4KSWNrIGtpZWtl \\\n                  LCBzdGF1bmUsIHd1bmRyZSBtaXIsCnVmZiBlZW1hbCBqZWh0IHNlIHVmZiBkaWUgVMO8ci4KTmFu \\\n                  dSwgZGVuayBpY2ssIGljayBkZW5rIG5hbnUhCkpldHogaXNzZSB1ZmYsIGVyc2NodCB3YXIgc2Ug \\\n                  enUhCkljayBqZWhlIHJhdXMgdW5kIGJsaWNrZSDigJQKdW5kIHdlciBzdGVodCBkcmF1w59lbj8g \\\n                  SWNrZSEK\n…</pre>",
                "StandardInputData": "<p>Configures arbitrary textual or binary data to pass via file descriptor 0 (STDIN) to the\n        executed processes. These settings have no effect unless <code class=\"varname\">StandardInput=</code> is set to\n        <code class=\"option\">data</code>. Use this option to embed process input data directly in the unit file.</p><p><code class=\"varname\">StandardInputText=</code> accepts arbitrary textual data. C-style escapes for special\n        characters as well as the usual \"<code class=\"literal\">%</code>\"-specifiers are resolved. Each time this setting is used\n        the specified text is appended to the per-unit data buffer, followed by a newline character (thus every use\n        appends a new line to the end of the buffer). Note that leading and trailing whitespace of lines configured\n        with this option is removed. If an empty line is specified the buffer is cleared (hence, in order to insert an\n        empty line, add an additional \"<code class=\"literal\">\\n</code>\" to the end or beginning of a line).</p><p><code class=\"varname\">StandardInputData=</code> accepts arbitrary binary data, encoded in <a target=\"__blank\" class=\"ulink\" href=\"https://tools.ietf.org/html/rfc2045#section-6.8\" target=\"_top\">Base64</a>. No escape sequences or specifiers are\n        resolved. Any whitespace in the encoded version is ignored during decoding.</p><p>Note that <code class=\"varname\">StandardInputText=</code> and <code class=\"varname\">StandardInputData=</code> operate on the\n        same data buffer, and may be mixed in order to configure both binary and textual data for the same input\n        stream. The textual or binary data is joined strictly in the order the settings appear in the unit\n        file. Assigning an empty string to either will reset the data buffer.</p><p>Please keep in mind that in order to maintain readability long unit file settings may be split into\n        multiple lines, by suffixing each line (except for the last) with a \"<code class=\"literal\">\\</code>\" character (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.unit.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.unit</span>(5)</span></a> for\n        details). This is particularly useful for large data configured with these two options. Example:</p><pre class=\"programlisting\">…\nStandardInput=data\nStandardInputData=SWNrIHNpdHplIGRhIHVuJyBlc3NlIEtsb3BzLAp1ZmYgZWVtYWwga2xvcHAncy4KSWNrIGtpZWtl \\\n                  LCBzdGF1bmUsIHd1bmRyZSBtaXIsCnVmZiBlZW1hbCBqZWh0IHNlIHVmZiBkaWUgVMO8ci4KTmFu \\\n                  dSwgZGVuayBpY2ssIGljayBkZW5rIG5hbnUhCkpldHogaXNzZSB1ZmYsIGVyc2NodCB3YXIgc2Ug \\\n                  enUhCkljayBqZWhlIHJhdXMgdW5kIGJsaWNrZSDigJQKdW5kIHdlciBzdGVodCBkcmF1w59lbj8g \\\n                  SWNrZSEK\n…</pre>",
                "LogLevelMax": "<p>Configures filtering by log level of log messages generated by this unit. Takes a\n        <span class=\"command\"><strong>syslog</strong></span> log level, one of <code class=\"option\">emerg</code> (lowest log level, only highest priority\n        messages), <code class=\"option\">alert</code>, <code class=\"option\">crit</code>, <code class=\"option\">err</code>, <code class=\"option\">warning</code>,\n        <code class=\"option\">notice</code>, <code class=\"option\">info</code>, <code class=\"option\">debug</code> (highest log level, also lowest priority\n        messages). See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man3/syslog.3.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">syslog</span>(3)</span></a> for\n        details. By default no filtering is applied (i.e. the default maximum log level is <code class=\"option\">debug</code>). Use\n        this option to configure the logging system to drop log messages of a specific service above the specified\n        level. For example, set <code class=\"varname\">LogLevelMax=</code><code class=\"option\">info</code> in order to turn off debug logging\n        of a particularly chatty unit. Note that the configured level is applied to any log messages written by any\n        of the processes belonging to this unit, sent via any supported logging protocol. The filtering is applied\n        early in the logging pipeline, before any kind of further processing is done. Moreover, messages which pass\n        through this filter successfully might still be dropped by filters applied at a later stage in the logging\n        subsystem. For example, <code class=\"varname\">MaxLevelStore=</code> configured in\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/journald.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">journald.conf</span>(5)</span></a> might\n        prohibit messages of higher log levels to be stored on disk, even though the per-unit\n        <code class=\"varname\">LogLevelMax=</code> permitted it to be processed.</p>",
                "LogExtraFields": "<p>Configures additional log metadata fields to include in all log records generated by\n        processes associated with this unit. This setting takes one or more journal field assignments in the\n        format \"<code class=\"literal\">FIELD=VALUE</code>\" separated by whitespace. See\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.journal-fields</span>(7)</span></a>\n        for details on the journal field concept. Even though the underlying journal implementation permits\n        binary field values, this setting accepts only valid UTF-8 values. To include space characters in a\n        journal field value, enclose the assignment in double quotes (\"). \n        The usual specifiers are expanded in all assignments (see below). Note that this setting is not only\n        useful for attaching additional metadata to log records of a unit, but given that all fields and\n        values are indexed may also be used to implement cross-unit log record matching. Assign an empty\n        string to reset the list.</p>",
                "LogRateLimitIntervalSec": "<p>Configures the rate limiting that is applied to messages generated by this unit. If, in the\n        time interval defined by <code class=\"varname\">LogRateLimitIntervalSec=</code>, more messages than specified in\n        <code class=\"varname\">LogRateLimitBurst=</code> are logged by a service, all further messages within the interval are\n        dropped until the interval is over. A message about the number of dropped messages is generated. The time\n        specification for <code class=\"varname\">LogRateLimitIntervalSec=</code> may be specified in the following units: \"s\",\n        \"min\", \"h\", \"ms\", \"us\" (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a> for details).\n        The default settings are set by <code class=\"varname\">RateLimitIntervalSec=</code> and <code class=\"varname\">RateLimitBurst=</code>\n        configured in <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/journald.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">journald.conf</span>(5)</span></a>.\n        </p>",
                "LogRateLimitBurst": "<p>Configures the rate limiting that is applied to messages generated by this unit. If, in the\n        time interval defined by <code class=\"varname\">LogRateLimitIntervalSec=</code>, more messages than specified in\n        <code class=\"varname\">LogRateLimitBurst=</code> are logged by a service, all further messages within the interval are\n        dropped until the interval is over. A message about the number of dropped messages is generated. The time\n        specification for <code class=\"varname\">LogRateLimitIntervalSec=</code> may be specified in the following units: \"s\",\n        \"min\", \"h\", \"ms\", \"us\" (see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd.time.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd.time</span>(7)</span></a> for details).\n        The default settings are set by <code class=\"varname\">RateLimitIntervalSec=</code> and <code class=\"varname\">RateLimitBurst=</code>\n        configured in <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/journald.conf.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">journald.conf</span>(5)</span></a>.\n        </p>",
                "LogNamespace": "<p>Run the unit's processes in the specified journal namespace. Expects a short\n        user-defined string identifying the namespace. If not used the processes of the service are run in\n        the default journal namespace, i.e. their log stream is collected and processed by\n        <code class=\"filename\">systemd-journald.service</code>. If this option is used any log data generated by\n        processes of this unit (regardless if via the <code class=\"function\">syslog()</code>, journal native logging\n        or stdout/stderr logging) is collected and processed by an instance of the\n        <code class=\"filename\">systemd-journald@.service</code> template unit, which manages the specified\n        namespace. The log data is stored in a data store independent from the default log namespace's data\n        store. See\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/systemd-journald.service.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">systemd-journald.service</span>(8)</span></a>\n        for details about journal namespaces.</p><p>Internally, journal namespaces are implemented through Linux mount namespacing and\n        over-mounting the directory that contains the relevant <code class=\"constant\">AF_UNIX</code> sockets used for\n        logging in the unit's mount namespace. Since mount namespaces are used this setting disconnects\n        propagation of mounts from the unit's processes to the host, similar to how\n        <code class=\"varname\">ReadOnlyPaths=</code> and similar settings (see above) work. Journal namespaces may hence\n        not be used for services that need to establish mount points on the host.</p><p>When this option is used the unit will automatically gain ordering and requirement dependencies\n        on the two socket units associated with the <code class=\"filename\">systemd-journald@.service</code> instance\n        so that they are automatically established prior to the unit starting up. Note that when this option\n        is used log output of this service does not appear in the regular\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/journalctl.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">journalctl</span>(1)</span></a>\n        output, unless the <code class=\"option\">--namespace=</code> option is used.</p>",
                "SyslogIdentifier": "<p>Sets the process name (\"<span class=\"command\"><strong>syslog</strong></span> tag\") to prefix log lines sent to\n        the logging system or the kernel log buffer with. If not set, defaults to the process name of the\n        executed process.  This option is only useful when <code class=\"varname\">StandardOutput=</code> or\n        <code class=\"varname\">StandardError=</code> are set to <code class=\"option\">journal</code> or <code class=\"option\">kmsg</code> (or to\n        the same settings in combination with <code class=\"option\">+console</code>) and only applies to log messages\n        written to stdout or stderr.</p>",
                "SyslogFacility": "<p>Sets the <span class=\"command\"><strong>syslog</strong></span> facility identifier to use when logging. One of\n        <code class=\"option\">kern</code>, <code class=\"option\">user</code>, <code class=\"option\">mail</code>, <code class=\"option\">daemon</code>,\n        <code class=\"option\">auth</code>, <code class=\"option\">syslog</code>, <code class=\"option\">lpr</code>, <code class=\"option\">news</code>,\n        <code class=\"option\">uucp</code>, <code class=\"option\">cron</code>, <code class=\"option\">authpriv</code>, <code class=\"option\">ftp</code>,\n        <code class=\"option\">local0</code>, <code class=\"option\">local1</code>, <code class=\"option\">local2</code>, <code class=\"option\">local3</code>,\n        <code class=\"option\">local4</code>, <code class=\"option\">local5</code>, <code class=\"option\">local6</code> or\n        <code class=\"option\">local7</code>. See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man3/syslog.3.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">syslog</span>(3)</span></a> for\n        details. This option is only useful when <code class=\"varname\">StandardOutput=</code> or\n        <code class=\"varname\">StandardError=</code> are set to <code class=\"option\">journal</code> or <code class=\"option\">kmsg</code> (or to\n        the same settings in combination with <code class=\"option\">+console</code>), and only applies to log messages\n        written to stdout or stderr. Defaults to <code class=\"option\">daemon</code>.</p>",
                "SyslogLevel": "<p>The default <span class=\"command\"><strong>syslog</strong></span> log level to use when logging to the logging system or\n        the kernel log buffer. One of <code class=\"option\">emerg</code>, <code class=\"option\">alert</code>, <code class=\"option\">crit</code>,\n        <code class=\"option\">err</code>, <code class=\"option\">warning</code>, <code class=\"option\">notice</code>, <code class=\"option\">info</code>,\n        <code class=\"option\">debug</code>. See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man3/syslog.3.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">syslog</span>(3)</span></a> for\n        details. This option is only useful when <code class=\"varname\">StandardOutput=</code> or\n        <code class=\"varname\">StandardError=</code> are set to <code class=\"option\">journal</code> or\n        <code class=\"option\">kmsg</code> (or to the same settings in combination with <code class=\"option\">+console</code>), and only applies\n        to log messages written to stdout or stderr. Note that individual lines output by executed processes may be\n        prefixed with a different log level which can be used to override the default log level specified here. The\n        interpretation of these prefixes may be disabled with <code class=\"varname\">SyslogLevelPrefix=</code>, see below. For\n        details, see <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/sd-daemon.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd-daemon</span>(3)</span></a>.\n        Defaults to <code class=\"option\">info</code>.</p>",
                "SyslogLevelPrefix": "<p>Takes a boolean argument. If true and <code class=\"varname\">StandardOutput=</code> or\n        <code class=\"varname\">StandardError=</code> are set to <code class=\"option\">journal</code> or <code class=\"option\">kmsg</code> (or to\n        the same settings in combination with <code class=\"option\">+console</code>), log lines written by the executed\n        process that are prefixed with a log level will be processed with this log level set but the prefix\n        removed. If set to false, the interpretation of these prefixes is disabled and the logged lines are\n        passed on as-is. This only applies to log messages written to stdout or stderr. For details about\n        this prefixing see\n        <a target=\"__blank\" href=\"https://www.freedesktop.org/software/systemd/man/sd-daemon.html#\"><span class=\"citerefentry\"><span class=\"refentrytitle\">sd-daemon</span>(3)</span></a>.\n        Defaults to true.</p>",
                "TTYPath": "<p>Sets the terminal device node to use if standard input, output, or error are connected to a TTY\n        (see above). Defaults to <code class=\"filename\">/dev/console</code>.</p>",
                "TTYReset": "<p>Reset the terminal device specified with <code class=\"varname\">TTYPath=</code> before and after\n        execution.  Defaults to \"<code class=\"literal\">no</code>\".</p>",
                "TTYVHangup": "<p>Disconnect all clients which have opened the terminal device specified with\n        <code class=\"varname\">TTYPath=</code> before and after execution. Defaults to \"<code class=\"literal\">no</code>\".</p>",
                "TTYVTDisallocate": "<p>If the terminal device specified with <code class=\"varname\">TTYPath=</code> is a virtual console\n        terminal, try to deallocate the TTY before and after execution. This ensures that the screen and scrollback\n        buffer is cleared. Defaults to \"<code class=\"literal\">no</code>\".</p>",
                "UtmpIdentifier": "<p>Takes a four character identifier string for an <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man5/utmp.5.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">utmp</span>(5)</span></a> and wtmp entry\n        for this service. This should only be set for services such as <span class=\"command\"><strong>getty</strong></span> implementations (such\n        as <a target=\"__blank\" href=\"http://linux.die.net/man/8/agetty\"><span class=\"citerefentry\"><span class=\"refentrytitle\">agetty</span>(8)</span></a>) where utmp/wtmp\n        entries must be created and cleared before and after execution, or for services that shall be executed as if\n        they were run by a <span class=\"command\"><strong>getty</strong></span> process (see below). If the configured string is longer than four\n        characters, it is truncated and the terminal four characters are used. This setting interprets %I style string\n        replacements. This setting is unset by default, i.e. no utmp/wtmp entries are created or cleaned up for this\n        service.</p>",
                "UtmpMode": "<p>Takes one of \"<code class=\"literal\">init</code>\", \"<code class=\"literal\">login</code>\" or \"<code class=\"literal\">user</code>\". If\n         <code class=\"varname\">UtmpIdentifier=</code> is set, controls which type of <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man5/utmp.5.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">utmp</span>(5)</span></a>/wtmp entries\n         for this service are generated. This setting has no effect unless <code class=\"varname\">UtmpIdentifier=</code> is set\n         too. If \"<code class=\"literal\">init</code>\" is set, only an <code class=\"constant\">INIT_PROCESS</code> entry is generated and the\n         invoked process must implement a <span class=\"command\"><strong>getty</strong></span>-compatible utmp/wtmp logic. If\n         \"<code class=\"literal\">login</code>\" is set, first an <code class=\"constant\">INIT_PROCESS</code> entry, followed by a\n         <code class=\"constant\">LOGIN_PROCESS</code> entry is generated. In this case, the invoked process must implement a\n         <a target=\"__blank\" href=\"http://linux.die.net/man/1/login\"><span class=\"citerefentry\"><span class=\"refentrytitle\">login</span>(1)</span></a>-compatible\n         utmp/wtmp logic. If \"<code class=\"literal\">user</code>\" is set, first an <code class=\"constant\">INIT_PROCESS</code> entry, then a\n         <code class=\"constant\">LOGIN_PROCESS</code> entry and finally a <code class=\"constant\">USER_PROCESS</code> entry is\n         generated. In this case, the invoked process may be any process that is suitable to be run as session\n         leader. Defaults to \"<code class=\"literal\">init</code>\".</p>",
                "KillMode": "<p>Specifies how processes of this unit shall be killed. One of\n        <code class=\"option\">control-group</code>, <code class=\"option\">mixed</code>, <code class=\"option\">process</code>,\n        <code class=\"option\">none</code>.</p><p>If set to <code class=\"option\">control-group</code>, all remaining processes in the control group of this\n        unit will be killed on unit stop (for services: after the stop command is executed, as configured\n        with <code class=\"varname\">ExecStop=</code>). If set to <code class=\"option\">mixed</code>, the\n        <code class=\"constant\">SIGTERM</code> signal (see below) is sent to the main process while the subsequent\n        <code class=\"constant\">SIGKILL</code> signal (see below) is sent to all remaining processes of the unit's\n        control group. If set to <code class=\"option\">process</code>, only the main process itself is killed (not\n        recommended!). If set to <code class=\"option\">none</code>, no process is killed (strongly recommended\n        against!). In this case, only the stop command will be executed on unit stop, but no process will be\n        killed otherwise.  Processes remaining alive after stop are left in their control group and the\n        control group continues to exist after stop unless empty.</p><p>Note that it is not recommended to set <code class=\"varname\">KillMode=</code> to\n        <code class=\"constant\">process</code> or even <code class=\"constant\">none</code>, as this allows processes to escape\n        the service manager's lifecycle and resource management, and to remain running even while their\n        service is considered stopped and is assumed to not consume any resources.</p><p>Processes will first be terminated via <code class=\"constant\">SIGTERM</code> (unless the signal to send\n        is changed via <code class=\"varname\">KillSignal=</code> or <code class=\"varname\">RestartKillSignal=</code>). Optionally,\n        this is immediately followed by a <code class=\"constant\">SIGHUP</code> (if enabled with\n        <code class=\"varname\">SendSIGHUP=</code>). If processes still remain after the main process of a unit has\n        exited or the delay configured via the <code class=\"varname\">TimeoutStopSec=</code> has passed, the termination\n        request is repeated with the <code class=\"constant\">SIGKILL</code> signal or the signal specified via\n        <code class=\"varname\">FinalKillSignal=</code> (unless this is disabled via the <code class=\"varname\">SendSIGKILL=</code>\n        option). See <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man2/kill.2.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">kill</span>(2)</span></a>\n        for more information.</p><p>Defaults to <code class=\"option\">control-group</code>.</p>",
                "KillSignal": "<p>Specifies which signal to use when stopping a service. This controls the signal that\n        is sent as first step of shutting down a unit (see above), and is usually followed by\n        <code class=\"constant\">SIGKILL</code> (see above and below). For a list of valid signals, see\n        <a target=\"__blank\" href=\"http://man7.org/linux/man-pages/man7/signal.7.html\"><span class=\"citerefentry\"><span class=\"refentrytitle\">signal</span>(7)</span></a>.\n        Defaults to <code class=\"constant\">SIGTERM</code>.</p><p>Note that, right after sending the signal specified in this setting, systemd will always send\n        <code class=\"constant\">SIGCONT</code>, to ensure that even suspended tasks can be terminated cleanly.</p>",
                "RestartKillSignal": "<p>Specifies which signal to use when restarting a service. The same as\n        <code class=\"varname\">KillSignal=</code> described above, with the exception that this setting is used in a\n        restart job. Not set by default, and the value of <code class=\"varname\">KillSignal=</code> is used.</p>",
                "SendSIGHUP": "<p>Specifies whether to send\n        <code class=\"constant\">SIGHUP</code> to remaining processes immediately\n        after sending the signal configured with\n        <code class=\"varname\">KillSignal=</code>. This is useful to indicate to\n        shells and shell-like programs that their connection has been\n        severed. Takes a boolean value. Defaults to \"no\".\n        </p>",
                "SendSIGKILL": "<p>Specifies whether to send\n        <code class=\"constant\">SIGKILL</code> (or the signal specified by\n        <code class=\"varname\">FinalKillSignal=</code>) to remaining processes\n        after a timeout, if the normal shutdown procedure left\n        processes of the service around. When disabled, a\n        <code class=\"varname\">KillMode=</code> of <code class=\"constant\">control-group</code>\n        or <code class=\"constant\">mixed</code> service will not restart if\n        processes from prior services exist within the control group.\n        Takes a boolean value. Defaults to \"yes\".\n        </p>",
                "FinalKillSignal": "<p>Specifies which signal to send to remaining\n        processes after a timeout if <code class=\"varname\">SendSIGKILL=</code>\n        is enabled. The signal configured here should be one that is\n        not typically caught and processed by services (<code class=\"constant\">SIGTERM</code>\n        is not suitable). Developers can find it useful to use this to\n        generate a coredump to troubleshoot why a service did not\n        terminate upon receiving the initial <code class=\"constant\">SIGTERM</code>\n        signal. This can be achieved by configuring <code class=\"varname\">LimitCORE=</code>\n        and setting <code class=\"varname\">FinalKillSignal=</code> to either\n        <code class=\"constant\">SIGQUIT</code> or <code class=\"constant\">SIGABRT</code>.\n        Defaults to <code class=\"constant\">SIGKILL</code>.\n        </p>",
                "WatchdogSignal": "<p>Specifies which signal to use to terminate the\n        service when the watchdog timeout expires (enabled through\n        <code class=\"varname\">WatchdogSec=</code>). Defaults to <code class=\"constant\">SIGABRT</code>.\n        </p>"
            },
            install:
                {
                    "Alias":"<p>启用时使用的别名，可以设为一个空格分隔的别名列表。 每个别名的后缀(也就是单元类型)都必须与该单元自身的后缀相同。 如果多次使用此选项，那么每个选项所设置的别名都会被添加到别名列表中。 在启用此单元时，<span class= \"command \"><strong>systemctl enable</strong></span> 命令将会为每个别名创建一个指向该单元文件的软连接。 注意，因为 mount, slice, swap, automount 单元不支持别名， 所以不要在这些类型的单元中使用此选项。</p>",
                    "WantedBy": "<p>接受一个空格分隔的单元列表， 表示在使用 <span class= \"command \"><strong>systemctl enable</strong></span> 启用此单元时， 将会在每个列表单元的 <code class= \"filename \">.wants/</code> 或 <code class= \"filename \">.requires/</code> 目录中创建一个指向该单元文件的软连接。 这相当于为每个列表中的单元文件添加了 <code class= \"varname \">Wants=此单元</code> 或 <code class= \"varname \">Requires=此单元</code> 选项。 这样当列表中的任意一个单元启动时，该单元都会被启动。 有关 <code class= \"varname \">Wants=</code> 与 <code class= \"varname \">Requires=</code> 的详细说明， 参见前面 [Unit] 小节的说明。 如果多次使用此选项， 那么每个选项的单元列表都会合并在一起。</p><p>在普通的 <code class= \"filename \">bar.service</code> 单元内设置 <span class= \"command \"><strong>WantedBy=foo.service</strong></span> 选项 与设置 <span class= \"command \"><strong>Alias=foo.service.wants/bar.service</strong></span> 选项基本上是等价的。 但是对于模板单元来说，情况则有所不同。 虽然必须使用实例名称调用 <span class= \"command \"><strong>systemctl enable</strong></span> 命令， 但是实际上添加到 <code class= \"filename \">.wants/</code> 或 <code class= \"filename \">.requires/</code> 目录中的软连接， 指向的却是模板单元(因为并不存在真正的单元实例文件)。 假设 <code class= \"filename \">getty@.service</code> 文件中存在 <span class= \"command \"><strong>WantedBy=getty.target</strong></span> 选项，那么  <span class= \"command \"><strong>systemctl enable getty@tty2.service</strong></span> 命令将会创建一个 <code class= \"filename \">getty.target.wants/getty@tty2.service</code> 软连接(指向 <code class= \"filename \">getty@.service</code>) </p>",
                    "RequiredBy": "<p>接受一个空格分隔的单元列表， 表示在使用 <span class= \"command \"><strong>systemctl enable</strong></span> 启用此单元时， 将会在每个列表单元的 <code class= \"filename \">.wants/</code> 或 <code class= \"filename \">.requires/</code> 目录中创建一个指向该单元文件的软连接。 这相当于为每个列表中的单元文件添加了 <code class= \"varname \">Wants=此单元</code> 或 <code class= \"varname \">Requires=此单元</code> 选项。 这样当列表中的任意一个单元启动时，该单元都会被启动。 有关 <code class= \"varname \">Wants=</code> 与 <code class= \"varname \">Requires=</code> 的详细说明， 参见前面 [Unit] 小节的说明。 如果多次使用此选项， 那么每个选项的单元列表都会合并在一起。</p><p>在普通的 <code class= \"filename \">bar.service</code> 单元内设置 <span class= \"command \"><strong>WantedBy=foo.service</strong></span> 选项 与设置 <span class= \"command \"><strong>Alias=foo.service.wants/bar.service</strong></span> 选项基本上是等价的。 但是对于模板单元来说，情况则有所不同。 虽然必须使用实例名称调用 <span class= \"command \"><strong>systemctl enable</strong></span> 命令， 但是实际上添加到 <code class= \"filename \">.wants/</code> 或 <code class= \"filename \">.requires/</code> 目录中的软连接， 指向的却是模板单元(因为并不存在真正的单元实例文件)。 假设 <code class= \"filename \">getty@.service</code> 文件中存在 <span class= \"command \"><strong>WantedBy=getty.target</strong></span> 选项，那么  <span class= \"command \"><strong>systemctl enable getty@tty2.service</strong></span> 命令将会创建一个 <code class= \"filename \">getty.target.wants/getty@tty2.service</code> 软连接(指向 <code class= \"filename \">getty@.service</code>) </p>",
                    "Also": "<p>设置此单元的附属单元，可以设为一个空格分隔的单元列表。表示当使用 <span class= \"command \"><strong>systemctl enable</strong></span> 启用    或 <span class= \"command \"><strong>systemctl disable</strong></span> 停用    此单元时，    也同时自动的启用或停用附属单元。</p><p>如果多次使用此选项，    那么每个选项所设置的附属单元列表    都会合并在一起。</p>",
                    "DefaultInstance":"<p>仅对模板单元有意义， 用于指定默认的实例名称。 如果启用此单元时没有指定实例名称， 那么 将使用这里设置的名称。</p>"}
        };

        $scope.unitVisibleItems = ['Description', 'After', 'Wants'];
        $scope.installVisibleItems = ['WantedBy'];
        $scope.serviceVisibleItems = ['Type', 'ExecStart', 'Restart', 'Environment'];

        $scope.unit = {
            Description: 'This unit will start after internet connection',
            Documentation: [],
            After: ['network.target'],
            Wants: ['network-online.target'],
            Requires: [],
            Requisite: [],
            BindsTo: [],
            PartOf: [],
            Conflicts: [],
            Before: [],
            OnFailure: [],
            PropagatesReloadTo: [],
            ReloadPropagatedFrom: [],
            JoinsNamespaceOf: [],
            RequiresMountsFor: [],
            OnFailureJobMode: 'replace',
            IgnoreOnIsolate: false,
            StopWhenUnneeded: false,
            RefuseManualStart: false,
            RefuseManualStop: false,
            AllowIsolate: false,
            DefaultDependencies: "yes",
            CollectMode: "inactive",
            FailureAction: 'none',
            SuccessAction: 'none',
            FailureActionExitStatus: '',
            SuccessActionExitStatus: '',
            JobTimeoutSec: 'infinity',
            JobRunningTimeoutSec: 'infinity',
            JobTimeoutAction: "",
            JobTimeoutRebootArgument: "",
            StartLimitIntervalSec: "",
            StartLimitBurst: "",
            StartLimitAction: "",
            RebootArgument: "",
            SourcePath: "",
            ConditionArchitecture: "",
            ConditionVirtualization: "",
            ConditionHost: "",
            ConditionKernelCommandLine: "",
            ConditionKernelVersion: "",
            ConditionEnvironment: "",
            ConditionSecurity: "",
            ConditionCapability: "",
            ConditionACPower: "",
            ConditionNeedsUpdate: "",
            ConditionFirstBoot: "",
            ConditionPathExists: "",
            ConditionPathExistsGlob: "",
            ConditionPathIsDirectory: "",
            ConditionPathIsSymbolicLink: "",
            ConditionPathIsMountPoint: "",
            ConditionPathIsReadWrite: "",
            ConditionPathIsEncrypted: "",
            ConditionDirectoryNotEmpty: "",
            ConditionFileNotEmpty: "",
            ConditionFileIsExecutable: "",
            ConditionUser: "",
            ConditionGroup: "",
            ConditionControlGroupController: "",
            ConditionMemory: "",
            ConditionCPUs: "",
            AssertArchitecture: "",
            AssertVirtualization: "",
            AssertHost: "",
            AssertKernelCommandLine: "",
            AssertKernelVersion: "",
            AssertSecurity: "",
            AssertCapability: "",
            AssertACPower: "",
            AssertNeedsUpdate: "",
            AssertFirstBoot: "",
            AssertPathExists: "",
            AssertPathExistsGlob: "",
            AssertPathIsDirectory: "",
            AssertPathIsSymbolicLink: "",
            AssertPathIsMountPoint: "",
            AssertPathIsReadWrite: "",
            AssertDirectoryNotEmpty: "",
            AssertFileNotEmpty: "",
            AssertFileIsExecutable: "",
            AssertUser: "",
            AssertGroup: "",
            AssertControlGroupController: "",
        };
        $scope.install = {
            WantedBy: ['multi-user.target'],
            Alias: "",
            RequiredBy: [],
            Also: [],
            DefaultInstance: "",
        };

        $scope.enums = {
            unit: {
                CollectMode: [
                    'inactive',
                    'inactive-or-failed',

                ],
                FailureAction: [
                    'none',
                    'reboot',
                    'reboot-force',
                    'reboot-immediate',
                    'poweroff',
                    'poweroff-force',
                    'poweroff-immediate',
                    'exit',
                    'exit-force'
                ],
                SuccessAction: [
                    'none',
                    'reboot',
                    'reboot-force',
                    'reboot-immediate',
                    'poweroff',
                    'poweroff-force',
                    'poweroff-immediate',
                    'exit',
                    'exit-force'
                ],
                OnFailureJobMode: [
                    'fail',
                    'replace',
                    'replace-irreversibly',
                    'isolate',
                    'flush',
                    'ignore-dependencies',
                    'ignore-requirements'
                ],
                DefaultDependencies: [
                    'yes',
                    'no'
                ]
            },
            service: {
                Type: [
                    'simple',
                    'exec',
                    'forking',
                    'oneshot',
                    'dbus',
                    'notify',
                    'idle'
                ],
                Restart: [
                    'no',
                    'on-success',
                    'on-failure',
                    'on-abnormal',
                    'on-watchdog',
                    'on-abort',
                    'always',
                ],
                NotifyAccess: [
                    'none',
                    'main',
                    'exec',
                    'all'
                ],
                OOMPolicy: [
                    'continue',
                    'stop',
                    'kill'
                ],
                CPUSchedulingPolicy: [
                    'other',
                    'batch',
                    'idle',
                    'fifo',
                    'rr'
                ],
                IOSchedulingClass: [
                    'none',
                    'realtime',
                    'best-effort',
                    'idle'
                ],
                ProtectSystem: [
                    'true',
                    'false',
                    'full',
                    'strict'
                ],
                ProtectHome: [
                    'true',
                    'false',
                    'read-only',
                    'tmpfs'
                ],
                LogLevelMax: [
                    'emerg',
                    'alert',
                    'crit',
                    'err',
                    'warning',
                    'notice',
                    'info',
                    'debug'
                ],
                SyslogLevel: [
                    'emerg',
                    'alert',
                    'crit',
                    'err',
                    'warning',
                    'notice',
                    'info',
                    'debug'
                ],
                SyslogFacility: [
                    'kern',
                    'user',
                    'mail',
                    'daemon',
                    'auth',
                    'syslog',
                    'lpr',
                    'news',
                    'uucp',
                    'cron',
                    'authpriv',
                    'ftp',
                    'local0',
                    'local1',
                    'local2',
                    'local3',
                    'local4',
                    'local5',
                    'local6',
                    'local7'
                ]
            },
        };

        $scope.showOptionsDialogue = function (ev, section, selectedSection) {

            $mdDialog.show({
                bindToController: true,
                locals: {
                    items: Object.keys($scope[section]),
                    selected: $scope[selectedSection]
                },
                controller: ['$scope', '$mdDialog', 'items', 'selected', function ($scope, $mdDialog, items, selected) {
                    $scope.items = items;
                    $scope.selected = selected;

                    $scope.close = function () {
                        $mdDialog.hide($scope.selected);
                    };
                    $scope.cancel = function () {
                        $mdDialog.cancel();
                    }
                }],
                template: `
        <md-dialog>
         <md-dialog-content>
           <div class="md-dialog-content">
            <md-input-container>
                <label>Options</label>
                <md-select ng-model="selected" multiple>
                    <md-optgroup label="Options">
                        <md-option ng-value="option" ng-repeat="option in items">
                            {{option}}
                        </md-option>
                    </md-optgroup>
                </md-select>
             
             </md-input-container>
             </div>
                
                <md-dialog-actions layout="row">
                <md-button ng-click="cancel()">
                    Cancel
                  </md-button>
                  <span flex></span>
                  <md-button ng-click="close()">
                    Ok
                  </md-button>
                </md-dialog-actions>                
        </md-dialog>`,
                parent: angular.element(document.body),
                targetEvent: ev
            }).then((selected) => {
                $scope[selectedSection] = selected;
            }).catch(console.log);

        };

        $scope.service = {
            Restart: 'always',
            Type: 'simple',
            RemainAfterExit: 'no',
            GuessMainPID: 'yes',
            PIDFile: '',
            BusName: '',
            ExecStart: '',
            ExecStartPre: '',
            ExecStartPost: '',
            ExecCondition: '',
            ExecReload: '',
            ExecStop: '',
            ExecStopPost: '',
            RestartSec: '100ms',
            TimeoutStartSec: '',
            TimeoutStopSec: '',
            TimeoutAbortSec: '',
            TimeoutSec: '',
            TimeoutStartFailureMode: '',
            TimeoutStopFailureMode: '',
            RuntimeMaxSec: '',
            WatchdogSec: '',
            SuccessExitStatus: '',
            RestartPreventExitStatus: true,
            RestartForceExitStatus: '',
            RootDirectoryStartOnly: false,
            NonBlocking: '',
            NotifyAccess: 'none',
            Sockets: '',
            FileDescriptorStoreMax: '',
            USBFunctionDescriptors: '',
            USBFunctionStrings: '',
            OOMPolicy: '',
            WorkingDirectory: '',
            RootDirectory: '',
            RootImage: '',
            RootHash: '',
            RootHashSignature: '',
            RootVerity: '',
            MountAPIVFS: '',
            BindPaths: '',
            BindReadOnlyPaths: '',
            User: '',
            Group: '',
            DynamicUser: '',
            SupplementaryGroups: '',
            PAMName: '',
            CapabilityBoundingSet: '',
            AmbientCapabilities: '',
            NoNewPrivileges: '',
            SecureBits: '',
            SELinuxContext: '',
            AppArmorProfile: '',
            SmackProcessLabel: '',
            LimitCPU: '',
            LimitFSIZE: '',
            LimitDATA: '',
            LimitSTACK: '',
            LimitCORE: '',
            LimitRSS: '',
            LimitNOFILE: '',
            LimitAS: '',
            LimitNPROC: '',
            LimitMEMLOCK: '',
            LimitLOCKS: '',
            LimitSIGPENDING: '',
            LimitMSGQUEUE: '',
            LimitNICE: '',
            LimitRTPRIO: '',
            LimitRTTIME: '',
            UMask: '',
            CoredumpFilter: '',
            KeyringMode: '',
            OOMScoreAdjust: 0,
            TimerSlackNSec: '',
            Personality: '',
            IgnoreSIGPIPE: true,
            Nice: '',
            CPUSchedulingPolicy: '',
            CPUSchedulingPriority: '',
            CPUSchedulingResetOnFork: false,
            CPUAffinity: '',
            NUMAPolicy: '',
            NUMAMask: '',
            IOSchedulingClass: '',
            IOSchedulingPriority: '',
            ProtectSystem: '',
            ProtectHome: '',
            RuntimeDirectory: '',
            StateDirectory: '',
            CacheDirectory: '',
            LogsDirectory: '',
            ConfigurationDirectory: '',
            RuntimeDirectoryMode: '',
            StateDirectoryMode: '',
            CacheDirectoryMode: '',
            LogsDirectoryMode: '',
            ConfigurationDirectoryMode: '',
            RuntimeDirectoryPreserve: '',
            TimeoutCleanSec: '',
            ReadWritePaths: [],
            ReadOnlyPaths: [],
            InaccessiblePaths: [],
            TemporaryFileSystem: '',
            PrivateTmp: '',
            PrivateDevices: [],
            PrivateNetwork: false,
            NetworkNamespacePath: '',
            PrivateUsers: false,
            ProtectHostname: false,
            ProtectClock: false,
            ProtectKernelTunables: false,
            ProtectKernelModules: false,
            ProtectKernelLogs: false,
            ProtectControlGroups: false,
            RestrictAddressFamilies: [],
            RestrictNamespaces: [],
            LockPersonality: false,
            MemoryDenyWriteExecute: false,
            RestrictRealtime: false,
            RestrictSUIDSGID: false,
            RemoveIPC: false,
            PrivateMounts: false,
            MountFlags: '',
            SystemCallFilter: [],
            SystemCallErrorNumber: '',
            SystemCallArchitectures: [],
            Environment: ["'TEST=test'"],
            EnvironmentFile: '',
            PassEnvironment: '',
            UnsetEnvironment: '',
            StandardInput: '',
            StandardOutput: '',
            StandardError: '',
            StandardInputText: '',
            StandardInputData: '',
            LogLevelMax: '',
            LogExtraFields: '',
            LogRateLimitIntervalSec: '',
            LogRateLimitBurst: '',
            LogNamespace: '',
            SyslogIdentifier: '',
            SyslogFacility: '',
            SyslogLevel: '',
            SyslogLevelPrefix: '',
            TTYPath: '',
            TTYReset: '',
            TTYVHangup: '',
            TTYVTDisallocate: '',
            UtmpIdentifier: '',
            UtmpMode: '',
            KillMode: '',
            KillSignal: '',
            RestartKillSignal: '',
            SendSIGHUP: '',
            SendSIGKILL: '',
            FinalKillSignal: '',
            WatchdogSignal: '',
        };

        $scope.addMapVariable = function (section, term) {

            if ($scope.inputKey && $scope.inputVar) {
                $scope[section][term].push("'" + $scope.inputKey + "=" + $scope.inputVar + "'");
                $scope.inputKey = '';
                $scope.inputVar = '';
            }
        };

        $scope.download = function (ev) {

            const confirm = $mdDialog.prompt()
                .title('Service Name')
                .textContent('Insert service file name')
                .placeholder('Service name')
                .ariaLabel('Service')
                .initialValue('example')
                .targetEvent(ev)
                .required(true)
                .ok('Download')
                .cancel('Cancel');

            $mdDialog.show(confirm)
                .then(function (name) {

                    if (!name.endsWith(".service")) {
                        name += ".service";
                    }

                    const serviceFile = document
                        .getElementById("preview")
                        .innerText
                        .replace(/^\n+(?!\[)/gm, "");

                    createFile(name, serviceFile);

                }, function () {
                    //Ignore
                });
        };

        function createFile(filename, text) {
            const pom = document.createElement('a');
            pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            pom.setAttribute('download', filename);

            if (document.createEvent) {
                const event = document.createEvent('MouseEvents');
                event.initEvent('click', true, true);
                pom.dispatchEvent(event);
            } else {
                pom.click();
            }
        }

    }])
    .directive('dPreview', ['$compile', '$interpolate', function ($compile, $interpolate) {
        return {
            scope: false,
            replace: true,
            link: function (scope, iElement, iAttrs) {

                let elementToCompile = '<div id="preview" class="preview"><span class="section">[Unit]</br></span>';

                Object.keys(scope.unit).forEach((term) => {
                    elementToCompile += `<span ng-show="unitVisibleItems.includes('${term}')">{{ unitVisibleItems.includes('${term}') ? '${term}=' + (unit.${term}.constructor.name === 'Array' ? unit.${term}.join(' ') : unit.${term} ) : '' }} </br></span>`;
                });

                elementToCompile += '</br><span class="section">[Service]</span></br>'

                Object.keys(scope.service).forEach((term) => {
                    elementToCompile += `<span ng-show="serviceVisibleItems.includes('${term}')">{{ serviceVisibleItems.includes('${term}') ? '${term}=' + (service.${term}.constructor.name === 'Array' ? service.${term}.join(' ') : service.${term} ) : '' }} </br></span>`;
                });

                elementToCompile += '</br><span class="section">[Install]</span></br>'

                Object.keys(scope.install).forEach((term) => {
                    elementToCompile += `<span ng-show="installVisibleItems.includes('${term}')"> {{ installVisibleItems.includes('${term}') ? '${term}=' + (install.${term}.constructor.name === 'Array' ? install.${term}.join(' ') : install.${term} ) : '' }} </br></span>`;
                });

                elementToCompile += '</div>'

                iElement.append($compile(angular.element(elementToCompile))(scope));
            }
        }
    }])
    .directive('dUnit', ['$compile', function ($compile) {
        return {
            scope: false,
            link: function (scope, iElement, iAttrs) {

                const section = iAttrs.sec;
                const visibleItems = iAttrs.vis;


                Object.keys(scope[section]).forEach((term) => {

                    const helpVarName = section.trim() + term.trim() + 'Help';

                    let elementToCompile;

                    if (section === 'service' && term === 'Environment') {

                        elementToCompile = angular.element(`
                        <div ng-show="${visibleItems}.includes('${term}')" style="padding: 10px; border: 1px dashed grey; margin-bottom: 10px;">

                        ${term}
            
                        <md-input-container class="md-block md-icon-right">
            
                            <md-chips ng-model="${section}.${term}"
                                      md-removable="true"
                                      readonly="true"
                                      style="min-height: 48px; display: inline-block;">
                            </md-chips>
                        </md-input-container>
            
                        <div layout="row">
                            <div flex="40">
                                <md-input-container class="md-block">
                                    <label>Key</label>
                                    <input type="text" ng-model="inputKey">
                                </md-input-container>
                            </div>
                            <div flex="40">
                                <md-input-container class="md-block">
                                    <label>Value</label>
                                    <input type="text" ng-model="inputVar">
                                </md-input-container>
                            </div>
                            <div flex>
                                <md-button ng-click="addMapVariable('${section}', '${term}')">Add</md-button>
                            </div>
                        </div>
                    </div>`);

                    } else if (Array.isArray(scope[section][term])) {

                        elementToCompile = angular.element(`
                      <md-input-container ng-show="${visibleItems}.includes('${term}')" class="md-block md-icon-right">
                        <md-chips ng-model="${section}.${term}" input-aria-label="${term}" md-separator-keys="keys"
                                  placeholder="${term}"
                                   secondary-placeholder="Add another" input-aria-describedby="spaceSeparatorKeyWants">
                        </md-chips>
                        
                        
                                                     <md-button ng-click="${helpVarName}=!${helpVarName}" class="md-icon-button" aria-label="info" style="display:inline-block; margin: 0;
right: 2px;
left: auto;
position: absolute;
top: 0;">
                                   <md-icon ng-class="{'hint': ${helpVarName}}" md-svg-src="info.svg"></md-icon>
                             </md-button>
                           
                            
                            <ng-messages ng-messages="true" ng-if="${helpVarName}" role="alert">
                              <ng-message-default>${scope.docs[section][term]}</ng-message-default>
                            </ng-messages>
                        
                       </md-input-container>`);

                    } else if (typeof scope[section][term] === 'string') {

                        if (scope.enums[section] && scope.enums[section].hasOwnProperty(term)) {


                            elementToCompile = angular.element(`
                            <md-input-container ng-init="${helpVarName}=false"  ng-show="${visibleItems}.includes('${term}')" class="md-block md-icon-right">
                            <label>${term}</label>
                            <md-select ng-model="${section}.${term}">
                                <md-option ng-repeat="option in enums.${section}.${term}" value="{{option}}">
                                    {{option}}
                                </md-option>
                            </md-select>
                            
                          
                             <md-button ng-click="${helpVarName}=!${helpVarName}" class="md-icon-button" aria-label="info" style="display:inline-block; margin: 0;
right: 2px;
left: auto;
position: absolute;
top: 0">
                                  <md-icon ng-class="{'hint': ${helpVarName}}" md-svg-src="info.svg"></md-icon>
                             </md-button>
                           
                            
                            <ng-messages ng-messages="true" ng-if="${helpVarName}" role="alert">
                              <ng-message-default>${scope.docs[section][term]}</ng-message-default>
                            </ng-messages>
                            
                            
                            
                        </md-input-container>`);

                        } else {

                            elementToCompile = angular.element(`
                         <md-input-container ng-show="${visibleItems}.includes('${term}')" class="md-block md-icon-right">
                            <label>${term}</label>
                            <input type="text" ng-model="${section}.${term}">
                            
                            
                                                         <md-button ng-click="${helpVarName}=!${helpVarName}" class="md-icon-button" aria-label="info" style="display:inline-block; margin: 0;
right: 2px;
left: auto;
position: absolute;
top: 0;">
                                   <md-icon ng-class="{'hint': ${helpVarName}}" md-svg-src="info.svg"></md-icon>
                             </md-button>
                           
                            
                            <ng-messages ng-messages="true" ng-if="${helpVarName}" role="alert">
                              <ng-message-default>${scope.docs[section][term]}</ng-message-default>
                            </ng-messages>
                            
                            
                         </md-input-container>
                        `);

                        }

                    } else if (typeof scope[section][term] === 'boolean') {

                        elementToCompile = angular.element(`
                        <md-input-container ng-show="${visibleItems}.includes('${term}')" class="md-block md-icon-right">
                        <md-switch class="md-primary" ng-model="${section}.${term}">
                          ${term}
                        </md-switch>
                        
                                                     <md-button ng-click="${helpVarName}=!${helpVarName}" class="md-icon-button" aria-label="info" style="display:inline-block; margin: 0;
right: 2px;
left: auto;
position: absolute;
top: 0;">
                                   <md-icon ng-class="{'hint': ${helpVarName}}" md-svg-src="info.svg"></md-icon>
                             </md-button>
                           
                            
                            <ng-messages ng-messages="true" ng-if="${helpVarName}" role="alert">
                              <ng-message-default>${scope.docs[section][term]}</ng-message-default>
                            </ng-messages>
                        
                        </md-input-container>                        
                        `);

                    }

                    if (elementToCompile) {
                        iElement.append(elementToCompile);

                        $compile(elementToCompile)(scope);
                    }
                });
            }
        }
    }])
    .config(['$mdThemingProvider', function ($mdThemingProvider) {

        // Configure a dark theme with primary foreground yellow

        $mdThemingProvider.theme('default')
            .primaryPalette('amber')
            .dark();

    }]);
